{-|
Module      : Messages
Description : Output messages

This module contains a huge data type with many constructors, each representing
a different message that the script presentation engine may output. Any that it
doesn't know about will be regurgitated intact using 'MsgUnprocessed'. Others
are converted at some point, probably using 'imsg2doc' or 'imsg2doc_html', to a
message in natural language. In principle, the program's output can be
converted this way to other languages by defining a new case for that language
in the 'RenderMessage' instance for 'ScriptMessage'. So far only English is
supported (and even then it is incomplete).

This module was originally written via the Yesod library @shakespeare-i18n@, with
messages defined in external files. Unfortunately, due to performance bugs in
GHC, compiling this module this way was unacceptably slow, which made adding
new cases far more tedious than it should have been. Most of this file consists
of code generated by the @shakespeare-i18n@ Template Haskell splice function
'Text.Shakespeare.I18N.mkMessage', dumped with the @-ddump-splices@ option to
GHC, and edited for human readability.

Functions used in 'ScriptMessage''s instance of the localization method
'Text.Shakespeare.I18N.renderMessage' are defined in "MessageTools". The
Template Haskell version of this module required them to be in a separate
module due to TH stage restrictions.
-}
module Messages (
        ScriptMessage (..)
    ,   StatementHandler
    ,   template, templateDoc
    ,   message, messageText
    ,   imsg2doc, imsg2doc_html
    ,   IndentedMessage, IndentedMessages
    ) where

import Data.Monoid ((<>))

import Data.Text (Text)
import qualified Data.Text as T

import Text.PrettyPrint.Leijen.Text (Doc)
import qualified Text.PrettyPrint.Leijen.Text as PP
import Text.Shakespeare.I18N (RenderMessage (..))

import Abstract (GenericStatement)
import qualified Doc
import MessageTools -- import everything
import SettingsTypes (PPT, getLangs, GameData (..), IsGameData (..))
import Data.Maybe (isJust, fromMaybe, catMaybes)

-- | Dummy type required by the Shakespeare machinery.
data Script = Script

-- | The abstract message type. Each constructor is a localizable message.
--
-- To add a new message, add a constructor here (using the same names as an
-- existing constructor if possible), then add a case for it in the
-- 'RenderMessage' instance for 'ScriptMessage'.
data ScriptMessage
    = MsgUnprocessed {scriptMessageMsg :: Text}
    | MsgYes {scriptMessageIcon :: Text}
    | MsgNo {scriptMessageIcon :: Text}
    | MsgAddCardinal
    | MsgHeirDies {scriptMessageYn :: Bool}
    | MsgRulerDies
    | MsgLoseCardinal
    | MsgIsJanissaryMod
    | MsgIsRajputMod
    | MsgIsImperialMod
    | MsgGainADM {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainAT {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainATorMil {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainAuth {scriptMessageAmt :: Double}
    | MsgGainBT {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainBP {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainBM {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainDIP {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainDoom {scriptMessageAmt :: Double}
    | MsgHeirGainClaim {scriptMessageAmt :: Double}
    | MsgGainDevotion {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainHordeUnity {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainImperialAuthority {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainKarma {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainLegitimacy {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainMIL {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainNavyTradition {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainPapalInfluence {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainPrestige {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgAddPrestigeOrMonarchPower {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainStability {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainWarExhaustion {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainYearlyManpower {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainADMSkill {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainDIPSkill {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainMILSkill {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainStatOrMonarchPower {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgHeirGainStatOrMonarchPower {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgGainHeirADMSkill {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainHeirDIPSkill {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainHeirMILSkill {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainSiegeProgress {scriptMessageAmt :: Double}
    | MsgGainPatAuth {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainMysticism {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainLegalism {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgStrengthenStatists {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgStrengthenOrangists {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainRepTrad {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainRevolutionaryZeal {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainInflation {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainLocalAutonomy {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgReformDesire {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainReformDesire {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainMercantilism {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainMercantilismOrMonarchPower {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainMP {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainMPFrac {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgSeparatism {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgCountryMod
    | MsgLibertyDesireMod
    | MsgProvMod
    | MsgPermanentProvMod
    | MsgProvTriggeredMod
    | MsgRulerMod
    | MsgTradeMod
    | MsgAddMod {scriptMessageModid :: Text, scriptMessageName :: Text, scriptMessageDays :: Double}
    | MsgGainMod {scriptMessageModid :: Text, scriptMessageType :: Text, scriptMessageName :: Text}
    | MsgGainModDur {scriptMessageModid :: Text, scriptMessageType :: Text, scriptMessageName :: Text, scriptMessageDays :: Double}
    | MsgGainModPow {scriptMessageModid :: Text, scriptMessageType :: Text, scriptMessageName :: Text, scriptMessagePow :: Double}
    | MsgGainModPowDur {scriptMessageModid :: Text, scriptMessageType :: Text, scriptMessageName :: Text, scriptMessagePow :: Double, scriptMessageDays :: Double}
    | MsgActorGainsMod {scriptMessageModid :: Text, scriptMessageWho :: Text, scriptMessageType :: Text, scriptMessageName :: Text}
    | MsgActorGainsModDur {scriptMessageModid :: Text, scriptMessageWho :: Text, scriptMessageType :: Text, scriptMessageName :: Text, scriptMessageDays :: Double}
    | MsgActorGainsModPow {scriptMessageModid :: Text, scriptMessageWho :: Text, scriptMessageType :: Text, scriptMessageName :: Text, scriptMessagePow :: Double}
    | MsgActorGainsModPowDur {scriptMessageModid :: Text, scriptMessageWho :: Text, scriptMessageType :: Text, scriptMessageName :: Text, scriptMessagePow :: Double, scriptMessageDays :: Double}
    | MsgHasModifier {scriptMessageModid :: Text, scriptMessageKind :: Text, scriptMessageName :: Text}
    | MsgRemoveModifier {scriptMessageModid :: Text, scriptMessageKind :: Text, scriptMessageName :: Text}
    | MsgAllOf
    | MsgFROM
    | MsgROOT
    | MsgROOTCountry
    | MsgROOTCountryAsOther
    | MsgROOTProvince
    | MsgROOTProvinceOwner
    | MsgROOTProvinceAsOther
    | MsgROOTTradeNode
    | MsgROOTGeographic
    | MsgPREV
    | MsgPREVCountry
    | MsgPREVCountryAsOther
    | MsgPREVProvince
    | MsgPREVProvinceOwner
    | MsgPREVProvinceAsOther
    | MsgPREVTradeNode
    | MsgPREVGeographic
    | MsgTHISCountry
    | MsgTHISCountryAsOther
    | MsgTHISProvince
    | MsgTHISProvinceOwner
    | MsgTHISProvinceAsOther
    | MsgTHISTradeNode
    | MsgTHISGeographic
    | MsgController
    | MsgEmperor
    | MsgOriginalDynasty
    | MsgHistoricDynasty
    | MsgNoneOf
    | MsgAllCoreProvince
    | MsgAllProvince
    | MsgArea
    | MsgAtLeastOneOf
    | MsgAnyActiveTradeNode
    | MsgAnyAlly
    | MsgAnyCoreCountry
    | MsgAnyCoreProvince
    | MsgAnyCountry
    | MsgAnyEmptyNeighborProvince
    | MsgAnyEnemyCountry
    | MsgAnyHereticProvince
    | MsgAnyKnownCountry
    | MsgAnyNeighborCountry
    | MsgAnyNeighborProvince
    | MsgAnyOwnedProvince
    | MsgAnyPrivateeringCountry
    | MsgAnyTradeNodeProvince
    | MsgAnyProvince
    | MsgAnyRival
    | MsgAnySubject
    | MsgAnyTradeNode
    | MsgCapital
    | MsgAllCountries
    | MsgAllNeighborCountries
    | MsgAllNeighborProvinces
    | MsgAllSubjectCountries
    | MsgEffect
    | MsgElse
    | MsgElseIf
    | MsgEveryActiveTradeNode
    | MsgEveryAlly
    | MsgEveryCoreCountry
    | MsgEveryCoreProvince
    | MsgEveryCountry
    | MsgEveryEnemyCountry
    | MsgEveryHereticProvince
    | MsgEveryKnownCountry
    | MsgEveryNeighborCountry
    | MsgEveryNeighborProvince
    | MsgEveryOwnedProvince
    | MsgEveryProvince
    | MsgEveryRival
    | MsgEverySubject
    | MsgHiddenEffect
    | MsgIf
    | MsgLimit
    | MsgMostProvinceTradePower
    | MsgOverlord
    | MsgOwner
    | MsgRandomActiveTradeNode
    | MsgRandomAlly
    | MsgRandomCoreCountry
    | MsgRandomCoreProvince
    | MsgRandomCountry
    | MsgRandomElector
    | MsgRandomEnemyCountry
    | MsgRandomEmptyNeighborProvince
    | MsgRandomHereticProvince
    | MsgRandomKnownCountry
    | MsgRandomList
    | MsgRandomNeighborCountry
    | MsgRandomNeighborProvince
    | MsgRandomOwnedProvince
    | MsgRandomPrivateeringCountry
    | MsgRandomProvince
    | MsgRandomRival
    | MsgRandomSubjectCountry
    | MsgRandomTradeNode
    | MsgStrongestTradePower
    | MsgWhile
    | MsgRandomChance {scriptMessageChance :: Double}
    | MsgRandom
    | MsgChangeGovernment {scriptMessageWhat :: Text}
    | MsgContinentIs {scriptMessageWhat :: Text}
    | MsgContinentIsAs {scriptMessageWhat :: Text}
    | MsgCultureIs {scriptMessageWhat :: Text}
    | MsgCultureIsAs {scriptMessageWho :: Text}
    | MsgCultureIsGroup {scriptMessageWhat :: Text}
    | MsgCultureGroupAs {scriptMessageWhat :: Text}
    | MsgRulerIsDynasty {scriptMessageWhat :: Text}
    | MsgRulerIsSameDynasty {scriptMessageWho :: Text}
    | MsgHeirNationality {scriptMessageWhat :: Text}
    | MsgHeirNationalityAs {scriptMessageWho :: Text}
    | MsgHeirReligion {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgHeirReligionAs {scriptMessageWho :: Text}
    | MsgSetHeirReligion {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgSetHeirReligionAs {scriptMessageWho :: Text}
    | MsgDisasterEnds {scriptMessageWhat :: Text}
    | MsgGovernmentIs {scriptMessageWhat :: Text}
    | MsgGovernmentIsIcon {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgHasAdvisor {scriptMessageWhom :: Text}
    | MsgHasAdvisorType {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgHasTerrain {scriptMessageWhat :: Text}
    | MsgUnitSpawnsCountry {scriptMessageIcon :: Text, scriptMessageSpecialUnitType :: Maybe Text, scriptMessageUnitType :: Text, scriptMessageRegimentOrShip :: Text, scriptMessageWhom :: Text}
    | MsgUnitSpawnsProvince {scriptMessageIcon :: Text, scriptMessageSpecialUnitType :: Maybe Text, scriptMessageUnitType :: Text, scriptMessageRegimentOrShip :: Text, scriptMessageWhere :: Text}
    | MsgAdvisorDies {scriptMessageWho :: Text}
    | MsgDominantCultureIs {scriptMessageWhat :: Text}
    | MsgDominantCultureIsAs {scriptMessageWhat :: Text}
    | MsgPrimaryCultureIs {scriptMessageWhat :: Text}
    | MsgPrimaryCultureIsAs {scriptMessageWhat :: Text}
    | MsgRegionIs {scriptMessageWhat :: Text}
    | MsgSuperRegionIs {scriptMessageWhat :: Text}
    | MsgLoseAdvisor {scriptMessageWho :: Text}
    | MsgRemoveFromEstate {scriptMessageIcon :: Text, scriptMessageWhom :: Text}
    | MsgDisasterOngoing {scriptMessageWhat :: Text}
    | MsgProvinceIs {scriptMessageWhat :: Text}
    | MsgOwns {scriptMessageWhat :: Text}
    | MsgOwnsCore {scriptMessageWhat :: Text}
    | MsgControls {scriptMessageWhat :: Text}
    | MsgAdvisorExists {scriptMessageAdvisorID :: Double}
    | MsgAdvisorIsEmployed {scriptMessageAdvisorID :: Double}
    | MsgClearFlag {scriptMessageFlagType :: Text, scriptMessageName :: Text}
    | MsgHasFlag {scriptMessageFlagType :: Text, scriptMessageName :: Text}
    | MsgSetFlag {scriptMessageFlagType :: Text, scriptMessageName :: Text}
    | MsgHadFlag {scriptMessageCategory :: Text, scriptMessageName :: Text, scriptMessageDays :: Double}
    | MsgCountryFlag
    | MsgProvinceFlag
    | MsgRulerFlag
    | MsgGlobalFlag
    | MsgConsortFlag
    | MsgHeirFlag
    | MsgHadCountryFlag {scriptMessageIcon :: Text, scriptMessageName :: Text, scriptMessageDays :: Double}
    | MsgHadProvinceFlag {scriptMessageIcon :: Text, scriptMessageName :: Text, scriptMessageDays :: Double}
    | MsgHadRulerFlag {scriptMessageIcon :: Text, scriptMessageName :: Text, scriptMessageDays :: Double}
    | MsgHadHeirFlag {scriptMessageIcon :: Text, scriptMessageName :: Text, scriptMessageDays :: Double}
    | MsgHadGlobalFlag {scriptMessageIcon :: Text, scriptMessageName :: Text, scriptMessageDays :: Double}
    | MsgColonySettlers {scriptMessageAmt :: Double}
    | MsgWasAtWar {scriptMessageAmt :: Double}
    | MsgHeirAge {scriptMessageAmt :: Double}
    | MsgYearIs {scriptMessageAmt :: Double}
    | MsgNumLoans {scriptMessageAmt :: Double}
    | MsgNumMercs {scriptMessageAmt :: Double}
    | MsgNumMissionaries {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgNumPorts {scriptMessageAmt :: Double}
    | MsgNumRebelArmies {scriptMessageAmt :: Double}
    | MsgNumEmbargoes {scriptMessageAmt :: Double}
    | MsgNumTradingBonuses {scriptMessageAmt :: Double}
    | MsgUnitsInProvince {scriptMessageUnitType :: Text, scriptMessageAmt :: Double}
    | MsgUnitsInProvinceOwnedBy {scriptMessageUnitType :: Text, scriptMessageWhom :: Text}
    | MsgNumCities {scriptMessageAmt :: Double}
    | MsgNumCitiesThan {scriptMessageWhom :: Text}
    | MsgToleranceToThis {scriptMessageAmt :: Double}
    | MsgRulerADM {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgADMTech {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgArmyTradition {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgArmyTraditionAs {scriptMessageIcon :: Text, scriptMessageWhom :: Text}
    | MsgArmyTraditionFromBattles {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgBaseManpower {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgBaseProduction {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgBaseTax {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgCreateAdmiral {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgCreateConquistador {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgCreateExplorer {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgCreateGeneral {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgDevelopment {scriptMessageIcon :: Text, scriptMessageDevelopment :: Double}
    | MsgDevelopmentAs {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgRulerDIP {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgDIPTech {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgHordeUnity {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgKarma {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgLegitimacy {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgLegitimacyAs {scriptMessageIcon :: Text, scriptMessageWhom :: Text}
    | MsgLegitimacyEquivalent {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgLegitimacyEquivalentAs {scriptMessageIcon :: Text, scriptMessageWhom :: Text}
    | MsgAddLegitimacyEquivalent {legitimacy :: Double, rt :: Double}
    | MsgRulerMIL {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgMILTech {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgNumAllies {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgNumCardinals {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgNumColonists {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgNumHeavyShips {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgNumHeavyShipsMatches {scriptMessageIcon :: Text, scriptMessageWhom :: Text}
    | MsgNumLightShips {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgNumLightShipsMatches {scriptMessageIcon :: Text, scriptMessageWhom :: Text}
    | MsgNumGalleyShips {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgNumGalleyShipsMatches {scriptMessageIcon :: Text, scriptMessageWhom :: Text}
    | MsgNumTransportShips {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgNumTransportShipsMatches {scriptMessageIcon :: Text, scriptMessageWhom :: Text}
    | MsgNumMerchants {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgStability {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgTotalDevelopment {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgTotalDevelopmentAs {scriptMessageIcon :: Text, scriptMessageWhom :: Text}
    | MsgTotalCardinals {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgUnrest {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgMonthlyIncome {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgMonthlyIncomeAs {scriptMessageIcon :: Text, scriptMessageWhom :: Text}
    | MsgWarExhaustion {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgWarScore {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgRepTrad {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgInflation {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgInflationAs {scriptMessageIcon :: Text, scriptMessageWhom :: Text}
    | MsgLocalAutonomy {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgManpower {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgManpowerPercentage {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgMercantilism {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgChangeGoods {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgCreateAdvisor {scriptMessageInfo :: Text, scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgHasIdeaGroup {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgProducesGoods {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgProducesSameGoods {scriptMessageWhere :: Text}
    | MsgEstateExists {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgAssignToEstate {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgRulerIsGeneral {scriptMessageIcon :: Text, scriptMessage_what :: Text}
    | MsgAlliedWith {scriptMessageWhom :: Text}
    | MsgCedeProvinceTo {scriptMessageWhom :: Text}
    | MsgControlledBy {scriptMessageWhom :: Text}
    | MsgDefensiveWarAgainst {scriptMessageWhom :: Text}
    | MsgDiscoverCountry {scriptMessageWhom :: Text}
    | MsgDiscoverProvince {scriptMessageWhat :: Text}
    | MsgGainCore {scriptMessageWho :: Text}
    | MsgGainCoreProvince {scriptMessageWhat :: Text}
    | MsgGainTerritorialCore {scriptMessageWho :: Text}
    | MsgGainTerritorialCoreProvince {scriptMessageWhat :: Text}
    | MsgGainPermanentClaimCountry {scriptMessageWho :: Text}
    | MsgGainPermanentClaimProvince {scriptMessageWhere :: Text}
    | MsgHasDiscovered {scriptMessageWhomOrWhere :: Text}
    | MsgDiscoveredBy {scriptMessageWhom :: Text}
    | MsgSameContinent {scopeIsCountry :: Bool, paramIsCountry :: Bool, scriptMessageWhomOrWhere :: Text}
    | MsgInherit {scriptMessageWhom :: Text}
    | MsgNeighbors {scriptMessageWhom :: Text}
    | MsgIsRival {scriptMessageWhom :: Text}
    | MsgIsSubjectOf {scriptMessageWhom :: Text}
    | MsgIsSubjectOfTypeWithOverlord {scriptMessageType :: Text, scriptMessageWhom :: Text}
    | MsgLoseCoreCountry {scriptMessageWho :: Text}
    | MsgLoseCoreProvince {scriptMessageWhere :: Text}
    | MsgRoyalMarriageWith {scriptMessageWhom :: Text}
    | MsgOffensiveWarAgainst {scriptMessageWhom :: Text}
    | MsgOwnedBy {scriptMessageWhom :: Text}
    | MsgReleaseVassal {scriptMessageWhom :: Text}
    | MsgUnderSiegeBy {scriptMessageWhom :: Text}
    | MsgSupportIndependenceOf {scriptMessageWhom :: Text}
    | MsgCountryIs {scriptMessageWho :: Text}
    | MsgTruceWith {scriptMessageWhom :: Text}
    | MsgAtWarWith {scriptMessageWhom :: Text}
    | MsgMakeWhitePeace {scriptMessageWhom :: Text}
    | MsgCountryExists {scriptMessageWho :: Text}
    | MsgExists {scriptMessageYn :: Bool}
    | MsgSameReligion {scriptMessageWhom :: Text}
    | MsgReligion {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgSameReligionGroup {scriptMessageWhom :: Text}
    | MsgReligionGroup {scriptMessage_ :: Text, scriptMessageWhat :: Text}
    | MsgChangeSameReligion {scriptMessageWhom :: Text}
    | MsgChangeReligion {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgChangeRulerSameReligion {scriptMessageWhom :: Text}
    | MsgChangeRulerReligion {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgChangeConsortSameReligion {scriptMessageWhom :: Text}
    | MsgChangeConsortReligion {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgRulerReligionIs {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgRulerReligionIsSame {scriptMessageWhom :: Text}
    | MsgConsortReligionIs {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgConsortReligionIsSame {scriptMessageWhom :: Text}
    | MsgRulerCultureIs {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgRulerCultureIsSame {scriptMessageWhom :: Text}
    | MsgIsCoreOf {scriptMessageWhom :: Text}
    | MsgHasCoreOn {scriptMessageWhat :: Text}
    | MsgHasClaim {scriptMessageWho :: Text}
    | MsgHasClaimOn {scriptMessageWhat :: Text}
    | MsgIsAIControlled {scriptMessageYn :: Bool}
    | MsgHasCardinal {scriptMessageYn :: Bool}
    | MsgHasConsort {scriptMessageYn :: Bool}
    | MsgHasHeir {scriptMessageYn :: Bool}
    | MsgHasHeirNamed {scriptMessageWhom :: Text}
    | MsgHasOwnerCulture {scriptMessageYn :: Bool}
    | MsgHasOwnerAcceptedCulture {scriptMessageYn :: Bool}
    | MsgHasOwnerReligion {scriptMessageYn :: Bool}
    | MsgHasPort {scriptMessageYn :: Bool}
    | MsgHasSeatInParliament {scriptMessageYn :: Bool}
    | MsgIsInRegency {scriptMessageYn :: Bool}
    | MsgIsInExtendedRegency {scriptMessageYn :: Bool}
    | MsgUnderSiege {scriptMessageYn :: Bool}
    | MsgAtWar {scriptMessageYn :: Bool}
    | MsgIsCapital {scriptMessageYn :: Bool}
    | MsgIsCity {scriptMessageYn :: Bool}
    | MsgIsColony {scriptMessageYn :: Bool}
    | MsgIsEmperor {scriptMessageYn :: Bool}
    | MsgIsFemale {scriptMessageYn :: Bool}
    | MsgIsInCapitalArea {scriptMessageYn :: Bool}
    | MsgIsLesserInUnion {scriptMessageYn :: Bool}
    | MsgIsLooted {scriptMessageYn :: Bool}
    | MsgIsOverseas {scriptMessageYn :: Bool}
    | MsgIsPartOfHRE {scriptMessageYn :: Bool}
    | MsgIsCenterOfReformation {scriptMessageYn :: Bool}
    | MsgIsSubject {scriptMessageYn :: Bool}
    | MsgPapacyIsActive {scriptMessageYn :: Bool}
    | MsgHasBeenPlayer {scriptMessageYn :: Bool}
    | MsgIsState {scriptMessageYn :: Bool}
    | MsgIsStatistsInPower {scriptMessageYn :: Bool}
    | MsgIsOrangistsInPower {scriptMessageYn :: Bool}
    | MsgGainCB {scriptMessageCbtype :: Text, scriptMessageWhom :: Text}
    | MsgGainCBDuration {scriptMessageCbtype :: Text, scriptMessageWhom :: Text, scriptMessageMonths :: Double}
    | MsgReverseGainCB {scriptMessageCbtype :: Text, scriptMessageWho :: Text}
    | MsgReverseGainCBDuration {scriptMessageCbtype :: Text, scriptMessageWho :: Text, scriptMessageMonths :: Double}
    | MsgFactionGainInfluence {scriptMessageIcon :: Text, scriptMessageWhom :: Text, scriptMessageAmt :: Double}
    | MsgFactionHasInfluence {scriptMessageIcon :: Text, scriptMessageWhom :: Text, scriptMessageAmt :: Double}
    | MsgFactionInPower {scriptMessageIcon :: Text, scriptMessageWhom :: Text}
    | MsgFactionInPowerEffect {scriptMessageIcon :: Text, scriptMessageWhom :: Text}
    | MsgHasFaction {scriptMessageWhat :: Text}
    | MsgHasFactions {scriptMessageYn :: Bool}
    | MsgHasAdoptedCult {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgHasUnlockedCult {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgHasBuilding {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgIndefinitely
    | MsgForDays {scriptMessageDays :: Double}
    | MsgEstateLoyalty {scriptMessageIcon :: Text, scriptMessageWho :: Text, scriptMessageAmt :: Double}
    | MsgEstateTerritory {scriptMessageIcon :: Text, scriptMessageWho :: Text, scriptMessageAmt :: Double}
    | MsgEstateInfluence {scriptMessageIcon :: Text, scriptMessageWho :: Text, scriptMessageAmt :: Double}
    | MsgAddEstateLoyalty {scriptMessageIcon :: Text, scriptMessageWho :: Text, scriptMessageAmt :: Double}
    | MsgAddEstateInfluence {scriptMessageIcon :: Text, scriptMessageWho :: Text, scriptMessageAmt :: Double}
    | MsgEstateLoyaltyModifier {scriptMessageIcon :: Text, scriptMessageWho :: Text, scriptMessageWhat :: Text, scriptMessageAmt :: Double, scriptMessageDur :: Text}
    | MsgEstateInfluenceModifier {scriptMessageIcon :: Text, scriptMessageWho :: Text, scriptMessageWhat :: Text, scriptMessageAmt :: Double, scriptMessageDur :: Text}
    | MsgAddOpinion {scriptMessageModid :: Text, scriptMessageWhat :: Text, scriptMessageWhom :: Text}
    | MsgReverseAddOpinion {scriptMessageModid :: Text, scriptMessageWhat :: Text, scriptMessageWho :: Text}
    | MsgAddOpinionDur {scriptMessageModid :: Text, scriptMessageWhat :: Text, scriptMessageWhom :: Text, scriptMessageYears :: Double}
    | MsgReverseAddOpinionDur {scriptMessageModid :: Text, scriptMessageWhat :: Text, scriptMessageWho :: Text, scriptMessageYears :: Double}
    | MsgMutualOpinion {scriptMessageModid :: Text, scriptMessageWhat :: Text, scriptMessageWhom :: Text}
    | MsgMutualOpinionDur {scriptMessageModid :: Text, scriptMessageWhat :: Text, scriptMessageWhom :: Text, scriptMessageDays :: Double}
    | MsgHasOpinionMod {scriptMessageModid :: Text, scriptMessageWhat :: Text, scriptMessageWhom :: Text}
    | MsgReverseHasOpinionMod {scriptMessageModid :: Text, scriptMessageWhat :: Text, scriptMessageWhom :: Text}
    | MsgRemoveOpinionMod {scriptMessageModid :: Text, scriptMessageWhat :: Text, scriptMessageWhom :: Text}
    | MsgReverseRemoveOpinionMod {scriptMessageModid :: Text, scriptMessageWhat :: Text, scriptMessageWhom :: Text}
    | MsgAddTreasury {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgAddYearsOfEstateLandIncome {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgAddYearsOfIncome {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgNewHeir
    | MsgNewHeirAttribs
    | MsgNewConsort
    | MsgNewConsortAttribs
    | MsgBuildToForcelimitLand {scriptMessageInficon :: Text, scriptMessageInfantry :: Double, scriptMessageCavicon :: Text, scriptMessageCavalry :: Double, scriptMessageArticon :: Text, scriptMessageArtillery :: Double}
    | MsgBuildToForcelimitNavy {scriptMessageHeavyicon :: Text, scriptMessageHeavy :: Double, scriptMessageLighticon :: Text, scriptMessageLight :: Double, scriptMessageGallicon :: Text, scriptMessageGalley :: Double, scriptMessageTranspicon :: Text, scriptMessageTransport :: Double}
    | MsgBuildToForcelimit {scriptMessageInficon :: Text, scriptMessageInfantry :: Double, scriptMessageCavicon :: Text, scriptMessageCavalry :: Double, scriptMessageArticon :: Text, scriptMessageArtillery :: Double, scriptMessageHeavyicon :: Text, scriptMessageHeavy :: Double, scriptMessageLighticon :: Text, scriptMessageLight :: Double, scriptMessageGallicon :: Text, scriptMessageGalley :: Double, scriptMessageTranspicon :: Text, scriptMessageTransport :: Double}
    | MsgProvinceEvent
    | MsgCountryEvent
    | MsgTriggerEvent {scriptMessageEvttype :: Text, scriptMessageEvtid :: Text, scriptMessageName :: Text}
    | MsgTriggerEventDays {scriptMessageEvttype :: Text, scriptMessageEvtid :: Text, scriptMessageName :: Text, scriptMessageDays :: Double}
    | MsgDeclareWarWithCB {scriptMessageWhom :: Text, scriptMessageCb :: Text}
    | MsgGainAdvisor {scriptMessageMaybeFemale :: Maybe Bool, scriptMessageMaybeAdvtype :: Maybe Text, scriptMessageMaybeName :: Maybe Text, scriptMessageMaybeWhere :: Maybe Text, scriptMessageMaybeSkill :: Maybe Double, scriptMessageScaled :: Bool, scriptMessageDiscount :: Double, scriptMessageMaybeExtraText :: Maybe Text, scriptMessageIcon :: Text, scriptMessageMaybeCulture :: Maybe Text, scriptMessageMaybeReligion :: Maybe Text, scriptMessageMaybeEstate :: Maybe Text, scriptMessageMaybeMinAge :: Maybe Double, scriptMessageMaybeMaxAge :: Maybe Double}
    | MsgRebelLeaderRuler
    | MsgNewRuler {scriptMessageRegent :: Bool}
    | MsgNewRulerLeader {scriptMessageRegent :: Bool, scriptMessageName :: Text}
    | MsgNewRulerAttribs {scriptMessageRegent :: Bool}
    | MsgNewRulerLeaderAttribs {scriptMessageRegent :: Bool, scriptMessageName :: Text}
    | MsgLeaderRuler {scriptMessageRegent :: Bool, scriptMessageName :: Text}
    | MsgNamed {scriptMessageName :: Text}
    | MsgNewDynMemberDynasty {scriptMessageName :: Text}
    | MsgNewDynMemberDynastyAs {scriptMessageName :: Text}
    | MsgNewDynMemberOriginalDynasty
    | MsgNewDynMemberHistoricDynasty
    | MsgNewDynMemberAge {scriptMessageAmt :: Double}
    | MsgNewDynMemberAdm {scriptMessageFixed :: Bool, scriptMessageAmt :: Double}
    | MsgNewDynMemberDip {scriptMessageFixed :: Bool, scriptMessageAmt :: Double}
    | MsgNewDynMemberMil {scriptMessageFixed :: Bool, scriptMessageAmt :: Double}
    | MsgNewDynMemberMaxAdm {scriptMessageAmt :: Double}
    | MsgNewDynMemberMaxDip {scriptMessageAmt :: Double}
    | MsgNewDynMemberMaxMil {scriptMessageAmt :: Double}
    | MsgNewDynMemberClaim {scriptMessageAmt :: Double}
    | MsgNewDynMemberCulture {scriptMessageText :: Text}
    | MsgNewDynMemberCultureAs {scriptMessageText :: Text}
    | MsgNewDynMemberReligion {scriptMessageIcon :: Text, scriptMessageText :: Text}
    | MsgNewDynMemberReligionAs {scriptMessageText :: Text}
    | MsgNewDynMemberHiddenSkills
    | MsgNewDynMemberRandomGender
    | MsgWithGender {scriptMessageMale :: Bool}
    | MsgNewDynMemberMinAge {scriptMessageAge :: Double}
    | MsgNewDynMemberMaxAge {scriptMessageAge :: Double}
    | MsgNewDynMemberBirthdate {scriptMessageDate :: Text}
    | MsgNewDynMemberBlockDisinherit
    | MsgNewDynMemberBastard
    | MsgNewDynMemberCountry {scriptMessageWhere :: Text}
    | MsgNewDynMemberForceRepublicanNames
    | MsgEstateHasInfluenceModifier {scriptMessageIcon :: Text, scriptMessageEstate :: Text, scriptMessageModifier :: Text}
    | MsgEstateHasLoyaltyModifier {scriptMessageIcon :: Text, scriptMessageEstate :: Text, scriptMessageModifier :: Text}
    | MsgTriggerSwitch
    | MsgTriggerSwitchClause {scriptMessageCond :: Text}
    | MsgProvinceHasRebels {scriptMessageIcon :: Text, scriptMessageRtype :: Text}
    | MsgRebelsFriendlyTo {scriptMessageFriend :: Text}
    | MsgRebelsLedBy {scriptMessageLeader :: Text}
    | MsgRebelsGainProgress {scriptMessageAmt :: Double}
    | MsgSpawnRebels {scriptMessageRtype :: Text, scriptMessageSize :: Double, scriptMessageFriend :: Text, scriptMessageLeader :: Text, scriptMessageWin :: Bool, scriptMessageProgress :: Text}
    | MsgSpawnProvinceReligiousRebels {scriptMessageSize :: Double}
    | MsgRebelsHaveRisen {scriptMessageIcon :: Text, scriptMessageRtype :: Text}
    | MsgHasDLC {scriptMessageIcon :: Text, scriptMessageDlc :: Text}
    | MsgProvince {scriptMessageWhere :: Text}
    | MsgTechGroup {scriptMessageIcon :: Text, scriptMessageName :: Text}
    | MsgUnlockCult {scriptMessageIcon :: Text, scriptMessageName :: Text}
    | MsgNumOfReligion {scriptMessageIcon :: Text, scriptMessageName :: Text, scriptMessageAmt :: Double}
    | MsgReligiousSchool {scriptSchoolIcon :: Text, scriptSchoolName :: Text, scriptGroupName :: Text}
    | MsgSetReligiousSchool {scriptSchoolIcon :: Text, scriptSchoolName :: Text, scriptGroupName :: Text}
    | MsgIsStrongestTradePower {scriptMessageWho :: Text}
    | MsgAreaIs {scriptMessageWhat :: Text}
    | MsgAreaIsAs {scriptMessageWhat :: Text}
    | MsgDominantReligion {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgDominantReligionAs {scriptMessageWhom :: Text}
    | MsgEnableReligion {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgHREReligion {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgSetHREReligionLocked {scriptMessageYn :: Bool}
    | MsgSetHREReligion {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgSetHREHereticReligion {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgSignWestphalia
    | MsgHRELeaguesEnabled {scriptMessageYn :: Bool}
    | MsgHREReligionLocked {scriptMessageYn :: Bool}
    | MsgHREWestphalia {scriptMessageYn :: Bool}
    | MsgIsElector {scriptMessageYn :: Bool}
    | MsgNoHREReforms
    | MsgHREPassedReform {scriptMessageWhat :: Text}
    | MsgEnableHRELeagues
    | MsgIsInLeagueWar {scriptMessageYn :: Bool}
    | MsgIsLeagueEnemy {scriptMessageWhom :: Text}
    | MsgIsLeagueFriend {scriptMessageWhom :: Text}
    | MsgReligionYears {scriptMessageIcon :: Text, scriptMessageName :: Text, scriptMessageYears :: Double}
    | MsgHasIdea {scriptMessageWhat :: Text}
    | MsgHasReform {scriptMessageWhat :: Text}
    | MsgHaveHadReform {scriptMessageWhat :: Text}
    | MsgHasReformTier {scriptMessageAmt :: Double}
    | MsgHasUnlockedGovernmentReform {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgReligionProvinces {scriptMessageIcon :: Text, scriptMessageName :: Text, scriptMessageAmt :: Double}
    | MsgGoodsProvinces {scriptMessageIcon :: Text, scriptMessageName :: Text, scriptMessageAmt :: Double}
    | MsgHasIdeaFromGroup {scriptMessageIcon :: Text, scriptMessageGroup :: Text, scriptMessageName :: Text, scriptMessageNum :: Int}
    | MsgNavyTradition {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgPrimitives {scriptMessageYn :: Bool}
    | MsgRulerIsForeigner {scriptMessageYn :: Bool}
    | MsgProdEff {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgProdEffAs {scriptMessageIcon :: Text, scriptMessageWhom :: Text}
    | MsgInvestedPapalInfluence {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgPapalInfluence {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgDevotion {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgPrestige {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgPrestigeAs {scriptMessageIcon :: Text, scriptMessageWhom :: Text}
    | MsgHasOpinion {scriptMessageAmt :: Double, scriptMessageWhom :: Text}
    | MsgReverseHasOpinion {scriptMessageAmt :: Double, scriptMessageWhom :: Text}
    | MsgNormalOrHistoricalNations {scriptMessageYn :: Bool}
    | MsgIsCustomNation {scriptMessageYn :: Bool}
    | MsgReligionEnabled {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgCapitalIs {scriptMessageWhat :: Text}
    | MsgFullIdeaGroup {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgTradeIncomePercentage {scriptMessageAmt :: Double}
    | MsgReligiousUnity {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgHasADM {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgHasDIP {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgHasMIL {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgRankDuchy
    | MsgRankKingdom
    | MsgRankEmpire
    | MsgSetRankDuchy
    | MsgSetRankKingdom
    | MsgSetRankEmpire
    | MsgOverextension {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgRandomNewWorld {scriptMessageYn :: Bool}
    | MsgIsColonialNation {scriptMessageYn :: Bool}
    | MsgIsFormerColonialNation {scriptMessageYn :: Bool}
    | MsgIsFreeOrTributaryTrigger {scriptMessageYn :: Bool}
    | MsgIsNomad {scriptMessageYn :: Bool}
    | MsgReligionReformed {scriptMessageYn :: Bool}
    | MsgChangeTag {scriptMessageWho :: Text}
    | MsgSetInEmpire {scriptMessageYn :: Bool}
    | MsgHasSecondaryReligion {scriptMessageYn :: Bool}
    | MsgSecondaryReligion {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgIsDefenderOfFaith {scriptMessageYn :: Bool}
    | MsgLegitimacyOrHordeUnity {scriptMessageAmt :: Double}
    | MsgCheckVariable {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgChangeTechGroup {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgChangeUnitType {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgNoBaseWeight
    | MsgAIBaseWeight {scriptMessageAmt :: Double}
    | MsgAIFactorOneline {scriptMessageFactor :: Text, scriptMessageMultiplier :: Double}
    | MsgAIFactorHeader {scriptMessageMultiplier :: Double}
    | MsgLucky {scriptMessageYn :: Bool}
    | MsgHasAdvisorLevel {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageLevel :: Double}
    | MsgNumRoyalMarriages {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgIsBankrupt {scriptMessageYn :: Bool}
    | MsgNumColonialSubjects {scriptMessageAmt :: Double}
    | MsgTradeEfficiency {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgHasWarTaxes {scriptMessageYn :: Bool}
    | MsgRevoltPercentage {scriptMessageAmt :: Double}
    | MsgHasAnyDisaster {scriptMessageYn :: Bool}
    | MsgHasActivePolicy {scriptMessageWhat :: Text}
    | MsgHasDucats {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgHasParliament {scriptMessageYn :: Bool}
    | MsgHasReligiousSchool {scriptMessageYn :: Bool}
    | MsgHasTruce {scriptMessageYn :: Bool}
    | MsgNumRebelControlledProvinces {scriptMessageAmt :: Double}
    | MsgFortLevel {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgHasTradeModifier {scriptMessageIcon :: Text, scriptMessageWho :: Text, scriptMessageWhat :: Text}
    | MsgIsMonth {scriptMessageWhat :: Text}
    | MsgIsSea {scriptMessageYn :: Bool}
    | MsgHasMerchant {scriptMessageWho :: Text}
    | MsgNumColonies {scriptMessageAmt :: Double}
    | MsgChangeSameCulture {scriptMessageWhom :: Text}
    | MsgChangeCulture {scriptMessageWhat :: Text}
    | MsgNavalForcelimit {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgBlockade {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgCreateAlliance {scriptMessageWhom :: Text}
    | MsgAddLocalUnrest {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGoldIncomePercentage {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgIsTribal {scriptMessageYn :: Bool}
    | MsgSetCapital {scriptMessageWhat :: Text}
    | MsgChangePrimaryCulture {scriptMessageWhat :: Text}
    | MsgColonialRegion {scriptMessageWhere :: Text}
    | MsgJuniorUnionWith {scriptMessageWhom :: Text}
    | MsgSeniorUnionWith {scriptMessageWhom :: Text}
    | MsgVassalOf {scriptMessageWhom :: Text}
    | MsgOverlordOf {scriptMessageWhom :: Text}
    | MsgChangeProvinceName {scriptMessageWhat :: Text}
    | MsgRenameCapital {scriptMessageWhat :: Text}
    | MsgOwnsOrVassal {scriptMessageWhere :: Text}
    | MsgIsInColonialRange {scriptMessageWhom :: Text}
    | MsgConstructingGreatProject {scriptMessageWhat :: Text}
    | MsgConstructing {scriptMessageWhat :: Text}
    | MsgStartConstructingGreatProject {scriptMessageIcon :: Text, scriptMessageWhom :: Text}
    | MsgCancelConstruction
    | MsgYearsOfIncome {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgLibertyDesire {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainLibertyDesire {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgColonialParent
    | MsgAlways {scriptMessageYn :: Bool}
    | MsgCapitalCultureDominant
    | MsgNumUnions {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgNumVassals {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgFreeVassal {scriptMessageWhom :: Text}
    | MsgHasMissionary {scriptMessageYn :: Bool}
    | MsgNavyPercentage {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgWasForceConverted {scriptMessageYn :: Bool}
    | MsgFemaleEmperorAllowed {scriptMessageYn :: Bool}
    | MsgImperialAuthority {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgImperialMandate {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgHasFemaleHeir {scriptMessageYn :: Bool}
    | MsgHasForeignHeir {scriptMessageYn :: Bool}
    | MsgPiety {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgIsInTutorial {scriptMessageYn :: Bool}
    | MsgGainFervor {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainChurchPower {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgTimeToFabricateClaims {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgMoraleOfArmies {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgMoraleOfArmiesAs {scriptMessageIcon :: Text, scriptMessageWhom :: Text}
    | MsgAvailableMercs {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainNavalLeaderSiege {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgAccCultureThreshold {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgBetterRelationsOverTime {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgMaySabotageReputation
    | MsgMayStudyTech
    | MsgMaySowDiscontent
    | MsgMayAgitateForLiberty
    | MsgMayInfiltrateAdministration
    | MsgGainLandLeaderSiege {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgTradeRange {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgTextIs {scriptMessageWhat :: Text}
    | MsgAnyOwnedPlanet
    | MsgAnyOwnedShip
    | MsgAnyPop
    | MsgEveryOwnedPlanet
    | MsgEveryOwnedPop
    | MsgRandomOwnedShip
    | MsgRandomPop
    | MsgRandomSystem
    | MsgRandomTile
    | MsgGainTrait {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgAbsolutism {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainAbsolutism {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgCurrentAge {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgAcceptedCulture {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgCalcTrueIf {scriptMessageAmt :: Double}
    | MsgGainConstructionProgress {scriptMessageAmt :: Double}
    | MsgGainHarmonizationProgress {scriptMessageAmt :: Double}
    | MsgGainHeirSupport {scriptMessageAmt :: Double}
    | MsgGainYearsOfSeparatism {scriptMessageAmt :: Double}
    | MsgAuth {scriptMessageAmt :: Double}
    | MsgGainColonyPopulation {scriptMessageAmt :: Double}
    | MsgGainCorruption {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainDevastation {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainHarmony {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainMilitarization {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainProsperity {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainSplendor {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgAddTariffValue {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainYearlySailors {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgAdminEfficiency {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgDisasterMod
    | MsgAddClaimFor {scriptMessageWho :: Text}
    | MsgAddClaimOn {scriptMessageWhere :: Text}
    | MsgAddAcceptedCulture {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgRemoveAcceptedCulture {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgAddAcceptedCultureOrDipPower {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageFree :: Bool, scriptMessageAmt :: Double}
    | MsgAddBuilding {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgAddHarmonizedReligion {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgAddHeirPersonality {scriptMessageAncestor :: Bool, scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgAddConsortPersonality {scriptMessageAncestor :: Bool, scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgAddRulerPersonality {scriptMessageAncestor :: Bool, scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgRemoveRulerPersonality {scriptMessageAncestor :: Bool, scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgRulerHasPersonality {scriptMessageAncestor :: Bool, scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgHeirHasPersonality {scriptMessageAncestor :: Bool, scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgConsortHasPersonality { scriptMessageAncestor :: Bool, scriptMessageIcon :: Text, scriptMessageWhat :: Text }
    | MsgAddCenterOfReformation {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgRemoveCenterOfReformation {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgAddTruceWith {scriptMessageWho :: Text}
    | MsgGainSailors {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainSailorsFrac {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgArmyProfessionalism {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgArmyProfessionalismAs {scriptMessageIcon :: Text, scriptMessageWhom :: Text}
    | MsgGainArmyProfessionalism {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgSailors {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgSailorsPercentage {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgNationalSailorsMod {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgCorruption {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgAddIncidentVariableValue {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgIncidentVariableValue {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgAddInstitutionEmbracement {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgAddIsolationism {scriptMessageAmt :: Double}
    | MsgGainMandate {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainMeritocracy {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgAddNextInstitutionEmbracement {scriptMessageAmt :: Double}
    | MsgAddSpyNetworkFrom {scriptMessageIcon :: Text, scriptMessageWhom :: Text, scriptMessageAmt :: Double}
    | MsgAddSpyNetworkIn {scriptMessageIcon :: Text, scriptMessageWhom :: Text, scriptMessageAmt :: Double}
    | MsgEventTarget {scriptMessageTag :: Text}
    | MsgEventTargetVar {scriptMessageTag :: Text}
    | MsgGenericTemplate {scriptMessageTemplate :: Text}
    | MsgGenericScriptedEffectTemplate {scriptMessageTemplate :: Text, scriptMessageNum :: Int}
    | MsgGenericText {text :: Text}
    | MsgGenericTextWithIcon {scriptMessageIcon :: Text, text :: Text}
    | MsgGenericModifier {scriptMessageIcon :: Text, scriptMessageAmt :: Double, locModifierName :: Text, amtTransformer :: Double -> Doc}
    | MsgGenericModifierDlcOnly {scriptMessageIcon :: Text, scriptMessageAmt :: Double, locModifierName :: Text, amtTransformer :: Double -> Doc}
    | MsgGenericAtLeast {scriptMessageIcon :: Text, scriptMessageAmt :: Double, scriptMessageWhat :: Text, amtTransformer :: Double -> Doc}
    | MsgGenericAtLeastAs {scriptMessageWhat :: Text, scriptMessageIcon :: Text, scriptMessageWhom :: Text}
    | MsgGenericIsAtLeast {scriptMessageIcon :: Text, scriptMessageAmt :: Double, scriptMessageWhat :: Text, amtTransformer :: Double -> Doc}
    | MsgAddStabilityOrAdm
    | MsgAddTrust {scriptMessageWhom :: Text, scriptMessageAmt :: Double}
    | MsgAddTrustMutual {scriptMessageWhom :: Text, scriptMessageAmt :: Double}
    | MsgSaveEventTargetAs {scriptMessageName :: Text}
    | MsgSaveGlobalEventTargetAs {scriptMessageName :: Text}
    | MsgClearGlobalEventTarget {scriptMessageName :: Text}
    | MsgHasSavedEventTarget {scriptMessageName :: Text}
    | MsgHasSavedGlobalEventTarget {scriptMessageName :: Text}
    | MsgRemoveClaim {scriptMessageWho :: Text}
    | MsgTribalAllegiance {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGainTribalAllegiance {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgArmySizePc {scriptMessageAmt :: Double}
    | MsgBuildInfantry {scriptMessageIcon :: Text, scriptMessageAmt :: Double, scriptMessageSpeed :: Double, scriptMessageCost :: Double}
    | MsgBuildCavalry {scriptMessageIcon :: Text, scriptMessageAmt :: Double, scriptMessageSpeed :: Double, scriptMessageCost :: Double}
    | MsgBuildArtillery {scriptMessageIcon :: Text, scriptMessageAmt :: Double, scriptMessageSpeed :: Double, scriptMessageCost :: Double}
    | MsgBuildHeavyShips {scriptMessageIcon :: Text, scriptMessageAmt :: Double, scriptMessageSpeed :: Double, scriptMessageCost :: Double}
    | MsgBuildLightShips {scriptMessageIcon :: Text, scriptMessageAmt :: Double, scriptMessageSpeed :: Double, scriptMessageCost :: Double}
    | MsgBuildGalleys {scriptMessageIcon :: Text, scriptMessageAmt :: Double, scriptMessageSpeed :: Double, scriptMessageCost :: Double}
    | MsgBuildTransports {scriptMessageIcon :: Text, scriptMessageAmt :: Double, scriptMessageSpeed :: Double, scriptMessageCost :: Double}
    | MsgMeritocracy {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgCheckIfNonStateAdvisorEffect
    | MsgADMTechAs {scriptMessageIcon :: Text, scriptMessageWho :: Text}
    | MsgDIPTechAs {scriptMessageIcon :: Text, scriptMessageWho :: Text}
    | MsgMILTechAs {scriptMessageIcon :: Text, scriptMessageWho :: Text}
    | MsgAddGovernmentReform {scriptMessageWhat :: Text}
    | MsgRemoveGovernmentReform {scriptMessageWhat :: Text}
    | MsgAddCOTLevel {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgRulerAge {scriptMessageAmt :: Double}
    | MsgEmployedAdvisor
    | MsgEmployedAdvisorWhere
    | MsgEmployedAdvisorAdmin
    | MsgEmployedAdvisorDiplo
    | MsgEmployedAdvisorMiltary
    | MsgEmployedAdvisorType {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgEmployedAdvisorMale {scriptMessageMale :: Bool}
    | MsgNumOwnedProvincesWith {scriptMessageAmt :: Double}
    | MsgNumOwnedProvincesOrNonSovereignSubjectsWith {scriptMessageAmt :: Double}
    | MsgNumOwnedProvincesOrSubjectsWith {scriptMessageAmt :: Double}
    | MsgNumOwnedStatesOrNonSovereignSubjectsWith {scriptMessageAmt :: Double}
    | MsgSetVariable { scriptMessageVar1 :: Text, scriptMessageVar2 :: Text}
    | MsgSetVariableVal { scriptMessageVar :: Text, scriptMessageAmt :: Double}
    | MsgAddVariable { scriptMessageVar1 :: Text, scriptMessageVar2 :: Text}
    | MsgAddVariableVal { scriptMessageVar :: Text, scriptMessageAmt :: Double}
    | MsgSubVariable { scriptMessageVar1 :: Text, scriptMessageVar2 :: Text}
    | MsgSubVariableVal { scriptMessageVar :: Text, scriptMessageAmt :: Double}
    | MsgMulVariable { scriptMessageVar1 :: Text, scriptMessageVar2 :: Text}
    | MsgMulVariableVal { scriptMessageVar :: Text, scriptMessageAmt :: Double}
    | MsgDivVariable { scriptMessageVar1 :: Text, scriptMessageVar2 :: Text}
    | MsgDivVariableVal { scriptMessageVar :: Text, scriptMessageAmt :: Double}
    | MsgChkVariable { scriptMessageVar1 :: Text, scriptMessageVar2 :: Text}
    | MsgChkVariableVal { scriptMessageVar :: Text, scriptMessageAmt :: Double}
    | MsgEquVariable { scriptMessageVar1 :: Text, scriptMessageVar2 :: Text}
    | MsgEquVariableVal { scriptMessageVar :: Text, scriptMessageAmt :: Double}
    | MsgIsColonialNationOf { scriptMessageWho :: Text }
    | MsgHasInstitution { scriptMessageIcon :: Text, scriptMessageWhat :: Text }
    | MsgWasNeverEndGameTag { scriptMessageYn :: Bool }
    | MsgHasCompletedAllReforms { scriptMessageYn :: Bool }
    | MsgHasCulturalUnion { scriptMessageYn :: Bool }
    | MsgHasFinalTierReform { scriptMessageYn :: Bool }
    | MsgPctBackingParliamentIssue { scriptMessageAmt :: Double }
    | MsgIsBackingCurrentIssue { scriptMessageYn :: Bool }
    | MsgHasActiveDebate { scriptMessageYn :: Bool }
    | MsgCurrentDebate { scriptMessageWhat :: Text }
    | MsgBackCurrentIssue { scriptMessageYn :: Bool }
    | MsgSetSeatInParliament { scriptMessageYn :: Bool }
    | MsgHasCustomIdeas { scriptMessageYn :: Bool }
    | MsgIsProvinceEmpty { scriptMessageYn :: Bool }
    | MsgIsEmperorOfChina { scriptMessageYn :: Bool }
    | MsgHasStatesGeneralMechanic { scriptMessageYn :: Bool }
    | MsgIsInWar
    | MsgDurationAtLeast { scriptMessageDays :: Double }
    | MsgIsAttackerWarLeader { scriptMessageWho :: Text }
    | MsgIsDefenderWarLeader { scriptMessageWho :: Text }
    | MsgIsAttacker { scriptMessageWho :: Text }
    | MsgIsDefender { scriptMessageWho :: Text }
    | MsgCasusBelliIs { scriptMessageCb :: Text }
    | MsgGainNewMissions
    | MsgIsRevolutionary { scriptMessageYn :: Bool }
    | MsgIsRevolutionaryRepublic { scriptMessageYn :: Bool }
    | MsgHasRevolutionInProvince { scriptMessageYn :: Bool }
    | MsgRevolutionTargetExists { scriptMessageYn :: Bool }
    | MsgIsCenterOfRevolution { scriptMessageYn :: Bool }
    | MsgRegionProvinceScope
    | MsgRegionProvinceScopeAll
    | MsgSetRevolutionProvince { scriptMessageYn :: Bool }
    | MsgGovernmentHasAttribute { scriptMessageWhat :: Text }
    | MsgReligiousModifier
    | MsgIsEnemy { scriptMessageWho :: Text }
    | MsgHasSpyNetworkFrom { scriptMessageIcon :: Text, scriptMessageWho :: Text, scriptMessageAmt :: Double }
    | MsgHasSpyNetworkIn { scriptMessageIcon :: Text, scriptMessageWho :: Text, scriptMessageAmt :: Double }
    | MsgDefineGeneral { scriptMessageIcon :: Text }
    | MsgDefineHeirToGeneral { scriptMessageIcon :: Text }
    | MsgDefineRulerToGeneral { scriptMessageIcon :: Text }
    | MsgDefineConquistador { scriptMessageIcon :: Text }
    | MsgDefineAdmiral { scriptMessageIcon :: Text }
    | MsgDefineExplorer { scriptMessageIcon :: Text }
    | MsgMilitaryLeaderTrait { scriptMessageWhat :: Text }
    | MsgTypeAll
    | MsgSetSavedName { scriptMessageVar :: Text, scriptMessageType :: Text, scriptMessageFemale :: Bool }
    | MsgSetSavedNameScope { scriptMessageVar :: Text, scriptMessageType :: Text, scriptMessageScope :: Text, scriptMessageFemale :: Bool }
    | MsgClearSavedName { scriptMessageVar :: Text }
    | MsgProvinceTradePower {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgHasPermanentClaim { scriptMessageWhat :: Text }
    | MsgIsPermanentClaim { scriptMessageWhom :: Text }
    | MsgIsHegemonOfType { scriptMessageType :: Text }
    | MsgIsSubjectOfType { scriptMessageType :: Text }
    | MsgHasRuler { scriptMessageWho :: Text }
    | MsgHasCasusBelli { scriptMessageWhat :: Text, scriptMessageWho :: Text }
    | MsgHeirADM { scriptMessageIcon :: Text, scriptMessageAmt :: Double }
    | MsgHeirDIP { scriptMessageIcon :: Text, scriptMessageAmt :: Double }
    | MsgHeirMIL { scriptMessageIcon :: Text, scriptMessageAmt :: Double }
    | MsgConsortADM { scriptMessageIcon :: Text, scriptMessageAmt :: Double }
    | MsgConsortDIP { scriptMessageIcon :: Text, scriptMessageAmt :: Double }
    | MsgConsortMIL { scriptMessageIcon :: Text, scriptMessageAmt :: Double }
    | MsgLandLeaderFire {scriptMessageIcon :: Text, scriptMessageAmt :: Double, scriptMessageAddToBase :: Bool}
    | MsgLandLeaderShock {scriptMessageIcon :: Text, scriptMessageAmt :: Double, scriptMessageAddToBase :: Bool}
    | MsgLandLeaderManeuver {scriptMessageIcon :: Text, scriptMessageAmt :: Double, scriptMessageAddToBase :: Bool}
    | MsgLandLeaderSiege {scriptMessageIcon :: Text, scriptMessageAmt :: Double, scriptMessageAddToBase :: Bool}
    | MsgNavalLeaderFire {scriptMessageIcon :: Text, scriptMessageAmt :: Double, scriptMessageAddToBase :: Bool}
    | MsgNavalLeaderShock {scriptMessageIcon :: Text, scriptMessageAmt :: Double, scriptMessageAddToBase :: Bool}
    | MsgNavalLeaderManeuver {scriptMessageIcon :: Text, scriptMessageAmt :: Double, scriptMessageAddToBase :: Bool}
    | MsgNavalLeaderSiege {scriptMessageIcon :: Text, scriptMessageAmt :: Double, scriptMessageAddToBase :: Bool}
    | MsgCountryOrNonSovereignSubjectHolds {scriptMessageWhom :: Text}
    | MsgCountryOrSubjectHolds {scriptMessageWhom :: Text}
    | MsgGlobalSailorsModifier {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgMinAutonomyInTerritories {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgMapSetupRandom
    | MsgValidForPU {scriptMessageYn :: Bool}
    | MsgIsGreatPower {scriptMessageYn :: Bool}
    | MsgTradeShare {scriptMessageIcon :: Text, scriptMessageWhom :: Text, scriptMessageAmt :: Double}
    | MsgProviceHasCenterOfTrade {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgPrivateerPower {scriptMessageAmt :: Double}
    | MsgPrivateerPowerCountry {scriptMessageWhom :: Text, scriptMessageAmt :: Double}
    | MsgPrivateerShare {scriptMessageIcon :: Text, scriptMessageWhom :: Text, scriptMessageAmt :: Double}
    | MsgDevastation {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgHasEstatePrivilege {scriptMessageWhat :: Text}
    | MsgOwnsOrNonTribSubject {scriptMessageWhat :: Text}
    | MsgHasConsortRegency {scriptMessageYn :: Bool}
    | MsgIsOwnedByTradeCompany {scriptMessageYn :: Bool}
    | MsgWasTag {scriptMessageWhom :: Text}
    | MsgArmySize {scriptMessageAmt :: Double}
    | MsgArmySizeMatches { scriptMessageWhom :: Text}
    | MsgNavySize {scriptMessageAmt :: Double}
    | MsgNavySizeMatches {scriptMessageWhom :: Text}
    | MsgHasClimate {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgTradingBonus {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgNumSubjects {scriptMessageAmt :: Double}
    | MsgApplyEstateModifer {scriptMessageWhat :: Text}
    | MsgRemoveEstateModifer {scriptMessageWhat :: Text}
    | MsgReapplyEstatePrivilege {scriptMessageWhat :: Text}
    | MsgLeaderTradition {scriptMessageNaval :: Bool, scriptMessageAmt :: Double}
    | MsgTradeCompanySize {scriptMessageAmt :: Double}
    | MsgNumFreeBuildingSlots {scriptMessageAmt :: Double}
    | MsgCanBuild {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgCanHaveCenterOfReformation
    | MsgCreateColony {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgNumInvestmentsInTradeCompanyReigion {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgHasTradeCompanyInvestmentInArea {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageWho :: Text}
    | MsgHasPrivateers { scriptMessageYn :: Bool }
    | MsgEveryTradeNodeMemberCountry
    | MsgRandomTradeNodeMemberProvince
    | MsgIsWasteland { scriptMessageYn :: Bool }
    | MsgHasRiverEstuary
    | MsgTradingPolicyInNode { scriptMessageNode :: Text, scriptMessagePolicy :: Text }
    | MsgTradingPolicyInNodeAny { scriptMessageNode :: Text }
    | MsgInstitutionDifference { scriptMessageIcon :: Text, scriptMessageWho :: Text, scriptMessageAmt :: Double }
    | MsgEmbargoedBy { scriptMessageWho :: Text }
    | MsgRandomAdvisor { scriptMessageIcon :: Text, scriptMessageText :: Text, scriptMessageYn :: Bool }
    | MsgRandomAdvisorSkill { scriptMessageAmt :: Double }
    | MsgRandomAdvisorScaledSkill
    | MsgRandomAdvisorNonState { scriptMessageIcon :: Text, scriptMessageText :: Text }
    | MsgConvertFemaleRulerGeneral { scriptMessageAmt :: Double }
    | MsgConvertHeirGeneral { scriptMessageYn :: Bool, scriptMessageAmt :: Double }
    | MsgHeirRemoved
    | MsgIsHeirLeader { scriptMessageYn :: Bool }
    | MsgAtWarWithReligiousEnemy { scriptMessageYn :: Bool }
    | MsgHasAdvisorCategory { scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageYn :: Bool }
    | MsgHasAdvisorCategoryLevel { scriptMessageAmt :: Double, scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageYn :: Bool }
    | MsgAnyCountryActiveInNode
    | MsgTradeNodeIsInTCRegion { scriptMessageYn :: Bool }
    | MsgHasEmptyAdjProvince { scriptMessageYn :: Bool }
    | MsgAnyTradeNodeCountry
    | MsgIsInDeficit { scriptMessageYn :: Bool }
    | MsgIsReligiousCenterProvince { scriptMessageYn :: Bool }
    | MsgNumCavalry {scriptMessageAmt :: Double}
    | MsgNumCavalryThan {scriptMessageWhom :: Text}
    | MsgNumInfantry {scriptMessageAmt :: Double}
    | MsgNumInfantryThan {scriptMessageWhom :: Text}
    | MsgNumArtillery {scriptMessageAmt :: Double}
    | MsgNumArtilleryThan {scriptMessageWhom :: Text}
    | MsgAdoptReformProgress {scriptMessageWhom :: Text}
    | MsgCuriaTreasurySize {scriptMessageAmt :: Double}
    | MsgCuriaTreasuryIncome {scriptMessageAmt :: Double}
    | MsgChangeInnovativeness {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgIsCouncilEnabled {scriptMessageYn :: Bool}
    | MsgCouncilPosition {scriptMessageWhat :: Text}
    | MsgAllConcesssionsTaken {scriptMessageYn :: Bool}
    | MsgIsDotfTier {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgHRESize {scriptMessageAmt :: Double}
    | MsgHREExists
    | MsgInLeague {scriptMessageWhat :: Text}
    | MsgNumOwnInstitutionProvinces {scriptMessageAmt :: Double}
    | MsgIsLeagueLeader {scriptMessageYn :: Bool}
    | MsgGainScaledImperialAuthority {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgHasWinter {scriptMessageWhat :: Text}
    | MsgHasLeader {scriptMessageWhom :: Text}
    | MsgIsIsland {scriptMessageYn :: Bool}
    | MsgIsBlockaded {scriptMessageYn :: Bool}
    | MsgKillLeaderType {scriptMessageIcon :: Text, scriptMessageText :: Text}
    | MsgKillLeaderRandom {scriptMessageIcon :: Text}
    | MsgKillLeaderNamed {scriptMessageIcon :: Text, scriptMessageText :: Text}
    | MsgAddEstateLoyaltyModifier {scriptMessageIcon :: Text, scriptMessageWho :: Text, scriptMessageWhat :: Text, scriptMessageDays :: Double, scriptMessageAmt :: Double}
    | MsgExportVariable { scriptMessageVar1 :: Text, scriptMessageVar2 :: Text}
    | MsgExportVariableWho { scriptMessageVar1 :: Text, scriptMessageVar2 :: Text, scriptMessageWhom :: Text}
    | MsgCanBeOverlord {scriptMessageType :: Text}
    | MsgTrust {scriptMessageIcon :: Text, scriptMessageWhom :: Text, scriptMessageAmt :: Double}
    | MsgTechDifference {scriptMessageAmt :: Double}
    | MsgAiAttitude {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageWhom :: Text, scriptMessageYn :: Bool}
    | MsgAllAllies
    | MsgAllElectors
    | MsgAllKnownCountries
    | MsgDevelopmentInProvinces {scriptMessageAmt :: Double}
    | MsgEstateLandShareEffect {scriptMessageAmt :: Double, scriptMessageIcon :: Text, scriptMessageWhom :: Text}
    | MsgEstateLandShareEffectAll {scriptMessageAmt :: Double}
    | MsgIsInTradeLeagueWith {scriptMessageWhom :: Text}
    | MsgIsTradeLeagueLeader {scriptMessageYn :: Bool}
    | MsgInstitutionEnabled {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgCenterOfTrade {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgArmyStrength {scriptMessageIcon :: Text, scriptMessageWhom :: Text, scriptMessageAmt :: Double}
    | MsgNavalStrength {scriptMessageIcon :: Text, scriptMessageWhom :: Text, scriptMessageAmt :: Double}
    | MsgRemoveBuilding {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgHigherDevelopmentThan {scriptMessageWhat :: Text}
    | MsgCrownlandShare {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgCrownlandShareThan {scriptMessageIcon :: Text, scriptMessageIcon2 :: Text, scriptMessageWhom :: Text}
    | MsgNumEstateAgendas {scriptMessageIcon :: Text, scriptMessageWhom :: Text, scriptMessageAmt :: Double}
    | MsgNumEstatePrivileges {scriptMessageIcon :: Text, scriptMessageWhom :: Text, scriptMessageAmt :: Double}
    | MsgAnyProvinceInState
    | MsgRandomOwnedArea
    | MsgAreaOfProvince
    | MsgAreaOfProvinceAll
    | MsgAnyArmy
    | MsgAllTradeNodes
    | MsgAllRivalCountries
    | MsgAllTradeNodeProvince
    | MsgHomeTradeNode
    | MsgHomeTradeNodeEffectScope
    | MsgRemoveAdvisor {scriptMessageType :: Text}
    | MsgLandForcelimit {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgLandForcelimitAs {scriptMessageIcon :: Text, scriptMessageWhom :: Text}
    | MsgMonthlyReformProgressModifier {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgSupplyLimitModifier {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgHasGlobalModifierValue {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgHasAnyGreatProject
    | MsgHasAnyGreatProjectTier {scriptMessageAmt :: Double }
    | MsgHasAnyMonument
    | MsgHasAnyMonumentTier {scriptMessageAmt :: Double }
    | MsgHasGreatProject {scriptMessageWhat :: Text}
    | MsgHasGreatProjectTier {scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgSetGreatProjectTier {scriptMessageAmt :: Double, scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgEstateRegency
    | MsgEstateRegencyDuration {scriptMessageAmt :: Double}
    | MsgEstateRegencySpecific {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgEstateRegencySpecificDur {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgHasAnyManufactory {scriptMessageYn :: Bool}
    | MsgHighestValueTradeNode
    | MsgHasNumVassals {scriptMessageAmt :: Double}
    | MsgGuaranteedBy {scriptMessageWhom :: Text}
    | MsgHasGuaranteed {scriptMessageWhom :: Text}
    | MsgVassalize {scriptMessageWhom :: Text}
    | MsgMissionCompleted {scriptMessageWhat :: Text}
    | MsgCompleteMission {scriptMessageWhat :: Text}
    | MsgHasMission {scriptMessageWhat :: Text}
    | MsgHasNumberOfBuildingType {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgFederationSize {scriptMessageAmt :: Double}
    | MsgGrownByDevelopment {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGrownByStates {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgNumAdmirals {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgNumAdmiralsWithTrait {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgNumGenerals {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgNumGeneralsWithTrait {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgShareOfStartingIncome {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgNumNonTribSubjects {scriptMessageAmt :: Double}
    | MsgChangeGovernmentReformProgress {scriptMessageAmt :: Double}
    | MsgTradeGoodsProduced {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgProvinceSameReligion {scriptMessageWhom :: Text}
    | MsgProvinceReligion {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgGrantEstatePrivilege {scriptMessageWhat :: Text}
    | MsgRemoveEstatePrivilege {scriptMessageWhat :: Text}
    | MsgNumTrustedAllies {scriptMessageAmt :: Double}
    | MsgIsFederationLeader {scriptMessageYn :: Bool}
    | MsgAverageUnrest {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgHasPillagedCapitalAgainst {scriptMessageWhom :: Text}
    | MsgIsIroquois {scriptMessageYn :: Bool}
    | MsgMilitaryStrength { scriptMessageIcon :: Text, scriptMessageWho :: Text, scriptMessageAmt :: Double }
    | MsgNumUnitsInProvince {scriptMessageIcon :: Text, scriptMessageWhom :: Text, scriptMessageAmt :: Double}
    | MsgNativeSize {scriptMessageAmt :: Double}
    | MsgChangeNativeSize {scriptMessageAmt :: Double}
    | MsgNumTributaryStates {scriptMessageAmt :: Double}
    | MsgIsThreat {scriptMessageWhom :: Text}
    | MsgGrantIndependence
    | MsgIsVassal {scriptMessageYn :: Bool}
    | MsgIsPapalController {scriptMessageYn :: Bool}
    | MsgIsFederationNation {scriptMessageYn :: Bool}
    | MsgNumFederationAdvancements {scriptMessageAmt :: Double}
    | MsgEveryFederationMember
    | MsgAllFederationMembers
    | MsgHistoricalFriendWith {scriptMessageWhom :: Text}
    | MsgHistoricalRivalWith {scriptMessageWhom :: Text}
    | MsgAddHistoricalFriend {scriptMessageWhom :: Text}
    | MsgAddHistoricalRival {scriptMessageWhom :: Text}
    | MsgRemoveHistoricalFriend {scriptMessageWhom :: Text}
    | MsgRemoveHistoricalRival {scriptMessageWhom :: Text}
    | MsgHasAnyEstates {scriptMessageYn :: Bool}
    | MsgGovernmentReformProgress {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgHumiliatedBy {scriptMessageWhom :: Text}
    | MsgCreateGuarantee {scriptMessageWhom :: Text}
    | MsgCreateSubject {scriptMessageWhat :: Text, scriptMessageWhom :: Text, scriptMessageYn :: Bool}
    | MsgHeirClaim { scriptMessageIcon :: Text, scriptMessageAmt :: Double }
    | MsgExtendGoldenAge { scriptMessageAmt :: Double }
    | MsgExtendRegency { scriptMessageAmt :: Double }
    | MsgAddPowerProjection {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgRemoveCasusBelli {scriptMessageWhat :: Text, scriptMessageWhom :: Text}
    | MsgHasWonWarAgainst {scriptMessageIcon :: Text, scriptMessageWhom :: Text, scriptMessageAmt :: Double}
    | MsgChangePrice {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageName :: Text, scriptMessageAmt :: Double, scriptMessageDays :: Double }
    | MsgAnyHiredMercenaryCompany
    | MsgRandomHiredMercenaryCompany
    | MsgLocation
    | MsgHomeProvince
    | MsgCreateNamedShip {scriptMessageText :: Text, scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgCreateFlagShip {scriptMessageText :: Text, scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgTradingPart {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgGenerateTraitorAdvisor {scriptMessageSkill :: Double}
    | MsgGenerateExileAdvisor {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgOurScholarMatchesTheirSchool {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgHasScholar
    | MsgRulerHasIslamModifier {scriptMessageWhat :: Text, scriptMessageYn :: Bool}
    | MsgSchoolOpinion {scriptMessageIcon :: Text, scriptMessageWhom :: Text, scriptMessageAmt :: Double}
    | MsgSetSchoolOpinion {scriptMessageIcon :: Text, scriptMessageWhom :: Text, scriptMessageAmt :: Double}
    | MsgHasReligiousSchoolOf {scriptMessageWhom :: Text}
    | MsgHasBorderWithReligiousEnemy
    | MsgHasSunniSchool
    | MsgHasShiaSchool
    | MsgNewExiledRuler
    | MsgNewExiledRulerAttribs
    | MsgExiledAs {scriptMessageWhat :: Text}
    | MsgSetHeir {scriptMessageWhat :: Text}
    | MsgSetRuler {scriptMessageWhat :: Text}
    | MsgExileHeir {scriptMessageWhat :: Text}
    | MsgExileRuler {scriptMessageWhat :: Text}
    | MsgClearExiledRuler {scriptMessageWhat :: Text}
    | MsgExiledRulerSameDynastyAsCurrent {scriptMessageWhat :: Text}
    | MsgAddGreatProjectTier {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgWarscoreAgainst {scriptMessageIcon :: Text, scriptMessageWhom :: Text, scriptMessageAmt :: Double}
    | MsgVariableArithmeticTrigger
    | MsgHiddenTrigger
    | MsgBorderDistance {scriptMessageIcon :: Text, scriptMessageWhom :: Text, scriptMessageAmt :: Double}
    | MsgAddNamedUnrest {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgCheckEstateRevoltSize {scriptMessageYn :: Bool, scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgHasLeaderWith
    | MsgHasMonarchLeaderWith
    | MsgHasGeneralWith {scriptMessageIcon :: Text}
    | MsgHasAdmiralWith {scriptMessageIcon :: Text}
    | MsgTotalPips {scriptMessageAmt :: Double}
    | MsgAddLootFromRichProvince {scriptMessageIcon :: Text, scriptMessageWhom :: Text}
    | MsgSetAiAttitude {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageWhom :: Text, scriptMessageYn :: Bool}
    | MsgRegion
    | MsgAddDisasterProgress {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgYearsInUnionUnder {scriptMessageIcon :: Text, scriptMessageWhom :: Text, scriptMessageAmt :: Double}
    | MsgHasAnyHolyOrder
    | MsgHasHolyOrder {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgNativePolicy {scriptMessageWhat :: Text}
    | MsgCanEstablishHolyOrder {scriptMessageYn :: Bool}
    | MsgEndIncident {scriptMessageWhat :: Text}
    | MsgIsIncidentActive {scriptMessageWhat :: Text}
    | MsgHasIncidentHappened {scriptMessageWhat :: Text}
    | MsgIsIncidentPossible {scriptMessageWhat :: Text}
    | MsgSetPersonalDiety {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgHasPersonalDiety {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgNumAspects {scriptMessageAmt :: Double}
    | MsgInstitutionPresence {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgKnowsCountry {scriptMessageWhom :: Text}
    | MsgIsTerritory {scriptMessageYn :: Bool}
    | MsgIsStateCore {scriptMessageWhat :: Text}
    | MsgChurchPower {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgHasChurchAspect {scriptMessageWhat :: Text}
    | MsgCreateUnion {scriptMessageWhom :: Text}
    | MsgCreateVassal {scriptMessageWhom :: Text}
    | MsgCreateMarch {scriptMessageWhom :: Text}
    | MsgHighestSupplyLimitInArea
    | MsgStartEstateAgenda {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgPickRandomEstateIfPresent {scriptMessageIcon :: Text, scriptMessageWhom :: Text, scriptMessageWhat :: Text}
    | MsgHasAnyActiveEstateAgenda {scriptMessageYn :: Bool}
    | MsgClearEstateAgendaCache {scriptMessageWhom :: Text}
    | MsgNativeFerocity {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgNativeAggressiveness {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgChangeNativeFerocity {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgChangeNativeAggressiveness {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgExpulsionTarget {scriptMessageWhat :: Text}
    | MsgHasSupportLoyalists {scriptMessageYn :: Bool}
    | MsgHasSubsidizeArmies {scriptMessageYn :: Bool}
    | MsgHasNewDynasty {scriptMessageYn :: Bool}
    | MsgHasSendOfficers {scriptMessageYn :: Bool}
    | MsgHasEmbargoRivals {scriptMessageYn :: Bool}
    | MsgHasDivertTrade {scriptMessageYn :: Bool}
    | MsgHasScutage {scriptMessageYn :: Bool}
    | MsgIsMarch {scriptMessageYn :: Bool}
    | MsgIsSubjectOtherThanTributary
    | MsgSpawnScaledRebels {scriptMessageRtype :: Text, scriptMessageLeader :: Text, scriptMessageYn :: Bool}
    | MsgCreateIndependentEstate {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageMaybeGovernment :: Maybe Text, scriptMessageMaybeGovernmentReform :: Maybe Text, scriptMessageMaybeCustomNationalIdeas :: Maybe Text, scriptMessageYn :: Bool}
    | MsgHasLeaders {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageDesc :: Text, scriptMessageAmt :: Double}
    | MsgScaledEstateLandShareEffect {scriptMessageYn :: Bool, scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgProvinceDistance {scriptMessageIcon :: Text, scriptMessageWhom :: Text, scriptMessageAmt :: Double}
    | MsgNumOfReligionSecondary {scriptMessageAmt :: Double}
    | MsgCreateSuccessionCrisis {scriptMessageAttacker :: Text, scriptMessageDefender :: Text, scriptMessageWhom :: Text}
    | MsgDefinerLeaderToRuler
    | MsgChangeSubjectType {scriptMessageIcon :: Text, scriptMessageType :: Text}
    | MsgRemoveTradeModifier {scriptMessageWhat :: Text, scriptMessageWhom :: Text}
    | MsgHasTradeCompanyInvestmentInState {scriptMessageWhom :: Text}
    | MsgRandomListTrigger
    | MsgRandomListModifier {scriptMessageAmt :: Double}
    | MsgOwnOrNonTribSubjectDevelopment {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgOwnOrNonTribSubjectDevelopmentAs {scriptMessageIcon :: Text, scriptMessageWhom :: Text}
    | MsgHasOneOfBuildings {scriptMessageYn :: Bool, scriptMessageWhat :: Text}
    | MsgNumBuildings {scriptMessageAmt :: Double}
    | MsgTradeCompanyRegion {scriptMessageWhat :: Text}
    | MsgPreferredEmperor {scriptMessageWhom :: Text}
    | MsgCurrentIcon {scriptMessageIcon :: Text, scriptMessageWhom :: Text}
    | MsgPatriarchAuthority {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgIsRevolutionTarget {scriptMessageYn :: Bool}
    | MsgRevolutionaryZeal {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgSameGovtAsRoot
    | MsgOverrideCountryName {scriptMessageWhat :: Text}
    | MsgEyaletEffect {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgFervor {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgHasFlagship {scriptMessageYn :: Bool}
    | MsgIsCapitalOf {scriptMessageWhom :: Text}
    | MsgIsProductionLeader {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgInnovativeness {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgStartHREIncident {scriptMessageWhat :: Text}
    | MsgIsForeignCompany {scriptMessageYn :: Bool}
    | MsgHasStatePatriach {scriptMessageYn :: Bool}
    | MsgHasForeignConsort {scriptMessageYn :: Bool}
    | MsgSwapFreeIdeaGroup
    | MsgAverageAutonomy {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgAverageAutonomyAboveMin {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgAverageHomeAutonomy {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgPowerProjection {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgElector {scriptMessageYn :: Bool}
    | MsgNumOfWarReparations {scriptMessageAmt :: Double}
    | MsgNumOfHiredMercCompanies {scriptMessageAmt :: Double}
    | MsgNumOfForeignHREProvinces {scriptMessageAmt :: Double}
    | MsgNumOfStates {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgNumOfExplorers {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgNumOfConquistadors {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgMonthlyADM {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgMonthlyDIP {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgMonthlyMIL {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgAnyActiveImperialIncident
    | MsgMaxSailors {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgInGoldenAge {scriptMessageYn :: Bool}
    | MsgHasHadGoldenAge {scriptMessageYn :: Bool}
    | MsgHasTrader {scriptMessageWhom :: Text}
    | MsgArtilleryFraction {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgCavalryFraction {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgInfantryFraction {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgGalleyFraction {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgHeavyShipFraction {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgLightShipFraction {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgProsperity {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgIsProsperous {scriptMessageYn :: Bool}
    | MsgNumElectors {scriptMessageAmt :: Double}
    | MsgHarmony {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgTradeEmbargoing {scriptMessageWhom :: Text}
    | MsgTotalBaseTax {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgSuccessionClaim {scriptMessageWhom :: Text}
    | MsgHegemonStrength {scriptMessageAmt :: Double}
    | MsgHasActiveFervor {scriptMessageYn :: Bool}
    | MsgNumCentersOfTrade {scriptMessageAmt :: Double}
    | MsgNumDiplomaticRelations {scriptMessageAmt :: Double}
    | MsgNumHarmonized {scriptMessageAmt :: Double}
    | MsgNumTimesExpandedInfrastructure {scriptMessageAmt :: Double}
    | MsgNumTimesImproved {scriptMessageAmt :: Double}
    | MsgNumTimesImprovedByOwner {scriptMessageAmt :: Double}
    | MsgIsHarmonizingWith {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgIsHarmonizingWithProvince {scriptMessageWhat :: Text}
    | MsgHasHarmonizedWith {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgNumTimesUsedTransferDevelopment {scriptMessageAmt :: Double}
    | MsgProvinceHasCurrentTechFort {scriptMessageYn :: Bool}
    | MsgHasMostProvinceTradePower {scriptMessageWhom :: Text}
    | MsgAddProvinceTriggeredModifier {scriptMessageWhat :: Text}
    | MsgHasInfluencingFort {scriptMessageYn :: Bool}
    | MsgIsInCoalition {scriptMessageYn :: Bool}
    | MsgChangeController {scriptMessageWhom :: Text}
    | MsgIsExcommunicated {scriptMessageYn :: Bool}
    | MsgExcommunicate {scriptMessageWhom :: Text}
    | MsgChangeConsortSameCulture {scriptMessageWhom :: Text}
    | MsgChangeConsortCulture {scriptMessageWhat :: Text}
    | MsgChangeHeirSameCulture {scriptMessageWhom :: Text}
    | MsgChangeHeirCulture {scriptMessageWhat :: Text}
    | MsgChangeRulerSameCulture {scriptMessageWhom :: Text}
    | MsgChangeRulerCulture {scriptMessageWhat :: Text}
    | MsgConsortCultureIs {scriptMessageWhat :: Text}
    | MsgConsortCultureIsSame {scriptMessageWhom :: Text}
    | MsgHeirCultureIs {scriptMessageWhat :: Text}
    | MsgHeirCultureIsSame {scriptMessageWhom :: Text}
    | MsgHasFemaleConsort {scriptMessageYn :: Bool}
    | MsgConsortAge {scriptMessageAmt :: Double}
    | MsgIsOriginOfConsort {scriptMessageWhat :: Text}
    | MsgRemoveConsort
    | MsgClearRebels
    | MsgMonthsSinceDefection {scriptMessageAmt :: Double}
    | MsgJanissaryPercentage {scriptMessageAmt :: Double}
    | MsgBreakUnion {scriptMessageWhom :: Text}
    | MsgCreateMarriage {scriptMessageWhom :: Text}
    | MsgAddTradeNodeIcome {scriptMessageAmt :: Double}
    | MsgYearlyCorruptionIncrease {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgWasNeverGermanReigionalTag
    | MsgReformLevel {scriptMessageAmt :: Double}
    | MsgIsSupportingIndependenceOf {scriptMessageWhom :: Text}
    | MsgFormCoalitionAgainst {scriptMessageWhom :: Text}
    | MsgProvincesOnCapitalContinentOf {scriptMessageWhom :: Text}
    | MsgExpellingMinorities {scriptMessageYn :: Bool}
    | MsgHasOrBuildingFlagship {scriptMessageYn :: Bool}
    | MsgRecentTreasureShipPassage {scriptMessageYn :: Bool}
    | MsgNewEstateRegency {scriptMessageIcon :: Text, scriptMessageWho :: Text}
    | MsgEstateLedRegencyInfluence {scriptMessageAmt :: Double}
    | MsgEstateLedRegencyLoyalty {scriptMessageAmt :: Double}
    | MsgSetEstateLedRegencyPrivilegeRandom
    | MsgTradeNode {scriptMessageWhat :: Text}
    | MsgColonyMissionReward {scriptMessageProv :: Text}
    | MsgAddSiberianConstruction {scriptMessageAmt :: Double}
    | MsgNumUnlockedCults {scriptMessageAmt :: Double}
    | MsgHasPrimaryCult {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgChangeCult {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgSelectPrimaryCult {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgChangePrimaryCult {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgUnlockEstatePrivilege {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgHasUnlockedEstatePrivilege {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgUnlockGovernmentReform {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgKillUnits {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageWho :: Text, scriptMessageAmt :: Double}
    | MsgConstructBuilding {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageSpeed :: Double, scriptMessageCost :: Double}
    | MsgAllowBaselineInviteScholar {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgRemoveLoot {scriptMessageIcon :: Text, scriptMessageWho :: Text, scriptMessageAmt :: Double}
    | MsgSwitchTag {scriptMessageWho :: Text}
    | MsgPowerCost {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgUnlockMercCompany {scriptMessageWhat :: Text, scriptMessageFree :: Bool, scriptMessageGlobal :: Bool}
    | MsgDisableRebelsFromSeizeLand {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgNumRulerTraits {scriptMessageAmt :: Double}
    | MsgNumAcceptedCulturesTrigger {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgYearsOfTradeIncome {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgAddFavors {scriptMessageIcon :: Text, scriptMessageWho :: Text, scriptMessageAmt :: Double}
    | MsgSubsidisedPercentAmount {scriptMessageAmt :: Double }
    | MsgIsOrWasTag {scriptMessageWhom :: Text}
    | MsgGreatPowerRank {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgIsAbsolutismActive {scriptMessageYn :: Bool}
    | MsgNumOfProvincesInStates {scriptMessageAmt :: Double }
    | MsgForceConverted {scriptMessageWhom :: Text}
    | MsgAddYearsOfOwnedProvinceIncome {scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgTotalStats {scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgPreviousOwner {scriptMessageWhom :: Text}
    | MsgAddLatestBuilding {scriptMessageWhat :: Text}
    | MsgHasPointsForLivonianMonarchy {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgIsRentingCondottieriTo {scriptMessageWhom :: Text}
    | MsgHasCompletedIdeaGroupOfCategory {scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgHasActiveIdeaGroupOfCategory {scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgJoinLeague {scriptMessageWhat :: Text}
    | MsgMercTemplate {scriptMessageWhat :: Text}
    | MsgHiredForMonths {scriptMessageAmt :: Double }
    | MsgHasStateEdict {scriptMessageWhat :: Text}
    | MsgOwesFavors {scriptMessageIcon :: Text, scriptMessageWhom :: Text, scriptMessageAmt :: Double}
    | MsgCanSwapOutEstateGrantingReform {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgHasPasha {scriptMessageYn :: Bool}
    | MsgUses {scriptMessageWhat :: Text, scriptMessageYn :: Bool }
    | MsgUsesIcon {scriptMessageIcon :: Text, scriptMessageWhat :: Text, scriptMessageYn :: Bool }
    | MsgAddGovernmentPower {scriptMessageType :: Text, scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgSetGovernmentPower {scriptMessageType :: Text, scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgFreezeGovernmentPower {scriptMessageType :: Text, scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgUnfreezeGovernmentPower {scriptMessageType :: Text, scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgHasGovernmentPower {scriptMessageType :: Text, scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgIsGovernmentPowerFrozen {scriptMessageType :: Text, scriptMessageWhat :: Text, scriptMessageAmt :: Double}
    | MsgHasGovernmentMechanic {scriptMessageWhat :: Text }
    | MsgStartDebate {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgAddInflationScaledToTrade {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgNationalFocus {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgIsNeighborOfProvince {scriptMessageWhat :: Text}
    | MsgActiveDecree { scriptMessageWhat :: Text }
    | MsgEocReform { scriptMessageWhat :: Text }
    | MsgIsLackingInstitutions {scriptMessageYn :: Bool}
    | MsgHasNavalDoctrine { scriptMessageWhat :: Text }
    | MsgGivesMilitaryAccess {scriptMessageWhom :: Text}
    | MsgReceivesMilitaryAccess {scriptMessageWhom :: Text}
    | MsgGivesFleetBasingRights {scriptMessageWhom :: Text}
    | MsgReceivesFleetBasingRights {scriptMessageWhom :: Text}
    | MsgTradeValueInNode {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgSetEmperorOfChina {scriptMessageWhom :: Text}
    | MsgSetBT {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgSetBP {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgSetBM {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgSameTradeNodeAs {scriptMessageWhat :: Text}
    | MsgAddRival {scriptMessageWhom :: Text}
    | MsgRemoveRival {scriptMessageWhom :: Text}
    | MsgForceRemoveRival {scriptMessageWhom :: Text}
    | MsgAddADMTech {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgAddDIPTech {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgAddMILTech {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgIsHegemon {scriptMessageYn :: Bool}
    | MsgDisableEstateAction {scriptMessageEstateAction :: Text, scriptMessageDecisionName :: Text, scriptMessageDecisionLoc :: Text, scriptMessagePrivilegeName :: Text, scriptMessagePrivilegeLoc :: Text}
    | MsgEnableEstateAction {scriptMessageEstateAction :: Text, scriptMessageDecisionName :: Text, scriptMessageDecisionLoc :: Text, scriptMessagePrivilegeName :: Text, scriptMessagePrivilegeLoc :: Text}
    | MsgHasEnabledEstateAction {scriptMessageEstateAction :: Text, scriptMessageDecisionName :: Text, scriptMessageDecisionLoc :: Text, scriptMessagePrivilegeName :: Text, scriptMessagePrivilegeLoc :: Text}
    | MsgEstateActionCoolDown {scriptMessageEstateAction :: Text, scriptMessageAmt :: Double}
    | MsgHasEstateAgenda {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgAutoCompleteEstateAgenda {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgEstateActionMonarchPower {scriptMessageText :: Text, scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgEstateActionTradition {scriptMessageIcon :: Text, scriptMessageWhom :: Text, scriptMessageWhat :: Text}
    | MsgCreateScalingLeader {scriptMessageWhat :: Text, scriptMessageIcon :: Text, scriptMessageWhom :: Text}
    | MsgUnlockParliamentIssue {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgHasParliamentIssueUnlocked {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgHasNotEnactedParliamentAction {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgTooltip {scriptMessageWhat :: Text}
    | MsgAddRandomDev {scriptMessageIcon :: Text, scriptMessageAmt :: Double}
    | MsgFor {scriptMessageAmt :: Double}
    | MsgDisableTradingPolicy {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgEnableTradingPolicy {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgHasAiPersonality {scriptMessageIcon :: Text, scriptMessageWhat :: Text}
    | MsgSetDynasty {scriptMessageWhat :: Text}
    | MsgSetDynastySameAs {scriptMessageWhom :: Text}
    | MsgJoinAllDefensiveWarsOf {scriptMessageWhom :: Text}
    | MsgSetDefenderOfTheFaithAsReligion {scriptMessageWhat :: Text, scriptMessageWhom :: Text}
    | MsgSetDefenderOfTheFaith {scriptMessageWhat :: Text, scriptMessageWhom :: Text}
    | MsgIronman {scriptMessageYn :: Bool}
    | MsgIsAheadOfTimeInTechnology {scriptMessageWhat :: Text}
    | MsgDistributeDevelopment {scriptMessageWhat :: Text, scriptMessageAmt :: Double, scriptMessageMaybeLimt :: Maybe Text}
    | MsgNumBattles {scriptMessageAmt :: Double}
    | MsgNumWars {scriptMessageAmt :: Double}
-- | Whether to default to English localization.
useEnglish :: [Text] -> Bool
useEnglish [] = True
useEnglish ("en":_) = True
useEnglish _ = False

instance RenderMessage Script ScriptMessage where
    renderMessage _ (useEnglish -> True) msg = case msg of
        MsgUnprocessed {scriptMessageMsg = _msg}
            -> _msg
        MsgYes {scriptMessageIcon = _icon}
            -> mconcat
                [ _icon
                , " Yes"
                ]
        MsgNo {scriptMessageIcon = _icon}
            -> mconcat
                [ _icon
                , " No"
                ]
        MsgAddCardinal
            -> "Gain a veridical"
        MsgHeirDies {scriptMessageYn = _yn}
            -> mconcat
                [ "Heir dies"
                , ifThenElseT _yn "" "<!-- allow_new_heir=no -->"
                ]
        MsgRulerDies
            -> "Ruler dies"
        MsgLoseCardinal
            -> "Lose a veridical"
        MsgIsJanissaryMod
            -> "This modifier only applies to janissary regiments"
        MsgIsRajputMod
            -> "This modifier only applies to rajput regiments"
        MsgIsImperialMod
            -> "This modifier only applies to members of the EoA"
        MsgGainADM {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , " administrative power"
                ]
        MsgGainAT {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , " army tradition"
                ]
        MsgGainATorMil {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , " army tradition. All the excess army tradition will be converted into {{icon|mil}} 3 military power per 1 army tradition."
                ]
        MsgGainAuth {scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , toMessage (colourNum True _amt)
                , " authority"
                ]
        MsgGainBT {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , " base tax"
                ]
        MsgGainBP {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , " base production"
                ]
        MsgGainBM {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , " base manpower"
                ]
        MsgGainDIP {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , " diplomatic power"
                ]
        MsgGainDoom {scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , toMessage (colourNum False _amt)
                , " doom"
                ]
        MsgHeirGainClaim {scriptMessageAmt = _amt}
            -> mconcat
                [ "Heir "
                , gainsOrLoses _amt
                , " "
                , toMessage (colourNum True _amt)
                , " claim strength"
                ]
        MsgGainDevotion {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , " devotion"
                ]
        MsgGainHordeUnity {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , " horde unity"
                ]
        MsgGainImperialAuthority {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , " imperial authority"
                ]
        MsgGainKarma {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , " {{DLC-only|karma}}"
                ]
        MsgGainLegitimacy {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , " legitimacy"
                ]
        MsgGainMIL {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , " military power"
                ]
        MsgGainNavyTradition {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , " navy tradition"
                ]
        MsgGainPapalInfluence {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , " rectorate influence"
                ]
        MsgGainPrestige {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , " prestige"
                ]
        MsgAddPrestigeOrMonarchPower {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , " prestige. Each excess prestige will be converted into one of each type of monarch power."
                ]
        MsgGainRepTrad {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , " republican tradition"
                ]
        MsgGainRevolutionaryZeal {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , " {{DLC-only|revolutionary zeal}}"
                ]
        MsgGainStability {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , " stability"
                ]
        MsgGainWarExhaustion {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum False _amt)
                , " war exhaustion"
                ]
        MsgGainYearlyManpower {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , plural _amt " year's" " years'"
                , " worth of manpower"
                ]
        MsgGainADMSkill {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Ruler "
                , gainsOrLoses _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , " administrative skill"
                ]
        MsgGainDIPSkill {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Ruler "
                , gainsOrLoses _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , " diplomatic skill"
                ]
        MsgGainMILSkill {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Ruler "
                , gainsOrLoses _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , " military skill"
                ]
        MsgGainStatOrMonarchPower {scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ "Ruler "
                , gainsOrLoses _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , " "
                , _what
                , " skill. Excess points over '''6''' will be converted into {{green|+100}} "
                , _what
                , " power."
                ]
        MsgHeirGainStatOrMonarchPower {scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ "Heir "
                , gainsOrLoses _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , " "
                , _what
                , " skill. Excess points over '''6''' will be converted into {{green|+100}} "
                , _what
                , " power."
                ]
        MsgGainHeirADMSkill {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Heir "
                , gainsOrLoses _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , " administrative skill"
                ]
        MsgGainHeirDIPSkill {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Heir "
                , gainsOrLoses _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , " diplomatic skill"
                ]
        MsgGainHeirMILSkill {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Heir "
                , gainsOrLoses _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , " military skill"
                ]
        MsgGainSiegeProgress {scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , toMessage (colourNum True _amt)
                , " siege progress"
                ]
        MsgGainPatAuth {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (reducedNum (colourPc True) _amt)
                , " Patriarch authority"
                ]
        MsgGainMysticism {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Gain "
                , _icon
                , " '''"
                , toMessage (reducedNum plainNum (negate _amt))
                , "''' Mysticism"
                ]
        MsgGainLegalism {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (reducedNum plainNum _amt)
                , ifThenElseT (_amt < 0) " Mysticism" " Legalism"
                ]
        MsgStrengthenStatists {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Strengthen "
                , _icon
                , " Statists by '''"
                , toMessage (reducedNum plainPc (negate _amt))
                , "'''"
                ]
        MsgStrengthenOrangists {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Strengthen "
                , _icon
                , " Monarchists by '''"
                , toMessage (reducedNum plainPc _amt)
                , "'''"
                ]
        MsgGainInflation {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourPc False _amt)
                , " inflation"
                ]
        MsgGainLocalAutonomy {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourPc False _amt)
                , " local autonomy"
                ]
        MsgReformDesire {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "{{icon|catholic}} Catholicism has at least "
                , _icon
                , " "
                , toMessage (reducedNum plainPc _amt)
                , " reform desire"
                ]
        MsgGainReformDesire {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "{{icon|catholic}} Catholicism "
                , gainsOrLoses _amt
                , " "
                , _icon
                , " "
                , toMessage (reducedNum (colourPc False) _amt)
                , " reform desire"
                ]
        MsgGainMercantilism {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourPc True _amt)
                , " mercantilism"
                ]
        MsgGainMercantilismOrMonarchPower {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourPc True _amt)
                , " mercantilism. All the excess mercantilism will be converted into 50 monarch power of each category."
                ]
        MsgGainMP {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , " manpower"
                ]
        MsgGainMPFrac {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " manpower equal to "
                , toMessage (reducedNum (colourPc True) _amt)
                , " of maximum"
                ]
        MsgSeparatism {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , _icon
                , " "
                , toMessage (roundNum _amt)
                , " "
                , plural _amt "year" "years"
                , " of separatism"
                ]
        MsgCountryMod
            -> "country modifier"
        MsgLibertyDesireMod
            -> "liberty desire modifier"
        MsgProvMod
            -> "province modifier"
        MsgProvTriggeredMod
            -> "triggered province modifier"
        MsgPermanentProvMod
            -> "permanent province modifier"
        MsgRulerMod
            -> "ruler modifier"
        MsgTradeMod
            -> "trade modifier"
        MsgAddMod {scriptMessageModid = _modid, scriptMessageName = _name, scriptMessageDays = _days}
            -> mconcat
                [ "Gain modifier "
                , toMessage (iquotes _name)
                , " <!-- "
                , _modid
                , " --> for "
                , toMessage $ formatDays _days
                ]
        MsgGainMod {scriptMessageModid = _modid, scriptMessageType = _type, scriptMessageName = _name}
            -> mconcat
                [ "Gain "
                , _type
                , " "
                , toMessage (iquotes _name)
                , ", <!-- "
                , _modid
                , " --> giving the following effects:"
                ]
        MsgGainModDur {scriptMessageModid = _modid, scriptMessageType = _type, scriptMessageName = _name, scriptMessageDays = _days}
            -> mconcat
                [ "Gain "
                , _type
                , " "
                , toMessage (iquotes _name)
                , " <!-- "
                , _modid
                , " --> for "
                , if (_days < 0)
                    then if _type == "ruler"
                        then "the duration of the current ruler's reign"
                        else "the rest of the game"
                    else toMessage $ formatDays _days
                , ", giving the following effects:"
                ]
        MsgGainModPow {scriptMessageModid = _modid, scriptMessageType = _type, scriptMessageName = _name, scriptMessagePow = _pow}
            -> mconcat
                [ "Gain "
                , _type
                , " "
                , toMessage (iquotes _name)
                , " <!-- "
                , _modid
                , " --> ("
                , toMessage (colourNumSign True _pow)
                , " Power"
                ]
        MsgGainModPowDur {scriptMessageModid = _modid, scriptMessageType = _type, scriptMessageName = _name, scriptMessagePow = _pow, scriptMessageDays = _days}
            -> mconcat
                [ "Gain "
                , _type
                , " "
                , toMessage (iquotes _name)
                , " <!-- "
                , _modid
                , " --> ("
                , toMessage (colourNumSign True _pow)
                , " Power) for "
                , toMessage (formatDays _days)
                ]
        MsgActorGainsMod {scriptMessageModid = _modid, scriptMessageWho = _who, scriptMessageType = _type, scriptMessageName = _name}
            -> mconcat
                [ _who
                , " gains "
                , _type
                , " "
                , toMessage (iquotes _name)
                , ", <!-- "
                , _modid
                , " --> giving the following effects:"
                ]
        MsgActorGainsModDur {scriptMessageModid = _modid, scriptMessageWho = _who, scriptMessageType = _type, scriptMessageName = _name, scriptMessageDays = _days}
            -> mconcat
                [ _who
                , " gains "
                , _type
                , " "
                , toMessage (iquotes _name)
                , " <!-- "
                , _modid
                , " --> for "
                , toMessage $ formatDays _days
                , ", giving the following effects:"
                ]
        MsgActorGainsModPow {scriptMessageModid = _modid, scriptMessageWho = _who, scriptMessageType = _type, scriptMessageName = _name, scriptMessagePow = _pow}
            -> mconcat
                [ _who
                , " gains "
                , _type
                , " "
                , toMessage (iquotes _name)
                , " <!-- "
                , _modid
                , " --> ("
                , toMessage (colourNumSign True _pow)
                , " Power"
                ]
        MsgActorGainsModPowDur {scriptMessageModid = _modid, scriptMessageWho = _who, scriptMessageType = _type, scriptMessageName = _name, scriptMessagePow = _pow, scriptMessageDays = _days}
            -> mconcat
                [ _who
                , " gains "
                , _type
                , " "
                , toMessage (iquotes _name)
                , " <!-- "
                , _modid
                , " --> ("
                , toMessage (colourNumSign True _pow)
                , " Power) for "
                , toMessage (formatDays _days)
                ]
        MsgHasModifier {scriptMessageModid = _modid, scriptMessageKind = _kind, scriptMessageName = _name}
            -> mconcat
                [ "Has "
                , _kind
                , " "
                , toMessage (iquotes _name)
                , " <!-- "
                , _modid
                , " -->"
                ]
        MsgRemoveModifier {scriptMessageModid = _modid, scriptMessageKind = _kind, scriptMessageName = _name}
            -> mconcat
                [ "Remove "
                , _kind
                , " ''\""
                , _name
                , "\"'' <!-- "
                , _modid
                , " -->"
                ]
        MsgAllOf
            -> "All of:"
        MsgFROM
            -> "FROM:"
        MsgROOT
            -> "ROOT"
        MsgROOTCountry
            -> "Our country"
        MsgROOTCountryAsOther
            -> "same as our country"
        MsgROOTProvince
            -> "The currently considered province"
        MsgROOTProvinceOwner
            -> "the owner of the currently considered province"
        MsgROOTProvinceAsOther
            -> "same as the currently considered province"
        MsgROOTTradeNode
            -> "The currently considered trade node"
        MsgROOTGeographic
            -> "The currently considered location"
        MsgPREV
            -> "PREV"
        MsgPREVCountry
            -> "Previously mentioned country"
        MsgPREVCountryAsOther
            -> "same as the previously mentioned country"
        MsgPREVProvince
            -> "The previously mentioned province"
        MsgPREVProvinceOwner
            -> "the owner of the previously mentioned province"
        MsgPREVProvinceAsOther
            -> "same as the previously mentioned province"
        MsgPREVTradeNode
            -> "The previously mentioned trade node"
        MsgPREVGeographic
            -> "The previously mentioned location"
        MsgTHISCountry
            -> "this country"
        MsgTHISCountryAsOther
            -> "same as this country"
        MsgTHISProvince
            -> "this province"
        MsgTHISProvinceOwner
            -> "the owner of this province"
        MsgTHISProvinceAsOther
            -> "same as this province"
        MsgTHISTradeNode
            -> "This trade node"
        MsgTHISGeographic
            -> "This location"
        MsgEmperor
            -> "The Emperor of Anbennar"
        MsgOriginalDynasty
            -> "the country's original dynasty"
        MsgHistoricDynasty
            -> "one of the country's historical dynasties"
        MsgNoneOf
            -> "None of:"
        MsgAllCoreProvince
            -> "All core provinces:"
        MsgAllProvince
            -> "All provinces:"
        MsgAllSubjectCountries
            -> "All subject countries:"
        MsgArea
            -> "Area containing this province:"
        MsgAtLeastOneOf
            -> "At least one of:"
        MsgAnyActiveTradeNode
            -> "Any trade node with a merchant present:"
        MsgAnyAlly
            -> "Any ally:"
        MsgAnyCoreCountry
            -> "Any country with a core on this province:"
        MsgAnyCoreProvince
            -> "Any core province:"
        MsgAnyCountry
            -> "Any country in the world:"
        MsgAnyEmptyNeighborProvince
            -> "Any neighbouring uncolonized province:"
        MsgAnyEnemyCountry
            -> "Any enemy country:"
        MsgAnyHereticProvince
            -> "Any province with heretic religion:"
        MsgAnyKnownCountry
            -> "Any known country:"
        MsgAnyNeighborCountry
            -> "Any neighbouring country:"
        MsgAnyNeighborProvince
            -> "Any neighbouring province:"
        MsgAnyOwnedProvince
            -> "Any owned province:"
        MsgAnyPrivateeringCountry
            -> "Any country privateering in this node:"
        MsgAnyTradeNodeProvince
            -> "Any province in this trade node:"
        MsgAnyProvince
            -> "Any province:"
        MsgAnyRival
            -> "Any rival:"
        MsgAnySubject
            -> "Any subject:"
        MsgAnyTradeNode
            -> "Any trade node:"
        MsgCapital
            -> "Capital"
        MsgController
            -> "Province controller"
        MsgEffect
            -> "Effect:"
        MsgElse
            -> "Else:"
        MsgElseIf
            -> "Else, if:"
        MsgAllCountries
            -> "All countries in the world:"
        MsgAllNeighborCountries
            -> "All neighbouring countries:"
        MsgAllNeighborProvinces
            -> "All neighbouring provinces:"
        MsgEveryActiveTradeNode
            -> "Every trade node with a merchant present:"
        MsgEveryAlly
            -> "Every ally:"
        MsgEveryCountry
            -> "Every country in the world:"
        MsgEveryCoreCountry
            -> "Every country with a core:"
        MsgEveryCoreProvince
            -> "Every core province:"
        MsgEveryEnemyCountry
            -> "Every enemy country:"
        MsgEveryHereticProvince
            -> "Every province with heretic religion:"
        MsgEveryKnownCountry
            -> "Every known country:"
        MsgEveryNeighborCountry
            -> "Every neighbouring country:"
        MsgEveryNeighborProvince
            -> "Every neighbouring province:"
        MsgEveryOwnedProvince
            -> "Every owned province:"
        MsgEveryProvince
            -> "Every province in the world:"
        MsgEveryRival
            -> "Every rival:"
        MsgEverySubject
            -> "Every subject country:"
        MsgHiddenEffect
            -> "Hidden effect:"
        MsgIf
            -> "If:"
        MsgLimit
            -> "Limited to:"
        MsgMostProvinceTradePower
            -> "The country with the most provincial trade power:"
        MsgOverlord
            -> "Overlord:"
        MsgOwner
            -> "Province owner:"
        MsgRandomActiveTradeNode
            -> "One random trade node with a merchant present:"
        MsgRandomAlly
            -> "One random ally:"
        MsgRandomCoreCountry
            -> "One random country with a core:"
        MsgRandomCoreProvince
            -> "One random core province:"
        MsgRandomCountry
            -> "One random country:"
        MsgRandomElector
            -> "One random elector:"
        MsgRandomEnemyCountry
            -> "One random enemy country:"
        MsgRandomEmptyNeighborProvince
            -> "One random neighbouring uncolonized province:"
        MsgRandomHereticProvince
            -> "One random province with heretic religion:"
        MsgRandomKnownCountry
            -> "One random known country:"
        MsgRandomList
            -> "One of the following at random:"
        MsgRandomNeighborCountry
            -> "One random neighbouring country:"
        MsgRandomNeighborProvince
            -> "One random neighbouring province:"
        MsgRandomOwnedProvince
            -> "One random owned province:"
        MsgRandomPrivateeringCountry
            -> "One random country privateering in this node:"
        MsgRandomProvince
            -> "One random province:"
        MsgRandomRival
            -> "One random rival:"
        MsgRandomSubjectCountry
            -> "One random subject country:"
        MsgRandomTradeNode
            -> "One random trade node:"
        MsgStrongestTradePower
            -> "The country with the most trade power:"
        MsgWhile
            -> "While:"
        MsgRandomChance {scriptMessageChance = _chance}
            -> mconcat
                [ toMessage (plainPc _chance)
                , " chance of:"
                ]
        MsgRandom
            -> "One of the following at random:"
        MsgChangeGovernment {scriptMessageWhat = _what}
            -> mconcat
                [ "Change government to "
                , _what
                ]
        MsgContinentIs {scriptMessageWhat = _what}
            -> mconcat
                [ "Continent is "
                , _what
                ]
        MsgContinentIsAs {scriptMessageWhat = _what}
            -> mconcat
                [ "Continent is the same as "
                , _what
                ]
        MsgCultureIs {scriptMessageWhat = _what}
            -> mconcat
                [ "Culture is "
                , _what
                ]
        MsgCultureIsAs {scriptMessageWho = _who}
            -> mconcat
                [ "Culture is the same as "
                , _who
                ]
        MsgCultureIsGroup {scriptMessageWhat = _what}
            -> mconcat
                [ "Culture is in "
                , _what
                , " group"
                ]
        MsgCultureGroupAs {scriptMessageWhat = _what}
            -> mconcat
                [ "Culture is in the same group as "
                , _what
                ]
        MsgRulerIsDynasty {scriptMessageWhat = _what}
            -> mconcat
                [ "Ruler is of the "
                , toMessage (quotes _what)
                , " dynasty"
                ]
        MsgRulerIsSameDynasty {scriptMessageWho = _who}
            -> mconcat
                [ "Ruler is of the same dynasty as "
                , _who
                ]
        MsgHeirNationality {scriptMessageWhat = _what}
            -> mconcat
                [ "Heir's culture is "
                , _what
                ]
        MsgHeirNationalityAs {scriptMessageWho = _who}
            -> mconcat
                [ "Heir's culture is the same as "
                , _who
                ]
        MsgHeirReligion {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Heir's religion is "
                , _icon
                , " "
                , _what
                ]
        MsgHeirReligionAs {scriptMessageWho = _who}
            -> mconcat
                [ "Heir's religion is the same as "
                , _who
                ]
        MsgSetHeirReligion {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Heir's religion becomes "
                , _icon
                , " "
                , _what
                ]
        MsgSetHeirReligionAs {scriptMessageWho = _who}
            -> mconcat
                [ "Heir's religion becomes that of "
                , _who
                ]
        MsgDisasterEnds {scriptMessageWhat = _what}
            -> mconcat
                [ "Disaster "
                , toMessage (iquotes _what)
                , " ends"
                ]
        MsgGovernmentIs {scriptMessageWhat = _what}
            -> mconcat
                [ "Government is "
                , _what
                ]
        MsgGovernmentIsIcon {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Government is "
                , _icon
                , " "
                , _what
                ]
        MsgHasAdvisor {scriptMessageWhom = _whom}
            -> mconcat
                [ "Has advisor "
                , _whom
                ]
        MsgHasAdvisorType {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Has "
                , _icon
                , " "
                , _what
                , " advisor"
                ]
        MsgHasTerrain {scriptMessageWhat = _what}
            -> mconcat
                [ "Has "
                , _what
                , " terrain"
                ]
        MsgUnitSpawnsCountry {scriptMessageIcon = _icon, scriptMessageSpecialUnitType = _special_unit_type, scriptMessageUnitType = _unit_type, scriptMessageRegimentOrShip = _regiment_or_ship, scriptMessageWhom = _whom}
            -> mconcat
                [ "Create "
                , addAOrAnWithExtraText False (T.concat [
                    maybe "" (`T.append` " ") _special_unit_type
                   , _unit_type
                ]) _icon
                , ifThenElseT (T.null _regiment_or_ship) "" (" " <> _regiment_or_ship)
                , " belonging to "
                , _whom
                ]
        MsgUnitSpawnsProvince {scriptMessageIcon = _icon, scriptMessageSpecialUnitType = _special_unit_type, scriptMessageUnitType = _unit_type, scriptMessageRegimentOrShip = _regiment_or_ship, scriptMessageWhere = _where}
            -> mconcat
                [ "Create "
                , addAOrAnWithExtraText False (T.concat [
                    maybe "" (`T.append` " ") _special_unit_type
                   , _unit_type
                ]) _icon
                , ifThenElseT (T.null _regiment_or_ship) "" (" " <> _regiment_or_ship)
                , " in "
                , _where
                ]
        MsgAdvisorDies {scriptMessageWho = _who}
            -> mconcat
                [ "Advisor "
                , _who
                , " dies"
                ]
        MsgDominantCultureIs {scriptMessageWhat = _what}
            -> mconcat
                [ "Dominant culture is "
                , _what
                ]
        MsgDominantCultureIsAs {scriptMessageWhat = _what}
            -> mconcat
                [ "Dominant culture is the same as "
                , _what
                ]
        MsgPrimaryCultureIs {scriptMessageWhat = _what}
            -> mconcat
                [ "Primary culture is "
                , _what
                ]
        MsgPrimaryCultureIsAs {scriptMessageWhat = _what}
            -> mconcat
                [ "Primary culture is the same as "
                , _what
                ]
        MsgRegionIs {scriptMessageWhat = _what}
            -> mconcat
                [ "Province is in "
                , _what
                , " region"
                ]
        MsgSuperRegionIs {scriptMessageWhat = _what}
            -> mconcat
                [ "Province is in "
                , _what
                , " [[super-region]]"
                ]
        MsgLoseAdvisor {scriptMessageWho = _who}
            -> mconcat
                [ "Advisor "
                , _who
                , " leaves the country's court"
                ]
        MsgRemoveFromEstate {scriptMessageIcon = _icon, scriptMessageWhom = _whom}
            -> mconcat
                [ "Remove province from the "
                , _icon
                , " "
                , _whom
                , " estate"
                ]
        MsgDisasterOngoing {scriptMessageWhat = _what}
            -> mconcat
                [ "The "
                , toMessage (iquotes _what)
                , " disaster is ongoing"
                ]
        MsgProvinceIs {scriptMessageWhat = _what}
            -> mconcat
                [ "Province is "
                , _what
                ]
        MsgOwns {scriptMessageWhat = _what}
            -> mconcat
                [ "Owns province "
                , _what
                ]
        MsgOwnsCore {scriptMessageWhat = _what}
            -> mconcat
                [ "Owns core province "
                , _what
                ]
        MsgControls {scriptMessageWhat = _what}
            -> mconcat
                [ "Controls province "
                , _what
                ]
        MsgAdvisorExists {scriptMessageAdvisorID = _advisorID}
            -> mconcat
                [ "Advisor with ID "
                , toMessage (plainNum _advisorID)
                , " exists"
                ]
        MsgAdvisorIsEmployed {scriptMessageAdvisorID = _advisorID}
            -> mconcat
                [ "Advisor with ID "
                , toMessage (plainNum _advisorID)
                , " is employed"
                ]
        MsgClearFlag {scriptMessageFlagType = _flagType, scriptMessageName = _name}
            -> mconcat
                [ "Clear "
                , _flagType
                , " flag <tt>"
                , _name
                , "</tt>"
                ]
        MsgHasFlag {scriptMessageFlagType = _flagType, scriptMessageName = _name}
            -> mconcat
                [ toMessage (T.toTitle _flagType)
                , " flag <tt>"
                , _name
                , "</tt> is set"
                ]
        MsgSetFlag {scriptMessageFlagType = _flagType, scriptMessageName = _name}
            -> mconcat
                [ "Set "
                , _flagType
                , " flag <tt>"
                , _name
                , "</tt>"
                ]
        MsgHadFlag {scriptMessageCategory = _category, scriptMessageName = _name, scriptMessageDays = _days}
            -> mconcat
                [ "Has had "
                , _category
                , " flag "
                , _name
                , " for "
                , toMessage (formatDays _days)
                ]
        MsgCountryFlag
            -> "country"
        MsgProvinceFlag
            -> "province"
        MsgRulerFlag
            -> "ruler"
        MsgGlobalFlag
            -> "global"
        MsgConsortFlag
            -> "consort"
        MsgHeirFlag
            -> "heir"
        MsgHadCountryFlag {scriptMessageIcon = __icon, scriptMessageName = _name, scriptMessageDays = _days}
            -> mconcat
                [ "Has had country flag "
                , _name
                , " for at least "
                , toMessage (formatDays _days)
                ]
        MsgHadProvinceFlag {scriptMessageIcon = __icon, scriptMessageName = _name, scriptMessageDays = _days}
            -> mconcat
                [ "Has had province flag "
                , _name
                , " for at least "
                , toMessage (formatDays _days)
                ]
        MsgHadRulerFlag {scriptMessageIcon = __icon, scriptMessageName = _name, scriptMessageDays = _days}
            -> mconcat
                [ "Has had ruler flag "
                , _name
                , " for at least "
                , toMessage (formatDays _days)
                ]
        MsgHadHeirFlag {scriptMessageIcon = __icon, scriptMessageName = _name, scriptMessageDays = _days}
            -> mconcat
                [ "Has had heir flag "
                , _name
                , " for at least "
                , toMessage (formatDays _days)
                ]
        MsgHadGlobalFlag {scriptMessageIcon = __icon, scriptMessageName = _name, scriptMessageDays = _days}
            -> mconcat
                [ "Global flag "
                , _name
                , " has been set for at least "
                , toMessage (formatDays _days)
                ]
        MsgColonySettlers {scriptMessageAmt = _amt}
            -> mconcat
                [ "Colony has at least "
                , toMessage (roundNum _amt)
                , " "
                , plural _amt "settler" "settlers"
                ]
        MsgWasAtWar {scriptMessageAmt = _amt}
            -> mconcat
                [ "Was at war within the last "
                , toMessage (formatMonths _amt)
                ]
        MsgHeirAge {scriptMessageAmt = _amt}
            -> mconcat
                [ "Heir is at least "
                , toMessage (roundNum _amt)
                , " "
                , plural _amt "year" "years"
                , " old"
                ]
        MsgYearIs {scriptMessageAmt = _amt}
            -> mconcat
                [ "Year is "
                , toMessage (roundNumNoSpace _amt)
                , " or later"
                ]
        MsgNumLoans {scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , toMessage (plainNum _amt)
                , " "
                , plural _amt "loan" "loans"
                ]
        MsgNumMercs {scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , toMessage (roundNum _amt)
                , " mercenary "
                , plural _amt "regiment" "regiments"
                ]
        MsgNumMissionaries {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , _icon
                , " "
                , toMessage (roundNum _amt)
                , " "
                , plural _amt "missionary" "missionaries"
                ]
        MsgNumPorts {scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , toMessage (plainNum _amt)
                , " "
                , plural _amt "port" "ports"
                ]
        MsgNumRebelArmies {scriptMessageAmt = _amt}
            -> mconcat
                [ "At least "
                , toMessage (roundNum _amt)
                , " rebel "
                , plural (round _amt) "army is" "armies are"
                , " present in the country"
                ]
        MsgNumEmbargoes {scriptMessageAmt = _amt}
            -> mconcat
                [ "Is embargoing at least "
                , toMessage (roundNum _amt)
                , " other "
                , plural (round _amt) "country" "countries"
                ]
        MsgNumTradingBonuses {scriptMessageAmt = _amt}
            -> mconcat
                [ "Has enough market share in "
                , toMessage (roundNum _amt)
                , " trade goods to get their [[Trading in]] bonus"
                ]
        MsgUnitsInProvince {scriptMessageUnitType = _type, scriptMessageAmt = _amt}
            -> mconcat
                [ "Province contains at least "
                , toMessage (roundNum _amt)
                , ifThenElseT (T.null _type) " " (" " <> _type <> " ")
                , plural (round _amt) "regiment" "regiments"
                ]
        MsgUnitsInProvinceOwnedBy {scriptMessageUnitType = _type, scriptMessageWhom = _whom}
            -> mconcat
                [ _whom
                , " has"
                , ifThenElseT (T.null _type) " " (" " <> _type <> " ")
                , "regiments in the province"
                ]
        MsgNumCities {scriptMessageAmt = _amt}
            -> mconcat
                [ "Owns at least "
                , toMessage (roundNum _amt)
                , " non-colony "
                , plural _amt "province" "provinces"
                ]
        MsgNumCitiesThan {scriptMessageWhom = _whom}
            -> mconcat
                [ "Owns at least as many cities as "
                , _whom
                ]
        MsgToleranceToThis {scriptMessageAmt = _amt}
            -> mconcat
                [ "Tolerance to this religion is at least "
                , toMessage (colourNum True _amt)
                ]
        MsgRulerADM {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Ruler's "
                , _icon
                , " administrative skill is at least "
                , toMessage (roundNum _amt)
                ]
        MsgADMTech {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Administrative technology is at least "
                , toMessage (roundNum _amt)
                ]
        MsgADMTechAs {scriptMessageIcon = _icon, scriptMessageWho = _who}
            -> mconcat
                [ _icon
                , " Administrative technology is at least that of "
                , _who
                ]
        MsgDIPTechAs {scriptMessageIcon = _icon, scriptMessageWho = _who}
            -> mconcat
                [ _icon
                , " Diplomatic technology is at least that of "
                , _who
                ]
        MsgMILTechAs {scriptMessageIcon = _icon, scriptMessageWho = _who}
            -> mconcat
                [ _icon
                , " Military technology is at least that of "
                , _who
                ]
        MsgArmyTradition {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Army tradition is at least "
                , toMessage (plainNum _amt)
                ]
        MsgArmyTraditionAs {scriptMessageIcon = _icon, scriptMessageWhom = _whom}
            -> mconcat
                [ _icon
                , " Army tradition is at least that of "
                , _whom
                ]
        MsgArmyTraditionFromBattles {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNum True _amt)
                , " Army tradition from battles"
                ]
        MsgBaseManpower {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Base manpower is at least "
                , toMessage (roundNum _amt)
                ]
        MsgBaseProduction {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Base production is at least "
                , toMessage (roundNum _amt)
                ]
        MsgBaseTax {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Base tax is at least "
                , toMessage (roundNum _amt)
                ]
        MsgCreateAdmiral {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Gain "
                , _icon
                , " admiral with "
                , toMessage (roundNum _amt)
                , " navy tradition"
                ]
        MsgCreateConquistador {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Gain "
                , _icon
                , " conquistador with "
                , toMessage (roundNum _amt)
                , " army tradition"
                ]
        MsgCreateExplorer {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Gain "
                , _icon
                , " explorer with "
                , toMessage (roundNum _amt)
                , " navy tradition"
                ]
        MsgCreateGeneral {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Gain "
                , _icon
                , " general with "
                , toMessage (roundNum _amt)
                , " army tradition"
                ]
        MsgDevelopment {scriptMessageIcon = _icon, scriptMessageDevelopment = _development}
            -> mconcat
                [ _icon
                , " Development is at least "
                , toMessage (roundNum _development)
                ]
        MsgDevelopmentAs {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ _icon
                , " Development is at least that of "
                , _what
                ]
        MsgRulerDIP {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Ruler's "
                , _icon
                , " diplomatic skill is at least "
                , toMessage (roundNum _amt)
                ]
        MsgDIPTech {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Diplomatic technology is at least "
                , toMessage (roundNum _amt)
                ]
        MsgHordeUnity {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Horde unity is at least "
                , toMessage (roundNum _amt)
                ]
        MsgKarma {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Karma is at least "
                , toMessage (colourPc True _amt)
                ]
        MsgLegitimacy {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Legitimacy is at least "
                , toMessage (roundNum _amt)
                ]
        MsgLegitimacyAs {scriptMessageIcon = _icon, scriptMessageWhom = _whom}
            -> mconcat
                [ _icon
                , " Legitimacy is at least that of "
                , _whom
                ]
        MsgLegitimacyEquivalent {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [  _icon
                , " Legitimacy (or equivalent) is at least "
                , toMessage (roundNum _amt)
                ]
        MsgLegitimacyEquivalentAs {scriptMessageIcon = _icon, scriptMessageWhom = _whom}
            -> mconcat
                [  _icon
                , " Legitimacy (or equivalent) is at least that of "
                , _whom
                ]
        MsgAddLegitimacyEquivalent {legitimacy = _legitimacy, rt = _rt}
            -> mconcat
                ["Gain {{icon|legitimacy}} "
                , toMessage (colourNum True _legitimacy)
                ," legitimacy, {{icon|horde unity}} "
                , toMessage (colourNum True _legitimacy)
                ," horde unity, {{icon|devotion}} "
                , toMessage (colourNum True _legitimacy)
                ," devotion, {{icon|meritocracy}} "
                , toMessage (colourNum True _legitimacy)
                ," or {{icon|republican tradition}} "
                , toMessage (colourNum True _rt)
                ," republican tradition as appropriate"
                ]
        MsgRulerMIL {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Ruler's "
                , _icon
                , " military skill is at least "
                , toMessage (roundNum _amt)
                ]
        MsgMILTech {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Military technology is at least "
                , toMessage (roundNum _amt)
                ]
        MsgNumAllies {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , _icon
                , " "
                , toMessage (roundNum _amt)
                , " "
                , plural _amt "ally" "allies"
                ]
        MsgNumCardinals {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , _icon
                , " "
                , toMessage (roundNum _amt)
                , " "
                , plural _amt "veridical" "veridicals"
                ]
        MsgNumColonists {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , _icon
                , " "
                , toMessage (roundNum _amt)
                , " "
                , plural _amt "colonist" "colonists"
                ]
        MsgNumHeavyShips {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , _icon
                , " "
                , toMessage (roundNum _amt)
                , " heavy "
                , plural _amt "ship" "ships"
                ]
        MsgNumHeavyShipsMatches {scriptMessageIcon = _icon, scriptMessageWhom = _whom}
            -> mconcat
                [ "Has at least as many "
                , _icon
                , " heavy ships as "
                , _whom
                ]
        MsgNumLightShipsMatches {scriptMessageIcon = _icon, scriptMessageWhom = _whom}
            -> mconcat
                [ "Has at least as many "
                , _icon
                , " light ships as "
                , _whom
                ]
        MsgNumLightShips {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , _icon
                , " "
                , toMessage (roundNum _amt)
                , " light "
                , plural _amt "ship" "ships"
                ]
        MsgNumGalleyShipsMatches {scriptMessageIcon = _icon, scriptMessageWhom = _whom}
            -> mconcat
                [ "Has at least as many "
                , _icon
                , " galley ships as "
                , _whom
                ]
        MsgNumGalleyShips {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , _icon
                , " "
                , toMessage (roundNum _amt)
                , " galley "
                , plural _amt "ship" "ships"
                ]
        MsgNumTransportShipsMatches {scriptMessageIcon = _icon, scriptMessageWhom = _whom}
            -> mconcat
                [ "Has at least as many "
                , _icon
                , " transport ships as "
                , _whom
                ]
        MsgNumTransportShips {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , _icon
                , " "
                , toMessage (roundNum _amt)
                , " transport "
                , plural _amt "ship" "ships"
                ]
        MsgNumMerchants {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , _icon
                , " "
                , toMessage (roundNum _amt)
                , " "
                , plural _amt "merchant" "merchants"
                ]
        MsgStability {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Stability is at least "
                , toMessage (colourNumSign True _amt)
                ]
        MsgTotalDevelopment {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Country's total "
                , _icon
                , " development is at least "
                , toMessage (roundNum _amt)
                ]
        MsgTotalDevelopmentAs {scriptMessageIcon = _icon, scriptMessageWhom = _whom}
            -> mconcat
                [ "Country's total "
                , _icon
                , " development is at least that of "
                , _whom
                ]
        MsgTotalCardinals {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "At least "
                , _icon
                , " "
                , toMessage (roundNum _amt)
                , " "
                , plural _amt "veridical" "veridicals"
                , " exist in the world"
                ]
        MsgUnrest {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Unrest is at least "
                , _icon
                , " "
                , toMessage (colourNum False _amt)
                ]
        MsgMonthlyIncome {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Monthly income is at least "
                , toMessage (colourNum True _amt)
                , " ducats"
                ]
        MsgMonthlyIncomeAs {scriptMessageIcon = _icon, scriptMessageWhom = _whom}
            -> mconcat
                [ _icon
                , " Monthly income is at least that of "
                , _whom
                ]
        MsgWarExhaustion {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " War exhaustion is at least "
                , toMessage (colourNum False _amt)
                ]
        MsgWarScore {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "War score is at least "
                , _icon
                , " "
                , toMessage (colourPc True _amt)
                ]
        MsgRepTrad {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Republican tradition is at least "
                , toMessage (roundNum _amt)
                ]
        MsgInflation {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Inflation is at least "
                , toMessage (colourPc False _amt)
                ]
        MsgInflationAs {scriptMessageIcon = _icon, scriptMessageWhom = _whom}
            -> mconcat
                [ _icon
                , " Inflation is at least that of "
                , _whom
                ]
        MsgLocalAutonomy {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Local autonomy is at least "
                , toMessage (colourPc False _amt)
                ]
        MsgManpower {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , _icon
                , " "
                , toMessage (plainNum (_amt * 1000))
                , " manpower"
                ]
        MsgManpowerPercentage {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Manpower reserves are at least "
                , toMessage (reducedNum plainPc _amt)
                , " of maximum"
                ]
        MsgMercantilism {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Mercantilism is at least "
                , toMessage (plainNum _amt)
                ]
        MsgChangeGoods {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Change province's goods produced to "
                , _icon
                , " "
                , _what
                ]
        MsgCreateAdvisor { scriptMessageInfo = _extra_information, scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Gain "
                , _icon
                , " "
                , _what
                , " advisor"
                , _extra_information
                ]
        MsgHasIdeaGroup {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Has activated "
                , _icon
                , " "
                , _what
                ]
        MsgProducesGoods {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Produces "
                , _icon
                , " "
                , _what
                ]
        MsgProducesSameGoods {scriptMessageWhere = _where}
            -> mconcat
                [ "Produces the same goods as "
                , _where
                ]
        MsgEstateExists {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ _icon
                , " "
                , _what
                , " estate exists"
                ]
        MsgAssignToEstate {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Assign province to the "
                , _icon
                , " "
                , _what
                , " estate"
                ]
        MsgRulerIsGeneral {scriptMessageIcon = _icon, scriptMessage_what = __what}
            -> mconcat
                [ "Ruler is a "
                , _icon
                , " general"
                ]
        MsgAlliedWith {scriptMessageWhom = _whom}
            -> mconcat
                [ "Is allied to "
                , _whom
                ]
        MsgCedeProvinceTo {scriptMessageWhom = _whom}
            -> mconcat
                [ "Cede province to "
                , _whom
                ]
        MsgControlledBy {scriptMessageWhom = _whom}
            -> mconcat
                [ "Province is controlled by "
                , _whom
                ]
        MsgDefensiveWarAgainst {scriptMessageWhom = _whom}
            -> mconcat
                [ "Is defending in a war against "
                , _whom
                ]
        MsgDiscoverCountry {scriptMessageWhom = _whom}
            -> mconcat
                [ "Discover "
                , _whom
                ]
        MsgDiscoverProvince {scriptMessageWhat = _what}
            -> mconcat
                [ "Discover "
                , _what
                ]
        MsgGainCore {scriptMessageWho = _who}
            -> mconcat
                [ _who
                , " gains a core on this province"
                ]
        MsgGainCoreProvince {scriptMessageWhat = _what}
            -> mconcat
                [ "Gains a core on "
                , _what
                ]
        MsgGainTerritorialCore {scriptMessageWho = _who}
            -> mconcat
                [ _who
                , " gains a territorial core on this province"
                ]
        MsgGainTerritorialCoreProvince {scriptMessageWhat = _what}
            -> mconcat
                [ "Gains a territorial core on "
                , _what
                ]
        MsgGainPermanentClaimCountry {scriptMessageWho = _who}
            -> mconcat
                [ _who
                , " gains a permanent claim on this province"
                ]
        MsgGainPermanentClaimProvince {scriptMessageWhere = _where}
            -> mconcat
                [ "Gain a permanent claim on "
                , _where
                ]
        MsgHasDiscovered {scriptMessageWhomOrWhere = _whomOrWhere}
            -> mconcat
                [ "Has discovered "
                , _whomOrWhere
                ]
        MsgDiscoveredBy {scriptMessageWhom = _whom}
            -> mconcat
                [ "Has been discovered by "
                , _whom
                ]
        MsgSameContinent {scopeIsCountry = _scope, paramIsCountry = _param, scriptMessageWhomOrWhere = _whomOrWhere}
            -> mconcat
                [ ifThenElseT _scope "The capital is" "Is"
                , " on the same continent as "
                , ifThenElseT _param "the capital of " ""
                , _whomOrWhere
                ]
        MsgInherit {scriptMessageWhom = _whom}
            -> mconcat
                [ "Inherit "
                , _whom
                ]
        MsgNeighbors {scriptMessageWhom = _whom}
            -> mconcat
                [ "Has a border with "
                , _whom
                ]
        MsgIsRival {scriptMessageWhom = _whom}
            -> mconcat
                [ _whom
                , " is a rival"
                ]
        MsgIsSubjectOf {scriptMessageWhom = _whom}
            -> mconcat
                [ "Is a subject of "
                , _whom
                ]
        MsgIsSubjectOfTypeWithOverlord {scriptMessageType = _type, scriptMessageWhom = _whom}
            -> mconcat
                [ "Is a "
                , _type
                , " subject of "
                , _whom
                ]
        MsgLoseCoreCountry {scriptMessageWho = _who}
            -> mconcat
                [ _who
                , " loses their core on this province"
                ]
        MsgLoseCoreProvince {scriptMessageWhere = _where}
            -> mconcat
                [ "Lose core on "
                , _where
                ]
        MsgRoyalMarriageWith {scriptMessageWhom = _whom}
            -> mconcat
                [ "Has a royal marriage with "
                , _whom
                ]
        MsgOffensiveWarAgainst {scriptMessageWhom = _whom}
            -> mconcat
                [ "Is attacking in a war against "
                , _whom
                ]
        MsgOwnedBy {scriptMessageWhom = _whom}
            -> mconcat
                [ "Province is owned by "
                , _whom
                ]
        MsgReleaseVassal {scriptMessageWhom = _whom}
            -> mconcat
                [ "Release "
                , _whom
                , " as a vassal"
                ]
        MsgUnderSiegeBy {scriptMessageWhom = _whom}
            -> mconcat
                [ "Province is under siege by "
                , _whom
                ]
        MsgSupportIndependenceOf {scriptMessageWhom = _whom}
            -> mconcat
                [ "Support the independence of "
                , _whom
                ]
        MsgCountryIs {scriptMessageWho = _who}
            -> mconcat
                [ "Is "
                , _who
                ]
        MsgTruceWith {scriptMessageWhom = _whom}
            -> mconcat
                [ "Has a truce with "
                , _whom
                ]
        MsgAtWarWith {scriptMessageWhom = _whom}
            -> mconcat
                [ "Is at war with "
                , _whom
                ]
        MsgMakeWhitePeace {scriptMessageWhom = _whom}
            -> mconcat
                [ "Make a white peace with "
                , _whom
                ]
        MsgCountryExists {scriptMessageWho = _who}
            -> mconcat
                [ _who
                , " exists"
                ]
        MsgExists {scriptMessageYn = _yn}
            -> toMessage (ifThenElseT _yn "Exists" "Does ''not'' exist")
        MsgSameReligion {scriptMessageWhom = _whom}
            -> mconcat
                [ "Religion is same as "
                , _whom
                ]
        MsgReligion {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Religion is "
                , _icon
                , " "
                , _what
                ]
        MsgSameReligionGroup {scriptMessageWhom = _whom}
            -> mconcat
                [ "Religion group is same as "
                , _whom
                ]
        MsgReligionGroup {scriptMessage_ = __, scriptMessageWhat = _what}
            -> mconcat
                [ "Religion is in "
                , _what
                , " group"
                ]
        MsgChangeSameReligion {scriptMessageWhom = _whom}
            -> mconcat
                [ "Change religion to that of "
                , _whom
                ]
        MsgChangeReligion {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Change religion to "
                , _icon
                , " "
                , _what
                ]
        MsgChangeRulerSameReligion {scriptMessageWhom = _whom}
            -> mconcat
                [ "Change ruler religion to that of "
                , _whom
                ]
        MsgChangeRulerReligion {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Change ruler religion to "
                , _icon
                , " "
                , _what
                ]
        MsgChangeConsortSameReligion {scriptMessageWhom = _whom}
            -> mconcat
                [ "Change consort religion to that of "
                , _whom
                ]
        MsgChangeConsortReligion {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Change consort religion to "
                , _icon
                , " "
                , _what
                ]
        MsgRulerReligionIsSame {scriptMessageWhom = _whom}
            -> mconcat
                [ "Ruler religion is the same as that of "
                , _whom
                ]
        MsgRulerReligionIs {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Ruler religion is "
                , _icon
                , " "
                , _what
                ]
        MsgConsortReligionIsSame {scriptMessageWhom = _whom}
            -> mconcat
                [ "Consort's religion is the same as that of "
                , _whom
                ]
        MsgConsortReligionIs {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Consort's religion is "
                , _icon
                , " "
                , _what
                ]
        MsgRulerCultureIsSame {scriptMessageWhom = _whom}
            -> mconcat
                [ "Ruler culture is the same as that of "
                , _whom
                ]
        MsgRulerCultureIs {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Ruler culture is "
                , _what
                ]
        MsgIsCoreOf {scriptMessageWhom = _whom}
            -> mconcat
                [ "Is a core of "
                , _whom
                ]
        MsgHasCoreOn {scriptMessageWhat = _what}
            -> mconcat
                [ "Has a core on "
                , _what
                ]
        MsgHasClaim {scriptMessageWho = _who}
            -> mconcat
                [ _who
                , " has a claim on this province"
                ]
        MsgHasClaimOn {scriptMessageWhat = _what}
            -> mconcat
                [ "Has a claim on "
                , _what
                ]
        MsgIsAIControlled {scriptMessageYn = _yn}
            -> mconcat
                [ "Is "
                , toMessage (ifThenElseT _yn "AI" "player")
                , "-controlled"
                ]
        MsgHasCardinal {scriptMessageYn = _yn}
            -> mconcat
                [ toMessage (ifThenElseT _yn "Has" "Does ''not'' have")
                , " a veridical"
                ]
        MsgHasConsort {scriptMessageYn = _yn}
            -> mconcat
                [ toMessage (ifThenElseT _yn "Has" "Does ''not'' have")
                , " a consort"
                ]
        MsgHasHeir {scriptMessageYn = _yn}
            -> mconcat
                [ toMessage (ifThenElseT _yn "Has" "Does ''not'' have")
                , " an heir"
                ]
        MsgHasHeirNamed {scriptMessageWhom = _whom}
            -> mconcat
                [ "Has "
                , toMessage (quotes _whom)
                , " as heir"
                ]
        MsgHasOwnerCulture {scriptMessageYn = _yn}
            -> mconcat
                [ "Has "
                , toMessage (ifThenElseT _yn "the same culture as" "a different culture from")
                , " its owner"
                ]
        MsgHasOwnerAcceptedCulture {scriptMessageYn = _yn}
            -> mconcat
                [ toMessage (ifThenElseT _yn "Has" "Does ''not'' have")
                , " an accepted culture of its owner"
                ]
        MsgHasOwnerReligion {scriptMessageYn = _yn}
            -> mconcat
                [ "Has "
                , toMessage (ifThenElseT _yn "the same religion as" "a different religion from")
                , " its owner"
                ]
        MsgHasPort {scriptMessageYn = _yn}
            -> mconcat
                [ toMessage (ifThenElseT _yn "Has" "Does ''not'' have")
                , " a port"
                ]
        MsgHasSeatInParliament {scriptMessageYn = _yn}
            -> mconcat
                [ toMessage (ifThenElseT _yn "Has" "Does ''not'' have")
                , " a seat in Parliament"
                ]
        MsgIsInRegency {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " in a regency"
                ]
        MsgIsInExtendedRegency {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " in an extended regency"
                ]
        MsgUnderSiege {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " under siege"
                ]
        MsgAtWar {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " at war"
                ]
        MsgIsCapital {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " the country's capital"
                ]
        MsgIsCity {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " a city"
                ]
        MsgIsColony {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " a colony"
                ]
        MsgIsEmperor {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " the Emperor of Anbennar"
                ]
        MsgIsFemale {scriptMessageYn = _yn}
            -> mconcat
                [ "Ruler is "
                , toMessage (ifThenElseT _yn "female" "male")
                ]
        MsgIsInCapitalArea {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " connected to the capital of its owner"
                ]
        MsgIsLesserInUnion {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " a lesser partner in a personal union"
                ]
        MsgIsLooted {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " looted"
                ]
        MsgIsOverseas {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " [[overseas]]"
                ]
        MsgIsPartOfHRE {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " part of the Empire of Anbennar"
                ]
        MsgIsCenterOfReformation {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " a Center of Reformation"
                ]
        MsgIsSubject {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " a subject nation"
                ]
        MsgPapacyIsActive {scriptMessageYn = _yn}
            -> mconcat
                [ "Papal interaction is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " active"
                ]
        MsgHasBeenPlayer {scriptMessageYn = _yn}
            -> mconcat
                [ "Has"
                , toMessage (ifThenElseT _yn "" " ''never''")
                , " been player-controlled"
                ]
        MsgIsState {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " in a state"
                ]
        MsgIsStatistsInPower {scriptMessageYn = _yn}
            -> mconcat
                [ "The {{icon|republic}} Statists are"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " in power"
                ]
        MsgIsOrangistsInPower {scriptMessageYn = _yn}
            -> mconcat
                [ "The {{icon|monarchy}} Orangists are"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " in power"
                ]
        MsgGainCB {scriptMessageCbtype = _cbtype, scriptMessageWhom = _whom}
            -> mconcat
                [ "Gain "
                , _cbtype
                , " casus belli against "
                , _whom
                ]
        MsgGainCBDuration {scriptMessageCbtype = _cbtype, scriptMessageWhom = _whom, scriptMessageMonths = _months}
            -> mconcat
                [ "Gain "
                , _cbtype
                , " casus belli against "
                , _whom
                , " for "
                , toMessage (formatMonths _months)
                ]
        MsgReverseGainCB {scriptMessageCbtype = _cbtype, scriptMessageWho = _who}
            -> mconcat
                [ _who
                , " gains "
                , _cbtype
                , " casus belli against this country"
                ]
        MsgReverseGainCBDuration {scriptMessageCbtype = _cbtype, scriptMessageWho = _who, scriptMessageMonths = _months}
            -> mconcat
                [ _who
                , " gains "
                , _cbtype
                , " casus belli against this country for "
                , toMessage (formatMonths _months)
                ]
        MsgFactionGainInfluence {scriptMessageIcon = _icon, scriptMessageWhom = _whom, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (plainNum _amt)
                , " influence for the "
                , _whom
                , " faction"
                ]
        MsgFactionHasInfluence {scriptMessageIcon = _icon, scriptMessageWhom = _whom, scriptMessageAmt = _amt}
            -> mconcat
                [ _whom
                , " faction has at least "
                , _icon
                , " "
                , toMessage (plainNum _amt)
                , " influence"
                ]
        MsgFactionInPower {scriptMessageIcon = _icon, scriptMessageWhom = _whom}
            -> mconcat
                [ _icon
                , " "
                , _whom
                , " faction is in power"
                ]
        MsgFactionInPowerEffect {scriptMessageIcon = _icon, scriptMessageWhom = _whom}
            -> mconcat
                [ "If the "
                , _icon
                , " "
                , _whom
                , " faction is in power:"
                ]
        MsgHasFaction {scriptMessageWhat = _what}
            -> mconcat
                [ "Has the "
                , _what
                , " faction"
                ]
        MsgHasFactions {scriptMessageYn = _yn}
            -> mconcat
                [ toMessage (ifThenElseT _yn "Has" "Does ''not'' have")
                , " factions"
                ]
        MsgHasAdoptedCult {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Has adopted the "
                , _icon
                , " "
                , _what
                , " cult"
                ]
        MsgHasUnlockedCult {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Has unlocked the "
                , _icon
                , " "
                , _what
                , " cult"
                ]
        MsgHasBuilding {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Has "
                , _icon
                , " "
                , _what
                , " building"
                ]
        MsgIndefinitely
            -> "indefinitely"
        MsgForDays {scriptMessageDays = _days}
            -> mconcat
                [ "for "
                , toMessage (formatDays _days)
                ]
        MsgEstateLoyalty {scriptMessageIcon = _icon, scriptMessageWho = _who, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , _who
                , " has at least "
                , toMessage (plainNum _amt)
                , " loyalty"
                ]
        MsgEstateTerritory {scriptMessageIcon = _icon, scriptMessageWho = _who, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , _who
                , " control at least '''"
                , toMessage (plainPc _amt)
                , "''' of the land"
                ]
        MsgEstateInfluence {scriptMessageIcon = _icon, scriptMessageWho = _who, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , _who
                , " has at least "
                , toMessage (plainNum _amt)
                , " influence"
                ]
        MsgAddEstateLoyalty {scriptMessageIcon = _icon, scriptMessageWho = _who, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , _who
                , " "
                , gainsOrLoses _amt
                , " "
                , toMessage (colourNum True _amt)
                , " loyalty"
                ]
        MsgAddEstateInfluence {scriptMessageIcon = _icon, scriptMessageWho = _who, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , _who
                , " "
                , gainsOrLoses _amt
                , " "
                , toMessage (plainNum _amt)
                , " influence"
                ]
        MsgEstateLoyaltyModifier {scriptMessageIcon = _icon, scriptMessageWho = _who, scriptMessageWhat = _what, scriptMessageAmt = _amt, scriptMessageDur = _dur}
            -> mconcat
                [ _icon
                , " "
                , _who
                , " gains loyalty modifier "
                , toMessage (iquotes _what)
                , " ("
                , toMessage (colourNum True _amt)
                , " loyalty "
                , _dur
                ]
        MsgEstateInfluenceModifier {scriptMessageIcon = _icon, scriptMessageWho = _who, scriptMessageWhat = _what, scriptMessageAmt = _amt, scriptMessageDur = _dur}
            -> mconcat
                [ _icon
                , " "
                , _who
                , " gains influence modifier "
                , toMessage (iquotes _what)
                , " ("
                , toMessage (colourNum True _amt)
                , " influence) "
                , _dur
                ]
        MsgAddOpinion {scriptMessageModid = _modid, scriptMessageWhat = _what, scriptMessageWhom = _whom}
            -> mconcat
                [ "Gain opinion modifier {{opinion_modifier|"
                , _modid
                , "}} towards "
                , _whom
                ]
        MsgReverseAddOpinion {scriptMessageModid = _modid, scriptMessageWhat = _what, scriptMessageWho = _who}
            -> mconcat
                [ _who
                , " gains opinion modifier {{opinion_modifier|"
                , _modid
                , "}} towards this country"
                ]
        MsgAddOpinionDur {scriptMessageModid = _modid, scriptMessageWhat = _what, scriptMessageWhom = _whom, scriptMessageYears = _years}
            -> mconcat
                [ "Gain opinion modifier {{opinion_modifier|"
                , _modid
                , "}} towards "
                , _whom
                , " for "
                , toMessage (plainNum _years)
                , " years"
                ]
        MsgReverseAddOpinionDur {scriptMessageModid = _modid, scriptMessageWhat = _what, scriptMessageWho = _who, scriptMessageYears = _years}
            -> mconcat
                [ _who
                , " gains opinion modifier {{opinion_modifier|"
                , _modid
                , "}} towards this country for "
                , toMessage (plainNum _years)
                , " years"
                ]
        MsgHasOpinionMod {scriptMessageModid = _modid, scriptMessageWhat = _what, scriptMessageWhom = _whom}
            -> mconcat
                [ "Has opinion modifier {{opinion_modifier|"
                , _modid
                , "}} towards "
                , _whom
                ]
        MsgReverseHasOpinionMod {scriptMessageModid = _modid, scriptMessageWhat = _what, scriptMessageWhom = _whom}
            -> mconcat
                [ _whom
                , " has opinion modifier {{opinion_modifier|"
                , _modid
                , "}} towards this country"
                ]
        MsgRemoveOpinionMod {scriptMessageModid = _modid, scriptMessageWhat = _what, scriptMessageWhom = _whom}
            -> mconcat
                [ "Lose opinion modifier {{opinion_modifier|"
                , _modid
                , "}} towards "
                , _whom
                ]
        MsgReverseRemoveOpinionMod {scriptMessageModid = _modid, scriptMessageWhat = _what, scriptMessageWhom = _whom}
            -> mconcat
                [ _whom
                , " loses opinion modifier {{opinion_modifier|"
                , _modid
                , "}} towards this country"
                ]
        MsgAddTreasury {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , " ducats"
                ]
        MsgAddYearsOfEstateLandIncome {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " ducats equal to "
                , toMessage (colourNum True _amt)
                , " "
                , plural (round _amt) "year" "years"
                , " of income (scaled by the land share of all estates)."
                ]
        MsgAddYearsOfIncome {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " ducats equal to "
                , toMessage (colourNum True _amt)
                , " "
                , plural (round _amt) "year" "years"
                , " of income"
                ]
        MsgNewHeir
            -> "Gain a new heir"
        MsgNewHeirAttribs
            -> "Gain a new heir with the following attributes:"
        MsgNewConsort
            -> "Gain a new consort"
        MsgNewConsortAttribs
            -> "Gain a new consort with the following attributes:"
        MsgBuildToForcelimitLand {scriptMessageInficon = _inficon, scriptMessageInfantry = _infantry, scriptMessageCavicon = _cavicon, scriptMessageCavalry = _cavalry, scriptMessageArticon = _articon, scriptMessageArtillery = _artillery}
            -> mconcat
                [ "Build land units to forcelimit: "
                , _inficon
                , " "
                , toMessage (reducedNum plainPc _infantry)
                , " infantry, "
                , _cavicon
                , " "
                , toMessage (reducedNum plainPc _cavalry)
                , " cavalry, "
                , _articon
                , " "
                , toMessage (reducedNum plainPc _artillery)
                , " artillery"
                ]
        MsgBuildToForcelimitNavy {scriptMessageHeavyicon = _heavyicon, scriptMessageHeavy = _heavy, scriptMessageLighticon = _lighticon, scriptMessageLight = _light, scriptMessageGallicon = _gallicon, scriptMessageGalley = _galley, scriptMessageTranspicon = _transpicon, scriptMessageTransport = _transport}
            -> mconcat
                [ "Build naval units to forcelimit: "
                , _heavyicon
                , " "
                , toMessage (reducedNum plainPc _heavy)
                , " heavy ships, "
                , _lighticon
                , " "
                , toMessage (reducedNum plainPc _light)
                , " light ships, "
                , _gallicon
                , " "
                , toMessage (reducedNum plainPc _galley)
                , " galleys, "
                , _transpicon
                , " "
                , toMessage (reducedNum plainPc _transport)
                , " transports"
                ]
        MsgBuildToForcelimit {scriptMessageInficon = _inficon, scriptMessageInfantry = _infantry, scriptMessageCavicon = _cavicon, scriptMessageCavalry = _cavalry, scriptMessageArticon = _articon, scriptMessageArtillery = _artillery, scriptMessageHeavyicon = _heavyicon, scriptMessageHeavy = _heavy, scriptMessageLighticon = _lighticon, scriptMessageLight = _light, scriptMessageGallicon = _gallicon, scriptMessageGalley = _galley, scriptMessageTranspicon = _transpicon, scriptMessageTransport = _transport}
            -> mconcat
                [ "Build units to forcelimit: "
                , _inficon
                , " "
                , toMessage (reducedNum plainPc _infantry)
                , " infantry, "
                , _cavicon
                , " "
                , toMessage (reducedNum plainPc _cavalry)
                , " cavalry, "
                , _articon
                , " "
                , toMessage (reducedNum plainPc _artillery)
                , " artillery, "
                , _heavyicon
                , " "
                , toMessage (reducedNum plainPc _heavy)
                , " heavy ships, "
                , _lighticon
                , " "
                , toMessage (reducedNum plainPc _light)
                , " light ships, "
                , _gallicon
                , " "
                , toMessage (reducedNum plainPc _galley)
                , " galleys, "
                , _transpicon
                , " "
                , toMessage (reducedNum plainPc _transport)
                , " transports"
                ]
        MsgProvinceEvent
            -> "province event"
        MsgCountryEvent
            -> "country event"
        MsgTriggerEvent {scriptMessageEvttype = _evttype, scriptMessageEvtid = _evtid, scriptMessageName = _name}
            -> mconcat
                [ "Trigger "
                , _evttype
                , " "
                , toMessage (iquotes _name)
                , " <!-- "
                , _evtid
                , " -->"
                ]
        MsgTriggerEventDays {scriptMessageEvttype = _evttype, scriptMessageEvtid = _evtid, scriptMessageName = _name, scriptMessageDays = _days}
            -> mconcat
                [ "Trigger "
                , _evttype
                , " "
                , toMessage (iquotes _name)
                , " <!-- "
                , _evtid
                , " --> in "
                , toMessage (formatDays _days)
                ]
        MsgDeclareWarWithCB {scriptMessageWhom = _whom, scriptMessageCb = _cbtype}
            -> mconcat
                [ "Declare war on "
                , _whom
                , " using "
                , _cbtype
                , " casus belli"
                ]
        MsgGainAdvisor { scriptMessageMaybeFemale = _female,
                            scriptMessageMaybeAdvtype = _advtype,
                            scriptMessageMaybeName = _name,
                            scriptMessageMaybeWhere = _where,
                            scriptMessageMaybeSkill = _skill,
                            scriptMessageScaled = _scaled,
                            scriptMessageDiscount = _discount,
                            scriptMessageMaybeExtraText = _extra,
                            scriptMessageIcon = _icon,
                            scriptMessageMaybeCulture = _culture,
                            scriptMessageMaybeReligion = _religion,
                            scriptMessageMaybeEstate = _estate,
                            scriptMessageMaybeMinAge = _min_age,
                            scriptMessageMaybeMaxAge = _max_age
                            }
            -> mconcat
                [ "Gain"
                , maybe "" (\s -> " skill " <> toMessage (roundNum s)) _skill
                , maybe "" (\f -> toMessage (ifThenElseT f " female" " male")) _female
                , if T.null _icon then "" else " " <> _icon
                , maybe "" (" " <>) _advtype
                , " advisor"
                , maybe "" (\name -> " named " <> toMessage (iquotes name)) _name
                , toMessage (ifThenElseT _scaled " with skill level scaled to monthly income" "")
                , maybe "" (\c -> " with " <> c <> " culture") _culture
                , maybe "" (\a -> " and a minumum age of " <> toMessage (roundNum a) <> " years")  _min_age
                , maybe "" (\a -> " and a maximum age of " <> toMessage (roundNum a) <> " years")  _max_age
                , maybe "" (\r -> ifThenElseT (isJust _culture) " and " " with " <> r <> " religion") _religion
                , maybe "" (" in " <>) _where
                , toMessage (advisorDiscountText _discount)
                , maybe "" (\e -> " (25%/50% cheaper to employ if the " <> e <> " estate has at least 60%/80% influence)") _estate
                , maybe "" (\e -> " (" <> e <> ")") _extra
                ]
        MsgRebelLeaderRuler
            -> "The leader of the rebels becomes the country's new ruler"
        MsgNewRuler {scriptMessageRegent = _regent}
            -> mconcat
                [ "A new "
                , toMessage (ifThenElseT _regent "regent" "ruler")
                , " comes to power"
                ]
        MsgNewRulerLeader {scriptMessageRegent = _regent, scriptMessageName = _name}
            -> mconcat
                [ "The leader "
                , _name
                , " becomes "
                , toMessage (ifThenElseT _regent "regent" "ruler")
                ]
        MsgNewRulerAttribs {scriptMessageRegent = _regent}
            -> mconcat
                [ "A new "
                , toMessage (ifThenElseT _regent "regent" "ruler")
                , " comes to power with the following attributes:"
                ]
        MsgNewRulerLeaderAttribs {scriptMessageRegent = _regent, scriptMessageName = _name}
            -> mconcat
                [ "The leader "
                , _name
                , " becomes "
                , toMessage (ifThenElseT _regent "regent" "ruler")
                , " with the following attributes:"
                ]
        MsgLeaderRuler {scriptMessageRegent = _regent, scriptMessageName = _name}
            -> mconcat
                [ "The leader "
                , _name
                , " comes to power as "
                , toMessage (ifThenElseT _regent "regent" "ruler")
                ]
        MsgNamed {scriptMessageName = _name}
            -> mconcat
                [ "Named "
                , toMessage $ quotes _name
                ]
        MsgNewDynMemberDynasty {scriptMessageName = _name}
            -> mconcat
                [ "Of the "
                , _name
                , " dynasty"
                ]
        MsgNewDynMemberDynastyAs {scriptMessageName = _name}
            -> mconcat
                [ "Of the same dynasty as "
                , _name
                ]
        MsgNewDynMemberOriginalDynasty
            -> "Of the country's original dynasty"
        MsgNewDynMemberHistoricDynasty
            -> "Of one of the country's historic dynasties"
        MsgNewDynMemberAge {scriptMessageAmt = _amt}
            -> mconcat
                [ "Aged "
                , toMessage (roundNum _amt)
                , " years"
                ]
        MsgNewDynMemberAdm {scriptMessageFixed = _fixed, scriptMessageAmt = _amt}
            -> mconcat
                [ toMessage (ifThenElseT _fixed "Fixed " "")
                , "{{icon|adm}} "
                , toMessage ((if _fixed then roundNum else plainNumSign) _amt)
                , " administrative skill"
                ]
        MsgNewDynMemberDip {scriptMessageFixed = _fixed, scriptMessageAmt = _amt}
            -> mconcat
                [ toMessage (ifThenElseT _fixed "Fixed " "")
                , "{{icon|dip}} "
                , toMessage ((if _fixed then roundNum else plainNumSign) _amt)
                , " diplomatic skill"
                ]
        MsgNewDynMemberMil {scriptMessageFixed = _fixed, scriptMessageAmt = _amt}
            -> mconcat
                [ toMessage (ifThenElseT _fixed "Fixed " "")
                , "{{icon|mil}} "
                , toMessage ((if _fixed then roundNum else plainNumSign) _amt)
                , " military skill"
                ]
        MsgNewDynMemberMaxAdm {scriptMessageAmt = _amt}
            -> mconcat
                [ "At most {{icon|adm}} "
                , toMessage (roundNum _amt)
                , " administrative skill"
                ]
        MsgNewDynMemberMaxDip {scriptMessageAmt = _amt}
            -> mconcat
                [ "At most {{icon|dip}} "
                , toMessage (roundNum _amt)
                , " diplomatic skill"
                ]
        MsgNewDynMemberMaxMil {scriptMessageAmt = _amt}
            -> mconcat
                [ "At most {{icon|mil}} "
                , toMessage (roundNum _amt)
                , " military skill"
                ]
        MsgNewDynMemberClaim {scriptMessageAmt = _amt}
            -> mconcat
                [ "{{icon|legitimacy}} [[heir claim|Claim strength]] "
                , toMessage (roundNum _amt)
                ]
        MsgNewDynMemberCulture {scriptMessageText = _text}
            -> mconcat
                [ "Of {{icon|culture|28px}} "
                , toMessage _text
                , " culture"
                ]
        MsgNewDynMemberCultureAs {scriptMessageText = _text}
            -> mconcat
                [ "Of the same {{icon|culture|28px}} culture as "
                , toMessage _text
                ]
        MsgNewDynMemberReligion {scriptMessageIcon = _icon, scriptMessageText = _text}
            -> mconcat
                [ "Following the "
                , toMessage _icon
                , " "
                , toMessage _text
                , " religion"
                ]
        MsgNewDynMemberReligionAs {scriptMessageText = _text}
            -> mconcat
                [ "Following the same religion as "
                , toMessage _text
                ]
        MsgNewDynMemberHiddenSkills
            -> "With skills hidden"
        MsgNewDynMemberRandomGender
            -> "With random gender"
        MsgWithGender {scriptMessageMale = _male}
            -> mconcat
               [ "Is "
               , toMessage $ ifThenElseT _male "male" "female"
               ]
        MsgNewDynMemberMinAge {scriptMessageAge = _age}
            -> mconcat
                [ "At least "
                , toMessage (roundNum _age)
                , " years old"
                ]
        MsgNewDynMemberMaxAge {scriptMessageAge = _age}
            -> mconcat
                [ "At most "
                , toMessage (roundNum _age)
                , " years old"
                ]
        MsgNewDynMemberBirthdate {scriptMessageDate = _date}
            -> mconcat
                [ "With birth date "
                , _date
                ]
        MsgNewDynMemberBlockDisinherit
            -> "Can ''not'' be disinherited"
        MsgNewDynMemberBastard
            -> "Not a child of the consort"
        MsgNewDynMemberCountry {scriptMessageWhere = _where}
            -> mconcat
                [ "From "
                , _where
                ]
        MsgNewDynMemberForceRepublicanNames
            -> "Using a republican name"
        MsgEstateHasInfluenceModifier {scriptMessageIcon = _icon, scriptMessageEstate = _estate, scriptMessageModifier = _modifier}
            -> mconcat
                [ _icon
                , " "
                , _estate
                , " estate has influence modifier "
                , toMessage (iquotes _modifier)
                ]
        MsgEstateHasLoyaltyModifier {scriptMessageIcon = _icon, scriptMessageEstate = _estate, scriptMessageModifier = _modifier}
            -> mconcat
                [ _icon
                , " "
                , _estate
                , " estate has loyalty modifier "
                , toMessage (iquotes _modifier)
                ]
        MsgTriggerSwitch
            -> "The first of the following that is true:"
        MsgTriggerSwitchClause {scriptMessageCond = _cond}
            -> mconcat
                [ "If "
                , _cond
                , ":"
                ]
        MsgProvinceHasRebels {scriptMessageIcon = _icon, scriptMessageRtype = _rtype}
            -> mconcat
                [ "Province's most likely rebel type is "
                , _icon
                , " "
                , _rtype
                ]
        MsgRebelsFriendlyTo {scriptMessageFriend = _friend}
            -> mconcat
                [ "friendly to "
                , _friend
                ]
        MsgRebelsLedBy {scriptMessageLeader = _leader}
            -> mconcat
                [ "led by "
                , _leader
                ]
        MsgRebelsGainProgress {scriptMessageAmt = _amt}
            -> mconcat
                [ "gaining "
                , toMessage (roundNum _amt)
                , " progress towards their next uprising"
                ]
        MsgSpawnRebels {scriptMessageRtype = _rtype, scriptMessageSize = _size, scriptMessageFriend = _friend, scriptMessageLeader = _leader, scriptMessageWin = _win, scriptMessageProgress = _progress}
            -> mconcat
                [ _rtype
                , " (size "
                , toMessage (roundNum _size)
                , ")"
                , _friend
                , " rise in revolt"
                , _leader
                , toMessage (ifThenElseT _win " and occupy the province" "")
                , _progress
                ]
        MsgSpawnProvinceReligiousRebels {scriptMessageSize = _size}
            -> mconcat
                [ "Religious rebels (size "
                , toMessage (roundNum _size)
                , ") with the religion of this province, rise in revolt"
                ]
        MsgRebelsHaveRisen {scriptMessageIcon = _icon, scriptMessageRtype = _rtype}
            -> mconcat
                [ _icon
                , " "
                , _rtype
                , " have risen in revolt"
                ]
        MsgHasDLC {scriptMessageIcon = _icon, scriptMessageDlc = _dlc}
            -> mconcat
                [ "DLC "
                , _icon
                , " "
                , _dlc
                , " is active"
                ]
        MsgProvince {scriptMessageWhere = _where}
            -> mconcat
                [ "Province "
                , _where
                , ":"
                ]
        MsgTechGroup {scriptMessageIcon = _icon, scriptMessageName = _name}
            -> mconcat
                [ "Technology group is "
                , _icon
                , " "
                , _name
                ]
        MsgUnlockCult {scriptMessageIcon = _icon, scriptMessageName = _name}
            -> mconcat
                [ "Unlock the "
                , _icon
                , " "
                , _name
                , " cult"
                ]
        MsgNumOfReligion {scriptMessageIcon = _icon, scriptMessageName = _name, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , toMessage (roundNum _amt)
                , " "
                , plural (round _amt) "province" "provinces"
                , " of "
                , _icon
                , " "
                , _name
                , " religion"
                ]
        MsgSetReligiousSchool {scriptSchoolIcon = _icon, scriptSchoolName = _name, scriptGroupName = _group}
            -> mconcat
                [ "The country begins following the "
                , toMessage _group
                , " "
                , toMessage _icon
                , " "
                , toMessage _name
                , " religious school"
                ]
        MsgReligiousSchool {scriptSchoolIcon = _icon, scriptSchoolName = _name, scriptGroupName = _group}
            -> mconcat
                [ "Has the "
                , toMessage _group
                , " "
                , toMessage _icon
                , " "
                , toMessage _name
                , " religious school"
                ]
        MsgIsStrongestTradePower {scriptMessageWho = _who}
            -> mconcat
                [ _who
                , " is the strongest trade power in this node"
                ]
        MsgAreaIs {scriptMessageWhat = _what}
            -> mconcat
                [ "Is in "
                , _what
                , " area"
                ]
        MsgAreaIsAs {scriptMessageWhat = _what}
            -> mconcat
                [ "Is in the same area as "
                , _what
                ]
        MsgDominantReligion {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "The country's dominant religion is "
                , _icon
                , " "
                , _what
                ]
        MsgDominantReligionAs {scriptMessageWhom = _whom}
            -> mconcat
                [ "The country's dominant religion is that of "
                , _whom
                ]
        MsgEnableReligion {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Enable the "
                , _icon
                , " "
                , _what
                , " religion"
                ]
        MsgHREReligion {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "The Empire of Anbennar's official religion is "
                , _icon
                , " "
                , _what
                ]
        MsgSetHREReligionLocked {scriptMessageYn = _yn}
            -> mconcat
                [ "The Empire of Anbennar's religion "
                , toMessage (ifThenElseT _yn "becomes fixed" "is no longer fixed")
                ]
        MsgSetHREReligion {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "The Empire of Anbennar's official religion becomes "
                , _icon
                , " "
                , _what
                ]
        MsgSetHREHereticReligion {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "The "
                , _icon
                , " "
                , _what
                , " religion is considered heretical within the Empire of Anbennar"
                ]
        MsgSignWestphalia
            -> "From now on, the Emperor, Electors and Princes of the {{icon|hre}} Empire of Anbennar may be of any Christian religion without being considered heretics."
        MsgHRELeaguesEnabled {scriptMessageYn = _yn}
            -> mconcat
                [ "Leagues for the religion of the Empire of Anbennar "
                , toMessage (ifThenElseT _yn "have" "have ''not''")
                , " begun to form"
                ]
        MsgHREReligionLocked {scriptMessageYn = _yn}
            -> mconcat
                [ "The religion of the Empire of Anbennar "
                , toMessage (ifThenElseT _yn "is" "is ''not''")
                , " fixed"
                ]
        MsgHREWestphalia {scriptMessageYn = _yn}
            -> mconcat
                [ "The Peace of Esmaria "
                , toMessage (ifThenElseT _yn "has" "has ''not''")
                , " been signed"
                ]
        MsgIsElector {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " an Elector of the Empire of Anbennar"
                ]
        MsgNoHREReforms
            -> "No reforms have been passed in the Empire of Anbennar"
        MsgHREPassedReform {scriptMessageWhat = _what}
            -> mconcat
                [ "The imperial reform ''"
                , _what
                , "'' has been passed"
                ]
        MsgEnableHRELeagues
            -> "Leagues for the religion of the Empire of Anbennar begin to form."
        MsgIsInLeagueWar {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " involved in a religious league war"
                ]
        MsgIsLeagueEnemy {scriptMessageWhom = _whom}
            -> mconcat
                [ "Is in the opposite religious league to "
                , _whom
                ]
        MsgIsLeagueFriend {scriptMessageWhom = _whom}
            -> mconcat
                [ "Is in the same religious league as "
                , _whom
                ]
        MsgReligionYears {scriptMessageIcon = _icon, scriptMessageName = _name, scriptMessageYears = _years}
            -> mconcat
                [ "The "
                , _icon
                , " "
                , _name
                , " religion has existed for at least "
                , toMessage (plainNum _years)
                , " years"
                ]
        MsgHasIdea {scriptMessageWhat = _what}
            -> mconcat
                [ "Has idea "
                , toMessage (iquotes _what)
                ]
        MsgHasReform {scriptMessageWhat = _what}
            -> mconcat
                [ "Has enacted the "
                , toMessage (iquotes _what)
                , " government reform"
                ]
        MsgHaveHadReform {scriptMessageWhat = _what}
            -> mconcat
                [ "Had the government reform "
                , toMessage (iquotes _what)
                , " before"
                ]
        MsgHasReformTier {scriptMessageAmt = _amt}
            -> mconcat
                [ "Has enacted a tier "
                , toMessage (plainNum _amt)
                , " government reform"
                ]
        MsgHasUnlockedGovernmentReform {scriptMessageWhat = _what}
            -> mconcat
                [ "Has unlocked the government reform "
                , toMessage (iquotes _what)
                ]
        MsgReligionProvinces {scriptMessageIcon = _icon, scriptMessageName = _name, scriptMessageAmt = _amt}
            -> mconcat
                [ "Country has at least "
                , toMessage (roundNum _amt)
                , " "
                , plural (round _amt) "province" "provinces"
                , " following the "
                , _icon
                , " "
                , _name
                , " religion"
                ]
        MsgGoodsProvinces {scriptMessageIcon = _icon, scriptMessageName = _name, scriptMessageAmt = _amt}
            -> mconcat
                [ "Country has at least "
                , toMessage (roundNum _amt)
                , " "
                , plural (round _amt) "province" "provinces"
                , " producing "
                , _icon
                , " "
                , _name
                ]
        MsgHasIdeaFromGroup {scriptMessageIcon = _icon, scriptMessageGroup = _group, scriptMessageName = _name, scriptMessageNum = _num}
            -> mconcat
                [ "Has "
                , _icon
                , " "
                , _group
                , " idea "
                , toMessage (show _num)
                , " "
                , toMessage (iquotes _name)
                ]
        MsgNavyTradition {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Navy tradition is at least "
                , toMessage (plainNum _amt)
                ]
        MsgPrimitives {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " primitive"
                ]
        MsgRulerIsForeigner {scriptMessageYn = _yn}
            -> mconcat
                [ "Ruler is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " foreign"
                ]
        MsgProdEff {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Production efficiency is at least "
                , toMessage (reducedNum (colourPcSign True) _amt)
                ]
        MsgProdEffAs {scriptMessageIcon = _icon, scriptMessageWhom = _whom}
            -> mconcat
                [ _icon
                , " Production efficiency is at least that of "
                , _whom
                ]
        MsgInvestedPapalInfluence {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has invested at least"
                , _icon
                , " "
                , toMessage (roundNum _amt)
                , " Rectorate influence in the election of the next rectorate controller"
                ]
        MsgPapalInfluence {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Rectorate influence is at least "
                , toMessage (roundNum _amt)
                ]
        MsgDevotion {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " {{DLC-only|Devotion}} is at least "
                , toMessage (colourNumSign True _amt)
                ]
        MsgPrestige {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Prestige is at least "
                , toMessage (colourNumSign True _amt)
                ]
        MsgPrestigeAs {scriptMessageIcon = _icon, scriptMessageWhom = _whom}
            -> mconcat
                [ _icon
                , " Prestige is at least that of "
                , _whom
                ]
        MsgHasOpinion {scriptMessageAmt = _amt, scriptMessageWhom = _whom}
            -> mconcat
                [ "Opinion of "
                , _whom
                , " is at least {{icon|opinion}} "
                , toMessage (colourNumSign True _amt)
                ]
        MsgReverseHasOpinion {scriptMessageAmt = _amt, scriptMessageWhom = _whom}
            -> mconcat
                [ _whom
                , " has at least {{icon|opinion}} "
                , toMessage (colourNumSign True _amt)
                , " opinion towards this country"
                ]
        MsgNormalOrHistoricalNations {scriptMessageYn = _yn}
            -> mconcat
                [ toMessage (ifThenElseT _yn "Playing" "''Not'' playing")
                , " with normal or historical nations"
                ]
        MsgIsCustomNation {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " playing a custom nation"
                ]
        MsgReligionEnabled {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "The "
                , _icon
                , " "
                , _what
                , " religion is enabled"
                ]
        MsgCapitalIs {scriptMessageWhat = _what}
            -> mconcat
                [ "Capital is "
                , _what
                ]
        MsgFullIdeaGroup {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Has completed "
                , _icon
                , " "
                , _what
                ]
        MsgTradeIncomePercentage {scriptMessageAmt = _amt}
            -> mconcat
                [ "Trade accounts for at least "
                , toMessage (reducedNum plainPc _amt)
                , " of national income"
                ]
        MsgReligiousUnity {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Religious unity is at least "
                , toMessage (reducedNum (colourPc True) _amt)
                ]
        MsgHasADM {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , _icon
                , " "
                , toMessage (plainNum _amt)
                , " administrative power"
                ]
        MsgHasDIP {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , _icon
                , " "
                , toMessage (plainNum _amt)
                , " diplomatic power"
                ]
        MsgHasMIL {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , _icon
                , " "
                , toMessage (plainNum _amt)
                , " military power"
                ]
        MsgRankDuchy
            -> "Government rank is at least {{icon|duchy}} Duchy"
        MsgRankKingdom
            -> "Government rank is {{icon|kingdom}}Kingdom or {{icon|empire}} Empire<!-- not {{icon|duchy}} Duchy -->"
        MsgRankEmpire
            -> "Government rank is {{icon|empire}} Empire<!-- not {{icon|duchy}} Duchy or {{icon|kingdom}} Kingdom -->"
        MsgSetRankDuchy
            -> "Set government rank to {{icon|duchy}} Duchy"
        MsgSetRankKingdom
            -> "Set government rank to {{icon|kingdom}} Kingdom"
        MsgSetRankEmpire
            -> "Set government rank to {{icon|empire}} Empire"
        MsgOverextension {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Overextension is at least "
                , toMessage (reducedNum plainPc _amt)
                ]
        MsgRandomNewWorld {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " playing with a Random New World"
                ]
        MsgIsColonialNation {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " a colonial nation"
                ]
        MsgIsFormerColonialNation {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " a former colonial nation"
                ]
        MsgIsFreeOrTributaryTrigger {scriptMessageYn = _yn}
            -> toMessage (ifThenElseT _yn "{{is_free_or_tributary_trigger}}" "{{is_subject_other_than_tributary_trigger}}")
        MsgIsNomad {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " a steppe horde"
                ]
        MsgReligionReformed {scriptMessageYn = _yn}
            -> mconcat
                [ "The country's religion has"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " been reformed"
                ]
        MsgChangeTag {scriptMessageWho = _who}
            -> mconcat
                [ "Country becomes "
                , _who
                ]
        MsgSetInEmpire {scriptMessageYn = _yn}
            -> mconcat
                [ "Province "
                , toMessage (ifThenElseT _yn "joins" "leaves")
                , " the Empire of Anbennar"
                ]
        MsgHasSecondaryReligion {scriptMessageYn = _yn}
            -> mconcat
                [ toMessage (ifThenElseT _yn "Has" "Does ''not'' have")
                , " a secondary religion"
                ]
        MsgSecondaryReligion {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Secondary religion is "
                , _icon
                , " "
                , _what
                ]
        MsgIsDefenderOfFaith {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " Defender of the Faith"
                ]
        MsgLegitimacyOrHordeUnity {scriptMessageAmt = _amt}
            -> mconcat
                [ "{{icon|legitimacy}} Legitimacy or {{icon|horde unity}} Horde unity is at least "
                , toMessage (roundNum _amt)
                ]
        MsgCheckVariable {scriptMessageIcon = __icon, scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ "Value of variable "
                , _what
                , " is at least "
                , toMessage (plainNum _amt)
                ]
        MsgChangeTechGroup {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Change technology group to "
                , _icon
                , " "
                , _what
                ]
        MsgChangeUnitType {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Change units to "
                , _icon
                , " "
                , _what
                ]
        MsgNoBaseWeight
            -> "(no base weight?)"
        MsgAIBaseWeight {scriptMessageAmt = _amt}
            -> mconcat
                [ "Base weight: "
                , toMessage (plainNum _amt)
                ]
        MsgAIFactorOneline {scriptMessageFactor = _factor, scriptMessageMultiplier = _multiplier}
            -> mconcat
                [ "Base weight * "
                , toMessage (bold (plainNum _multiplier))
                , " if the following is true: "
                ,_factor
                ]
        MsgAIFactorHeader {scriptMessageMultiplier = _multiplier}
            -> mconcat
                [ "* Base weight * "
                , toMessage (bold (plainNum _multiplier))
                , " if the following are true:"
                ]
        MsgLucky {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " a lucky nation"
                ]
        MsgHasAdvisorLevel {scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageLevel = _level}
            -> mconcat
                [ "Has a level "
                , toMessage (roundNum _level)
                , " "
                , _icon
                , " "
                , _what
                , " advisor"
                ]
        MsgNumRoyalMarriages {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , _icon
                , " "
                , toMessage (roundNum _amt)
                , " royal "
                , plural _amt "marriage" "marriages"
                ]
        MsgIsBankrupt {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " bankrupt"
                ]
        MsgNumColonialSubjects {scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , toMessage (roundNum _amt)
                , " colonial "
                , plural _amt "subject" "subjects"
                ]
        MsgTradeEfficiency {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Trade efficiency is at least "
                , toMessage (reducedNum plainPc _amt)
                ]
        MsgHasWarTaxes {scriptMessageYn = _yn}
            -> mconcat
                [ "Has"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " raised war taxes"
                ]
        MsgRevoltPercentage {scriptMessageAmt = _amt}
            -> mconcat
                [ "At least "
                , toMessage (roundPc _amt)
                , " of provinces are in revolt"
                ]
        MsgHasAnyDisaster {scriptMessageYn = _yn}
            -> mconcat
                [ toMessage (ifThenElseT _yn "Has" "Does ''not'' have")
                , " an ongoing disaster"
                ]
        MsgHasActivePolicy {scriptMessageWhat = _what}
            -> mconcat
                [ "Has enacted the policy "
                , toMessage (iquotes _what)
                ]
        MsgHasDucats {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , _icon
                , " "
                , toMessage (plainNum _amt)
                , " ducats"
                ]
        MsgHasParliament {scriptMessageYn = _yn}
            -> mconcat
                [ "The country "
                , toMessage (ifThenElseT _yn "has" "does ''not'' have")
                , " a parliament"
                ]
        MsgHasReligiousSchool {scriptMessageYn = _yn}
            -> mconcat
                [ "The country "
                , toMessage (ifThenElseT _yn "has" "does ''not'' have")
                , " a Religious School"
                ]
        MsgHasTruce {scriptMessageYn = _yn}
            -> mconcat
                [ "The country "
                , toMessage (ifThenElseT _yn "has" "does ''not'' have")
                , " a truce with another country"
                ]
        MsgNumRebelControlledProvinces {scriptMessageAmt = _amt}
            -> mconcat
                [ "At least "
                , toMessage (plainNum _amt)
                , " "
                , plural _amt "province is" "provinces are"
                , " controlled by rebels"
                ]
        MsgFortLevel {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Fort level is at least "
                , toMessage (roundNum _amt)
                ]
        MsgHasTradeModifier {scriptMessageIcon = __icon, scriptMessageWho = _who, scriptMessageWhat = _what}
            -> mconcat
                [ _who
                , " has trade modifier "
                , toMessage (iquotes _what)
                ]
        MsgIsMonth {scriptMessageWhat = _what}
            -> mconcat
                [ "Month is at least "
                , _what
                ]
        MsgIsSea {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " sea"
                ]
        MsgHasMerchant {scriptMessageWho = _who}
            -> mconcat
                [ _who
                , " has a merchant present"
                ]
        MsgNumColonies {scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , toMessage (roundNum _amt)
                , " "
                , plural _amt "colony" "colonies"
                ]
        MsgChangeCulture {scriptMessageWhat = _what}
            -> mconcat
                [ "Change culture to "
                , _what
                ]
        MsgChangeSameCulture {scriptMessageWhom = _whom}
            -> mconcat
                [ "Change culture to that of "
                , _whom
                ]
        MsgNavalForcelimit {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Naval forcelimit is at least "
                , toMessage (plainNum _amt)
                ]
        MsgBlockade {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Is at least "
                , _icon
                , " "
                , toMessage (plainPc _amt)
                , " blockaded"
                ]
        MsgCreateAlliance {scriptMessageWhom = _whom}
            -> mconcat
                [ "Create alliance with "
                , _whom
                ]
        MsgAddLocalUnrest {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum False _amt)
                , " unrest"
                ]
        MsgGoldIncomePercentage {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "At least "
                , toMessage (reducedNum plainPc _amt)
                , " of the country's income is from "
                , _icon
                , " Gold"
                ]
        MsgIsTribal {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " tribal"
                ]
        MsgSetCapital {scriptMessageWhat = _what}
            -> mconcat
                [ "Change capital to "
                , _what
                ]
        MsgChangePrimaryCulture {scriptMessageWhat = _what}
            -> mconcat
                [ "Change primary culture to "
                , _what
                ]
        MsgColonialRegion {scriptMessageWhere = _where}
            -> mconcat
                [ "Is in colonial region "
                , _where
                ]
        MsgJuniorUnionWith {scriptMessageWhom = _whom}
            -> mconcat
                [ "Is the junior partner in a personal union with "
                , _whom
                ]
        MsgSeniorUnionWith {scriptMessageWhom = _whom}
            -> mconcat
                [ "Is the senior partner in a personal union with "
                , _whom
                ]
        MsgVassalOf {scriptMessageWhom = _whom}
            -> mconcat
                [ "Is a vassal of "
                , _whom
                ]
        MsgOverlordOf {scriptMessageWhom = _whom}
            -> mconcat
                [ "Is the overlord of "
                , _whom
                ]
        MsgChangeProvinceName {scriptMessageWhat = _what}
            -> mconcat
                [ "Rename province to "
                , _what
                ]
        MsgRenameCapital {scriptMessageWhat = _what}
            -> mconcat
                [ "Rename provincial capital to "
                , _what
                ]
        MsgOwnsOrVassal {scriptMessageWhere = _where}
            -> mconcat
                [ "Owns "
                , _where
                , " or is overlord of its owner"
                ]
        MsgIsInColonialRange {scriptMessageWhom = _whom}
            -> mconcat
                [ "Is within colonial range of "
                , _whom
                ]
        MsgConstructingGreatProject {scriptMessageWhat = _what}
            -> mconcat
                [ "Is constructing the "
                , _what
                ]
        MsgConstructing {scriptMessageWhat = _what}
            -> mconcat
                [ "Is constructing a "
                , _what
                ]
        MsgStartConstructingGreatProject {scriptMessageWhom = _what}
            -> mconcat
                [ "Begin constructing the [["
                , _what
                , "]]"
                ]
        MsgCancelConstruction
            -> "Cancel construction"
        MsgYearsOfIncome {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Treasury contains at least "
                , _icon
                , " "
                , toMessage (plainNum _amt)
                , " "
                , plural _amt "year's" "years'"
                , " worth of income"
                ]
        MsgLibertyDesire {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Liberty desire is at least "
                , toMessage (colourPc False _amt)
                ]
        MsgGainLibertyDesire {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourPc False _amt)
                , " liberty desire"
                ]
        MsgColonialParent
            -> "This country's colonial parent:"
        MsgAlways {scriptMessageYn = _yn}
            -> toMessage (ifThenElseT _yn "{{icon|yes}} Always" "{{icon|no}} Never")
        MsgCapitalCultureDominant
            -> "The capital's {{icon|culture}} culture is dominant in the country"
        MsgNumUnions {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , _icon
                , " "
                , toMessage (roundNum _amt)
                , " personal "
                , plural _amt "union" "unions"
                ]
        MsgNumVassals {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , _icon
                , " "
                , toMessage (roundNum _amt)
                , " "
                , plural _amt "vassal" "vassals"
                ]
        MsgFreeVassal {scriptMessageWhom = _whom}
            -> mconcat
                [ "Release vassal "
                , _whom
                , " as an independent country"
                ]
        MsgHasMissionary {scriptMessageYn = _yn}
            -> mconcat
                [ toMessage (ifThenElseT _yn "Has" "Does ''not'' have")
                , " an active missionary"
                ]
        MsgNavyPercentage {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Navy is at least "
                , _icon
                , " "
                , toMessage (reducedNum plainPc _amt)
                , " of force limit"
                ]
        MsgWasForceConverted {scriptMessageYn = _yn}
            -> mconcat
                [ "Was"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " force converted"
                ]
        MsgFemaleEmperorAllowed {scriptMessageYn = _yn}
            -> mconcat
                [ "The Emperor may"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " be female"
                ]
        MsgImperialAuthority {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Imperial Authority is at least "
                , toMessage (roundNum _amt)
                ]
        MsgImperialMandate {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ " Has at least "
                , _icon
                , " "
                , toMessage (plainNum _amt)
                , " mandate"
                ]
        MsgHasFemaleHeir {scriptMessageYn = _yn}
            -> mconcat
                [ toMessage (ifThenElseT _yn "Has" "Does ''not'' have")
                , " a female heir"
                ]
        MsgHasForeignHeir {scriptMessageYn = _yn}
            -> mconcat
                [ toMessage (ifThenElseT _yn "Has" "Does ''not'' have")
                , " a foreign heir"
                ]
        MsgPiety {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Piety is at least "
                , toMessage (reducedNum (colourNumSign True) _amt)
                ]
        MsgIsInTutorial {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " in the tutorial"
                ]
        MsgGainFervor {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , " fervor"
                ]
        MsgGainChurchPower {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , " church power"
                ]
        MsgTimeToFabricateClaims {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Time to fabricate claims"
                ]
        MsgMoraleOfArmies {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Morale of armies is at least "
                , toMessage (plainNum _amt)
                ]
        MsgMoraleOfArmiesAs {scriptMessageIcon = _icon, scriptMessageWhom = _whom}
            -> mconcat
                [ _icon
                , " Morale of armies is at least that of "
                , _whom
                ]
        MsgAvailableMercs {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Available mercenaries"
                ]
        MsgGainNavalLeaderSiege {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign True _amt)
                , " Naval leader siege"
                ]
        MsgAccCultureThreshold {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Accepted culture threshold"
                ]
        MsgBetterRelationsOverTime {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Better relations over time"
                ]
        MsgMaySabotageReputation
            -> "{{icon|may sabotage reputation|28px}} May [[sabotage reputation]]"
        MsgMayStudyTech
            -> "{{icon|may study technology|28px}} May [[study technology]]"
        MsgMaySowDiscontent
            -> "{{icon|may sow discontent|28px}} May [[sow discontent]]"
        MsgMayAgitateForLiberty
            -> "May [[agitate for liberty]]"
        MsgMayInfiltrateAdministration
            -> "{{icon|may infiltrate administration|28px}} May [[infiltrate administration]]"
        MsgGainLandLeaderSiege {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (colourNumSign True _amt)
                , " Land leader siege"
                ]
        MsgTradeRange {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Trade range"
                ]
        MsgTextIs {scriptMessageWhat = _what}
            -> mconcat
                [ "Text is: ''"
                , _what
                , "''"
                ]
        MsgAnyOwnedPlanet
            -> "Any owned planet:"
        MsgAnyOwnedShip
            -> "Any owned ship:"
        MsgAnyPop
            -> "Any pop:"
        MsgEveryOwnedPlanet
            -> "Every owned planet:"
        MsgEveryOwnedPop
            -> "Every pop on owned planets:"
        MsgRandomOwnedShip
            -> "One random owned ship:"
        MsgRandomPop
            -> "One random pop:"
        MsgRandomSystem
            -> "One random system:"
        MsgRandomTile
            -> "One random tile:"
        MsgGainTrait {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Gain trait "
                , _icon
                , " "
                , _what
                ]
        MsgAbsolutism {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Absolutism is at least "
                , toMessage (colourNum True _amt)
                ]
        MsgGainAbsolutism {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , " absolutism"
                ]
        MsgCurrentAge {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "It is currently the "
                , _icon
                , " "
                , _what
                ]
        MsgAcceptedCulture {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ _icon
                , " "
                , _what
                , " is accepted culture"
                ]
        MsgCalcTrueIf {scriptMessageAmt = _amt}
            -> mconcat
                [ "At least "
                , toMessage (plainNum _amt)
                , " of the following are true:"
                ]
        MsgGainConstructionProgress {scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , toMessage (colourNum True _amt)
                , " progress towards completing the great project"
                ]
        MsgGainHarmonizationProgress {scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , toMessage (colourNum True _amt)
                , " progress towards harmonization"
                ]
        MsgGainHeirSupport {scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , toMessage (colourNum True _amt)
                , " support for our heir"
                ]
        MsgGainYearsOfSeparatism {scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , toMessage (colourNum False _amt)
                , plural _amt " year" " years"
                , " of separatism"
                ]
        MsgAuth {scriptMessageAmt = _amt}
            -> mconcat
                [ "Authority is at least "
                , toMessage (roundNum _amt)
                ]
        MsgGainColonyPopulation {scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , toMessage (colourNum True _amt)
                , " population"
                ]
        MsgGainCorruption {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum False _amt)
                , " corruption"
                ]
        MsgGainDevastation {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum False _amt)
                , " devastation"
                ]
        MsgGainHarmony {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , " harmony"
                ]
        MsgGainMilitarization {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , " {{DLC-only|militarization of state}}"
                ]
        MsgGainProsperity {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , " progress towards prosperity"
                ]
        MsgGainSplendor {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , " splendor"
                ]
        MsgAddTariffValue {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourPc True _amt)
                , " tariffs"
                ]
        MsgGainYearlySailors {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , plural _amt " year's" " years'"
                , " worth of sailors"
                ]
        MsgAdminEfficiency {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Administrative efficiency is at least "
                , toMessage (plainPc _amt)
                ]
        MsgDisasterMod
            -> "disaster modifier"
        MsgAddClaimFor {scriptMessageWho = _who}
            -> mconcat
                [ _who
                , " gains a claim on this province"
                ]
        MsgAddClaimOn {scriptMessageWhere = _where}
            -> mconcat
                [ "Gain a claim on "
                , _where
                ]
        MsgAddAcceptedCulture {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ _icon
                , " Gain "
                , _what
                , " as an accepted culture"
                ]
        MsgRemoveAcceptedCulture {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ _icon
                , " Remove "
                , _what
                , " as an accepted culture"
                ]
        MsgAddAcceptedCultureOrDipPower {scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageFree = _free, scriptMessageAmt = _value}
            -> mconcat
                [ if _free then "Gain " else ""
                , if _free then _icon else ""
                , if _free then " {{green|+1}} Max promoted culture until "  else ""
                , if _free then toMessage (iquotes _what) else ""
                , if _free then " is demoted. " else ""
                , _icon
                , " Gain "
                , toMessage (iquotes _what)
                , " as an accepted culture."
                , if _value > 0 then " If the culture is already an accepted culture, or if there are not enough slots, gain " else ""
                , if _value > 0 then toMessage (colourNum True _value) else ""
                , if _value > 0 then " diplomatic power instead." else ""
                ]
        MsgAddBuilding {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Build "
                , _icon
                , " "
                , _what
                ]
        MsgAddHarmonizedReligion {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Gain "
                , _icon
                , " "
                , _what
                , " as a harmonized religion"
                ]
        MsgAddHeirPersonality {scriptMessageAncestor = _ancestor, scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Heir gains the personality trait "
                , _icon
                , " "
                , _what
                , ancestorText _ancestor
                ]
        MsgAddConsortPersonality {scriptMessageAncestor = _ancestor, scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Consort gains the personality trait "
                , _icon
                , " "
                , _what
                , ancestorText _ancestor
                ]
        MsgAddRulerPersonality {scriptMessageAncestor = _ancestor, scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Ruler gains the personality trait "
                , _icon
                , " "
                , _what
                , ancestorText _ancestor
                ]
        MsgRemoveRulerPersonality {scriptMessageAncestor = _ancestor, scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Ruler loses the personality trait "
                , _icon
                , " "
                , _what
                , ancestorText _ancestor
                ]
        MsgRulerHasPersonality {scriptMessageAncestor = _ancestor, scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Ruler has the personality trait "
                , _icon
                , " "
                , _what
                , ancestorText _ancestor
                ]
        MsgHeirHasPersonality {scriptMessageAncestor = _ancestor, scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Heir has the personality trait "
                , _icon
                , " "
                , _what
                , ancestorText _ancestor
                ]
        MsgConsortHasPersonality { scriptMessageAncestor = _ancestor, scriptMessageIcon = _icon, scriptMessageWhat = _what }
            -> mconcat
                [ "Consort has the personality trait "
                , _icon
                , " "
                , _what
                , ancestorText _ancestor
                ]
        MsgAddCenterOfReformation {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Create a "
                , _icon
                , " "
                , _what
                , " Center of Reformation"
                ]
        MsgRemoveCenterOfReformation {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Removes the "
                , _icon
                , " "
                , _what
                , " Center of Reformation from this province"
                ]
        MsgAddTruceWith {scriptMessageWho = _who}
            -> mconcat
                [ "Create a truce with "
                , _who
                ]
        MsgGainSailors {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , " sailors"
                ]
        MsgGainSailorsFrac {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " sailors equal to "
                , toMessage (reducedNum (colourPc True) _amt)
                , " of maximum"
                ]
        MsgArmyProfessionalism {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Army professionalism is at least "
                , toMessage (reducedNum plainPc _amt)
                ]
        MsgArmyProfessionalismAs {scriptMessageIcon = _icon, scriptMessageWhom = _whom}
            -> mconcat
                [ _icon
                , " Army professionalism is at least that of "
                , _whom
                ]
        MsgGainArmyProfessionalism {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (reducedNum (colourPc True) _amt)
                , " {{DLC-only|army professionalism}}"
                ]
        MsgSailors {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , _icon
                , " "
                , toMessage (plainNum _amt)
                , " sailors"
                ]
        MsgSailorsPercentage {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Sailors reserves are at least "
                , toMessage (reducedNum (colourPc True) _amt)
                , " of maximum"
                ]
        MsgNationalSailorsMod {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPc True) _amt)
                , " National sailors modifier"
                ]
        MsgCorruption {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Corruption is at least "
                , toMessage (plainNum _amt)
                ]
        MsgAddIncidentVariableValue {scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ "The country moves towards the "
                , ifThenElse (_amt < 0) "Open" "Isolationist"
                , " end of the "
                , toMessage (quotes _what)
                , " incident by "
                , toMessage (plainNum (abs _amt))
                ]
        MsgIncidentVariableValue {scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ "Isolationist value of the "
                , toMessage (quotes _what)
                , " incident is at least "
                , toMessage (plainNum (abs _amt))
                ]
        MsgAddInstitutionEmbracement {scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , toMessage (colourPc True _amt)
                , " progress towards the "
                , _icon
                , " "
                , _what
                , " institution"
                ]
        MsgAddIsolationism {scriptMessageAmt = _amt}
            -> mconcat
                [ "Become "
                , toMessage (plainNum _amt)
                , plural _amt " step" " steps"
                , " more "
                , ifThenElse (_amt < 0) "Open" "Isolationist"
                ]
        MsgGainMandate {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , toMessage (colourPc True _amt)
                , " Mandate"
                ]
        MsgGainMeritocracy {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , toMessage (colourNum True _amt)
                , " hedonism"
                ]
        MsgMutualOpinion {scriptMessageModid = _modid, scriptMessageWhat = _what, scriptMessageWhom = _whom}
            -> mconcat
                [ "This country and "
                , _whom
                , " gain opinion modifier {{opinion_modifier|"
                , _modid
                , "}} towards each other"
                ]
        MsgMutualOpinionDur {scriptMessageModid = _modid, scriptMessageWhat = _what, scriptMessageWhom = _whom, scriptMessageDays = _days}
            -> mconcat
                [ "This country and "
                , _whom
                , " gain opinion modifier {{opinion_modifier|"
                , _modid
                , "}} towards each other for "
                , toMessage (formatDays _days)
                ]
        MsgAddNextInstitutionEmbracement {scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , toMessage (colourNum True _amt)
                , " progress towards the next non-present institution"
                ]
        MsgAddSpyNetworkFrom {scriptMessageIcon = __icon, scriptMessageWhom = _whom, scriptMessageAmt = _amt}
            -> mconcat
                [ _whom
                , " "
                , gainsOrLoses _amt
                , " "
                , toMessage (colourNum True _amt)
                , " spy network strength"
                ]
        MsgAddSpyNetworkIn {scriptMessageIcon = __icon, scriptMessageWhom = _whom, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , toMessage (colourNum True _amt)
                , " spy network strength in "
                , _whom
                ]
        MsgEventTarget {scriptMessageTag = _tag}
            -> mconcat
                [ "Event target <tt>"
                , _tag
                , "</tt>:"
                ]
        MsgEventTargetVar {scriptMessageTag = _tag}
            -> mconcat
                [ "event target <tt>"
                , _tag
                , "</tt>"
                ]
        MsgGenericTemplate {scriptMessageTemplate = _template}
            -> "{{" <> _template <> "}}"
        MsgGenericScriptedEffectTemplate {scriptMessageTemplate = _template, scriptMessageNum = _indentation}
            -> mconcat
            [
                 "{{SEffect|"
                 , _template
                 , "|"
                 , toMessage (show _indentation)
                 , "}}"

            ]
        MsgGenericText {text = _text}
            -> _text
        MsgGenericTextWithIcon {scriptMessageIcon = _icon, text = _text}
            -> mconcat
                [ _icon
                , " "
                , _text
                ]
        MsgGenericModifier {scriptMessageIcon = _icon, scriptMessageAmt = _amt, locModifierName = _locModifierName, amtTransformer = _amtTransformer}
            -> mconcat
                [ _icon
                , " "
                , toMessage (_amtTransformer _amt)
                , " "
                , _locModifierName
                ]
        MsgGenericModifierDlcOnly {scriptMessageIcon = _icon, scriptMessageAmt = _amt, locModifierName = _locModifierName, amtTransformer = _amtTransformer}
            -> mconcat
                [ _icon
                , " {{DLC-only|"
                , _locModifierName
                , "|"
                , toMessage (_amtTransformer _amt)
                , "}}"
                ]
        MsgGenericAtLeast {scriptMessageIcon = _icon, scriptMessageAmt = _amt, scriptMessageWhat = _what, amtTransformer = _amtTransformer}
            -> mconcat
                [ "Has at least "
                , if T.null _icon then "" else T.append _icon " "
                , toMessage (_amtTransformer _amt)
                , " "
                , _what
                ]
        MsgGenericAtLeastAs {scriptMessageWhat = _what, scriptMessageIcon = _icon, scriptMessageWhom = _whom}
            -> mconcat
                [ "Has at least as much"
                , if T.null _icon then "" else T.append _icon " "
                , " "
                , _what
                , " as "
                , _whom
                ]
        MsgGenericIsAtLeast {scriptMessageIcon = _icon, scriptMessageAmt = _amt, scriptMessageWhat = _what, amtTransformer = _amtTransformer}
            -> mconcat
                [if T.null _icon then "" else T.append _icon " "
                , _what
                , " is at least "
                , toMessage (_amtTransformer _amt)
                ]
        MsgAddStabilityOrAdm
            -> "{{add stability or adm power}}"
        MsgAddTrust {scriptMessageWhom = _whom, scriptMessageAmt = _amt}
            -> mconcat
                [ "Gain "
                , toMessage (colourNum True _amt)
                , " trust towards "
                , toMessage _whom
                ]
        MsgAddTrustMutual {scriptMessageWhom = _whom, scriptMessageAmt = _amt}
            -> mconcat
                [ "This country and "
                , toMessage _whom
                , " gain "
                , toMessage (colourNum True _amt)
                , " trust towards each other"
                ]
        MsgSaveEventTargetAs {scriptMessageName = _name}
            -> mconcat
                [ "Save as event target named <tt>"
                , _name
                , "</tt>"
                ]
        MsgSaveGlobalEventTargetAs {scriptMessageName = _name}
            -> mconcat
                [ "Save as global event target named <tt>"
                , _name
                , "</tt>"
                ]
        MsgClearGlobalEventTarget {scriptMessageName = _name}
            -> mconcat
                [ "Clear global event target <tt>"
                , _name
                , "</tt>"
                ]
        MsgHasSavedEventTarget {scriptMessageName = _name}
            -> mconcat
                [ "An event target named <tt>"
                , _name
                , "</tt> has been saved"
                ]
        MsgHasSavedGlobalEventTarget {scriptMessageName = _name}
            -> mconcat
                [ "A global event target named <tt>"
                , _name
                , "</tt> has been saved"
                ]
        MsgRemoveClaim {scriptMessageWho = _who}
            -> mconcat
                [ _who
                , " loses their claim on this province"
                ]
        MsgTribalAllegiance {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , "{{DLC-only|Tribal allegiance}} is at least "
                , toMessage (plainNum _amt)
                ]
        MsgGainTribalAllegiance {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , " {{DLC-only|tribal allegiance}}"
                ]
        MsgArmySizePc {scriptMessageAmt = _amt}
            -> mconcat
                [ "Army size is at least "
                , toMessage (reducedNum plainPc _amt)
                , " of force limit"
                ]
        MsgBuildInfantry {scriptMessageIcon = _icon, scriptMessageAmt = _amt, scriptMessageSpeed = _speed, scriptMessageCost = _cost}
            -> mconcat
                [ "Build "
                , _icon
                , " "
                , toMessage (plainNum _amt)
                , " infantry "
                , plural _amt "regiment" "regiments"
                , " at "
                , toMessage (reducedNum plainPc _cost)
                , " of normal cost, taking "
                , toMessage (reducedNum plainPc _speed)
                , " of normal time"
                ]
        MsgBuildCavalry {scriptMessageIcon = _icon, scriptMessageAmt = _amt, scriptMessageSpeed = _speed, scriptMessageCost = _cost}
            -> mconcat
                [ "Build "
                , _icon
                , " "
                , toMessage (plainNum _amt)
                , " cavalry "
                , plural _amt "regiment" "regiments"
                , " at "
                , toMessage (reducedNum plainPc _cost)
                , " of normal cost, taking "
                , toMessage (reducedNum plainPc _speed)
                , " of normal time"
                ]
        MsgBuildArtillery {scriptMessageIcon = _icon, scriptMessageAmt = _amt, scriptMessageSpeed = _speed, scriptMessageCost = _cost}
            -> mconcat
                [ "Build "
                , _icon
                , " "
                , toMessage (plainNum _amt)
                , " artillery "
                , plural _amt "regiment" "regiments"
                , " at "
                , toMessage (reducedNum plainPc _cost)
                , " of normal cost, taking "
                , toMessage (reducedNum plainPc _speed)
                , " of normal time"
                ]
        MsgBuildHeavyShips {scriptMessageIcon = _icon, scriptMessageAmt = _amt, scriptMessageSpeed = _speed, scriptMessageCost = _cost}
            -> mconcat
                [ "Build "
                , _icon
                , " "
                , toMessage (plainNum _amt)
                , " heavy "
                , plural _amt "ship" "ships"
                , " at "
                , toMessage (reducedNum plainPc _cost)
                , " of normal cost, taking "
                , toMessage (reducedNum plainPc _speed)
                , " of normal time"
                ]
        MsgBuildLightShips {scriptMessageIcon = _icon, scriptMessageAmt = _amt, scriptMessageSpeed = _speed, scriptMessageCost = _cost}
            -> mconcat
                [ "Build "
                , _icon
                , " "
                , toMessage (plainNum _amt)
                , " light "
                , plural _amt "ship" "ships"
                , " at "
                , toMessage (reducedNum plainPc _cost)
                , " of normal cost, taking "
                , toMessage (reducedNum plainPc _speed)
                , " of normal time"
                ]
        MsgBuildGalleys {scriptMessageIcon = _icon, scriptMessageAmt = _amt, scriptMessageSpeed = _speed, scriptMessageCost = _cost}
            -> mconcat
                [ "Build "
                , _icon
                , " "
                , toMessage (plainNum _amt)
                , plural _amt " galley" " galleys"
                , " at "
                , toMessage (reducedNum plainPc _cost)
                , " of normal cost, taking "
                , toMessage (reducedNum plainPc _speed)
                , " of normal time"
                ]
        MsgBuildTransports {scriptMessageIcon = _icon, scriptMessageAmt = _amt, scriptMessageSpeed = _speed, scriptMessageCost = _cost}
            -> mconcat
                [ "Build "
                , _icon
                , " "
                , toMessage (plainNum _amt)
                , plural _amt " transport" " transports"
                , " at "
                , toMessage (reducedNum plainPc _cost)
                , " of normal cost, taking "
                , toMessage (reducedNum plainPc _speed)
                , " of normal time"
                ]
        MsgMeritocracy {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Hedonism is at least "
                , toMessage (roundNum _amt)
                ]
        MsgCheckIfNonStateAdvisorEffect
            -> "Randomly set a country flag to determine the religion (state, secondary, tertiary, or Jewish) of an advisor based on location of the capital and state religion group"
        MsgAddGovernmentReform { scriptMessageWhat = _what }
            -> mconcat
                ["Enact government reform "
                ,_what
                ]
        MsgRemoveGovernmentReform { scriptMessageWhat = _what }
            -> mconcat
                ["Remove government reform "
                ,_what
                ]
        MsgAddCOTLevel { scriptMessageIcon = _icon, scriptMessageAmt = _amt }
            -> mconcat
                ["Increase "
                ,_icon
                ," Center of Trade level by "
                ,toMessage (plainNum _amt)
                ]
        MsgRulerAge {scriptMessageAmt = _amt}
            -> mconcat
                [ "Ruler is at least "
                , toMessage (plainNum _amt)
                , " years old"
                ]
        MsgEmployedAdvisor
            -> "Employed advisor"
        MsgEmployedAdvisorWhere
            -> "Employed advisor where:"
        MsgEmployedAdvisorAdmin
            -> "Is administrative"
        MsgEmployedAdvisorDiplo
            -> "Is diplomatic"
        MsgEmployedAdvisorMiltary
            -> "Is military"
        MsgEmployedAdvisorType {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Is "
                , _icon
                , " "
                , _what
                ]
        MsgEmployedAdvisorMale {scriptMessageMale = _yn}
            -> mconcat
                [ "Is "
                , toMessage (ifThenElseT _yn "male" "female")
                ]
        MsgNumOwnedProvincesWith {scriptMessageAmt = _amt}
            -> mconcat
                [ "At least "
                , toMessage (plainNum _amt)
                , " owned provinces with:"
                ]
        MsgNumOwnedProvincesOrNonSovereignSubjectsWith {scriptMessageAmt = _amt}
            -> mconcat
                [ "At least "
                , toMessage (plainNum _amt)
                , " provinces owned by the country or non-tributary subjects with:"
                ]
        MsgNumOwnedProvincesOrSubjectsWith {scriptMessageAmt = _amt}
            -> mconcat
                [ "At least "
                , toMessage (plainNum _amt)
                , " provinces owned by the country or its subjects with:"
                ]
        MsgNumOwnedStatesOrNonSovereignSubjectsWith {scriptMessageAmt = _amt}
            -> mconcat
                [ "At least "
                , toMessage (plainNum _amt)
                , " states owned by the country or non-tributary subjects with:"
                ]
        MsgSetVariable { scriptMessageVar1 = _var1, scriptMessageVar2 = _var2}
            -> mconcat
                [ "Set variable "
                , _var1
                , " to the value of "
                , _var2
                ]
        MsgSetVariableVal { scriptMessageVar = _var, scriptMessageAmt = _amt}
            -> mconcat
                [ "Set variable "
                , _var
                , " to "
                , toMessage (Doc.ppFloat _amt)
                ]
        MsgAddVariable { scriptMessageVar1 = _var1, scriptMessageVar2 = _var2}
            -> mconcat
                [ "Increase variable "
                , _var1
                , " by the value of "
                , _var2
                ]
        MsgAddVariableVal { scriptMessageVar = _var, scriptMessageAmt = _amt}
            -> mconcat
                [ toMessage (ifThenElseT (_amt < 0) "Decrease" "Increase")
                , " variable "
                , _var
                , " by "
                , toMessage (plainNum (if _amt < 0 then -_amt else _amt))
                ]
        MsgSubVariable { scriptMessageVar1 = _var1, scriptMessageVar2 = _var2}
            -> mconcat
                [ "Decrease variable "
                , _var1
                , " by the value of "
                , _var2
                ]
        MsgSubVariableVal { scriptMessageVar = _var, scriptMessageAmt = _amt}
            -> mconcat
                [ "Decrease variable "
                , _var
                , " by "
                , toMessage (plainNum _amt)
                ]
        MsgMulVariable { scriptMessageVar1 = _var1, scriptMessageVar2 = _var2}
            -> mconcat
                [ "Multiply variable "
                , _var1
                , " by the value of "
                , _var2
                ]
        MsgMulVariableVal { scriptMessageVar = _var, scriptMessageAmt = _amt}
            -> mconcat
                [ "Multiply variable "
                , _var
                , " by "
                , toMessage (plainNum _amt)
                ]
        MsgDivVariable { scriptMessageVar1 = _var1, scriptMessageVar2 = _var2}
            -> mconcat
                [ "Divide variable "
                , _var1
                , " by the value of "
                , _var2
                ]
        MsgDivVariableVal { scriptMessageVar = _var, scriptMessageAmt = _amt}
            -> mconcat
                [ "Divide variable "
                , _var
                , " by "
                , toMessage (plainNum _amt)
                ]
        MsgChkVariable { scriptMessageVar1 = _var1, scriptMessageVar2 = _var2}
            -> mconcat
                [ "Value of variable "
                , _var1
                , " is at least that of "
                , _var2
                ]
        MsgChkVariableVal { scriptMessageVar = _var, scriptMessageAmt = _amt}
            -> mconcat
                [ "Value of variable "
                , _var
                , " is at least "
                , toMessage (plainNum _amt)
                ]
        MsgEquVariable { scriptMessageVar1 = _var1, scriptMessageVar2 = _var2}
            -> mconcat
                [ "Value of variable "
                , _var1
                , " is equal to that of "
                , _var2
                ]
        MsgEquVariableVal { scriptMessageVar = _var, scriptMessageAmt = _amt}
            -> mconcat
                [ "Value of variable "
                , _var
                , " equal to "
                , toMessage (plainNum _amt)
                ]
        MsgIsColonialNationOf { scriptMessageWho = _who }
            -> mconcat
                [ "Is colonial nation of "
                , _who
                ]
        MsgHasInstitution { scriptMessageIcon = _icon, scriptMessageWhat = _what }
            -> mconcat
                [ "The country has embraced the "
                , _icon
                , " "
                , _what
                , " institution"
                ]
        MsgWasNeverEndGameTag { scriptMessageYn = _yn }
            -> mconcat
                [ "The country "
                , toMessage (ifThenElseT _yn "was never" "is")
                , " an [[end-game tag]]"
                ]
        MsgHasCompletedAllReforms { scriptMessageYn = _yn }
            -> mconcat -- This is usually used in the context of limit = { not = { ... } } to limit giving reforming progress to
                       -- cases where the Emperor DLC is active AND the highest tier gov. reform hasn't been enacted
                [ "The country has"
                , toMessage (ifThenElseT _yn "" " not")
                , " enacted one of the highest tier [[government reform]]s and DLC {{icon|emp|28px}} Emperor is not active"
                ]
        MsgHasCulturalUnion { scriptMessageYn = _yn }
            -> mconcat
                [ "The country "
                , toMessage (ifThenElseT _yn "has" "does not have")
                , " a [[cultural union]]"
                ]
        MsgHasFinalTierReform { scriptMessageYn = _yn }
            -> mconcat
                [ "The country has"
                , toMessage (ifThenElseT _yn "" " not")
                , " enacted one of the highest tier [[government reform]]s"
                ]
        MsgPctBackingParliamentIssue { scriptMessageAmt = _amt }
            -> mconcat
                [ "At least "
                , toMessage (reducedNum plainPc _amt)
                , " of the seats in [[parliament]] are backing the current issue"
                ]
        MsgIsBackingCurrentIssue { scriptMessageYn = _yn }
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " backing the current issue in [[parliament]]"
                ]
        MsgHasActiveDebate { scriptMessageYn = _yn }
            -> mconcat
                [ toMessage (ifThenElseT _yn "Has" "Doesn't have")
                , " an ongoing [[debate]] in [[parliament]]"
                ]
        MsgCurrentDebate { scriptMessageWhat = _what }
            -> mconcat
                [ "Current debate in [[parliament]] is "
                , _what
                ]
        MsgBackCurrentIssue { scriptMessageYn = _yn }
            -> mconcat
                [ "Will"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " back the current issue in [[parliament]]"
                ]
        MsgSetSeatInParliament { scriptMessageYn = _yn }
            -> mconcat
                [ toMessage (ifThenElseT _yn "Add" "Remove")
                , " seat "
                , toMessage (ifThenElseT _yn "to" "from")
                , " [[parliament]]"
                ]
        MsgHasCustomIdeas { scriptMessageYn = _yn}
            -> mconcat
                [ "The country "
                , toMessage (ifThenElseT _yn "has" "does ''not'' have")
                , " [[custom ideas]]"
                ]
        MsgIsProvinceEmpty { scriptMessageYn = _yn }
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " open for colonization"
                ]
        MsgIsEmperorOfChina { scriptMessageYn = _yn }
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " the [[Steward of the Sorrow]]"
                ]
        MsgHasStatesGeneralMechanic { scriptMessageYn = _yn }
            -> mconcat
                [ "Government "
                , toMessage (ifThenElseT _yn "uses" "does ''not'' use")
                , " [[States General]] mechanic"
                ]
        MsgIsInWar
            -> "Is in a war where:"
        MsgDurationAtLeast { scriptMessageDays = _days }
            -> mconcat
                [ "Duration is at least "
                , toMessage (formatDays _days)
                ]
        MsgIsAttackerWarLeader { scriptMessageWho = _who }
            -> mconcat
                [ _who
                , " is the war leader on the attacking side"
                ]
        MsgIsDefenderWarLeader { scriptMessageWho = _who }
            -> mconcat
                [ _who
                , " is the war leader on the defending side"
                ]
        MsgIsAttacker { scriptMessageWho = _who }
            -> mconcat
                [ _who
                , " is on the attacking side"
                ]
        MsgIsDefender { scriptMessageWho = _who }
            -> mconcat
                [ _who
                , " is on the defending side"
                ]
        MsgCasusBelliIs { scriptMessageCb = _cb }
            -> mconcat
                [ "The [[Casus Belli]] is "
                , _cb
                ]
        MsgGainNewMissions
            -> "Gets new {{icon|mission|21px}} missions"
        MsgIsRevolutionary { scriptMessageYn = _yn }
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " revolutionary"
                ]
        MsgIsRevolutionaryRepublic { scriptMessageYn = _yn }
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " a revolutionary republic"
                ]
        MsgHasRevolutionInProvince { scriptMessageYn = _yn }
            -> mconcat
                [ "Revolution is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " present"
                ]
        MsgRevolutionTargetExists { scriptMessageYn = _yn }
            -> mconcat
                [ "There is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " a {{icon|revolution target}} revolution target"
                ]
        MsgIsCenterOfRevolution { scriptMessageYn = _yn }
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " the center of revolution"
                ]
        MsgRegionProvinceScope
            -> "At least one province in the region"
        MsgRegionProvinceScopeAll
            -> "All provinces in the region"
        MsgSetRevolutionProvince { scriptMessageYn = _yn }
            -> mconcat
                [ toMessage (ifThenElseT _yn "Add" "Remove")
                , " revolution "
                , toMessage (ifThenElseT _yn "to" "from")
                , " province"
                ]
        MsgGovernmentHasAttribute { scriptMessageWhat = _what }
            -> mconcat
                [ "Has government type where: "
                , _what
                ]
        MsgReligiousModifier
            -> "These effects are lost if the state religion changes"
        MsgIsEnemy { scriptMessageWho = _who }
            -> mconcat
                [ "Is rivaled by "
                , _who
                ]
        MsgHasSpyNetworkFrom {scriptMessageIcon = _icon, scriptMessageWho = _who, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , _who
                , " has at least "
                , toMessage (plainNum _amt)
                , " spy network"
                ]
        MsgHasSpyNetworkIn {scriptMessageIcon = _icon, scriptMessageWho = _who, scriptMessageAmt = _amt}
            -> mconcat
                [ "The country has at least "
                , toMessage (plainNum _amt)
                , " spy network in "
                , _who
                ]
        MsgDefineGeneral { scriptMessageIcon = _icon }
            -> mconcat
                [ "Gain a new "
                , _icon
                , " general with:"
                ]
        MsgDefineHeirToGeneral { scriptMessageIcon = _icon }
            -> mconcat
                [ "Make heir a "
                , _icon
                , " general with:"
                ]
        MsgDefineRulerToGeneral { scriptMessageIcon = _icon }
            -> mconcat
                [ "Make ruler a "
                , _icon
                , " general with:"
                ]
        MsgDefineConquistador { scriptMessageIcon = _icon }
            -> mconcat
                [ "Gain a new "
                , _icon
                , " conquistador with:"
                ]
        MsgDefineAdmiral { scriptMessageIcon = _icon }
            -> mconcat
                [ "Gain a new "
                , _icon
                , " admiral with:"
                ]
        MsgDefineExplorer { scriptMessageIcon = _icon }
            -> mconcat
                [ "Gain a new "
                , _icon
                , " explorer with:"
                ]
        MsgMilitaryLeaderTrait { scriptMessageWhat = _what }
            -> mconcat
                [ "With the [[Leader trait|trait]] "
                , toMessage $ quotes _what
                ]
        MsgTypeAll
            -> "Condition applies to all"
        MsgSetSavedName { scriptMessageVar = _var, scriptMessageType = _type, scriptMessageFemale = _female }
            -> mconcat
                [ "Save name of "
                , toMessage (ifThenElseT _female "female " "")
                , _type
                , " to <tt>"
                , _var
                , "</tt>"
                ]
        MsgSetSavedNameScope { scriptMessageVar = _var, scriptMessageType = _type, scriptMessageScope = _scope, scriptMessageFemale = _female }
            -> mconcat
                [ "Save name of "
                , toMessage (ifThenElseT _female "female " "")
                , _type
                , " from "
                , _scope
                , " to <tt>"
                , _var
                , "</tt>"
                ]
        MsgClearSavedName { scriptMessageVar = _var }
            -> mconcat
                [ "Clear saved name <tt>"
                , _var
                , "</tt>"
                ]
        MsgProvinceTradePower {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , toMessage (roundNum _amt)
                , " "
                , _icon
                , " province trade power"
                ]
        MsgHasPermanentClaim { scriptMessageWhat = _what }
            -> mconcat
                [ "Has a [[permanent claim]] on "
                , _what
                ]
        MsgIsPermanentClaim { scriptMessageWhom = _whom }
            -> mconcat
                [ "Is a [[permanent claim]] of "
                , _whom
                ]
        MsgIsHegemonOfType { scriptMessageType = _type }
            -> mconcat
                [ "Is "
                , _type
                ]
        MsgIsSubjectOfType { scriptMessageType = _type }
            -> mconcat
                [ "Is subject type "
                , _type
                ]
        MsgHasRuler { scriptMessageWho = _who }
            -> mconcat
                [ "Has "
                , toMessage (quotes _who)
                ," as ruler"
                ]
        MsgHasCasusBelli { scriptMessageWhat = _what, scriptMessageWho = _who }
            -> mconcat
                [ "The country has the "
                , _what
                , " [[casus belli]] against "
                , _who
                ]
        MsgHeirADM {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Heir's "
                , _icon
                , " administrative skill is at least "
                , toMessage (roundNum _amt)
                ]
        MsgHeirDIP {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Heir's "
                , _icon
                , " diplomatic skill is at least "
                , toMessage (roundNum _amt)
                ]
        MsgHeirMIL {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Heir's "
                , _icon
                , " military skill is at least "
                , toMessage (roundNum _amt)
                ]
        MsgConsortADM {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Consort's "
                , _icon
                , " administrative skill is at least "
                , toMessage (roundNum _amt)
                ]
        MsgConsortDIP {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Consort's "
                , _icon
                , " diplomatic skill is at least "
                , toMessage (roundNum _amt)
                ]
        MsgConsortMIL {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Consort's "
                , _icon
                , " military skill is at least "
                , toMessage (roundNum _amt)
                ]
        MsgLandLeaderFire {scriptMessageIcon = _icon, scriptMessageAmt = _amt, scriptMessageAddToBase = _addToBase}
            -> mconcat
                [ _icon
                , " "
                , toMessage $ bold (roundNumSign _addToBase _amt )
                , " fire"
                ]
        MsgLandLeaderShock {scriptMessageIcon = _icon, scriptMessageAmt = _amt, scriptMessageAddToBase = _addToBase}
            -> mconcat
                [ _icon
                , " "
                , toMessage $ bold (roundNumSign _addToBase _amt)
                , " shock"
                ]
        MsgLandLeaderManeuver {scriptMessageIcon = _icon, scriptMessageAmt = _amt, scriptMessageAddToBase = _addToBase}
            -> mconcat
                [ _icon
                , " "
                , toMessage $ bold (roundNumSign _addToBase _amt)
                , " maneuver"
                ]
        MsgLandLeaderSiege {scriptMessageIcon = _icon, scriptMessageAmt = _amt, scriptMessageAddToBase = _addToBase}
            -> mconcat
                [ _icon
                , " "
                , toMessage $ bold (roundNumSign _addToBase _amt)
                , " siege"
                ]
        MsgNavalLeaderFire {scriptMessageIcon = _icon, scriptMessageAmt = _amt, scriptMessageAddToBase = _addToBase}
            -> mconcat
                [ _icon
                , " "
                , toMessage $ bold (roundNumSign _addToBase _amt)
                , " fire"
                ]
        MsgNavalLeaderShock {scriptMessageIcon = _icon, scriptMessageAmt = _amt, scriptMessageAddToBase = _addToBase}
            -> mconcat
                [ _icon
                , " "
                , toMessage $ bold (roundNumSign _addToBase _amt)
                , " shock"
                ]
        MsgNavalLeaderManeuver {scriptMessageIcon = _icon, scriptMessageAmt = _amt, scriptMessageAddToBase = _addToBase}
            -> mconcat
                [ _icon
                , " "
                , toMessage $ bold (roundNumSign _addToBase _amt)
                , " maneuver"
                ]
        MsgNavalLeaderSiege {scriptMessageIcon = _icon, scriptMessageAmt = _amt, scriptMessageAddToBase = _addToBase}
            -> mconcat
                [ _icon
                , " "
                , toMessage $ bold (roundNumSign _addToBase _amt)
                , " siege"
                ]
        MsgCountryOrNonSovereignSubjectHolds {scriptMessageWhom = _whom}
            -> mconcat
                [ "Province is owned by "
                , _whom
                , " or its non-tributary subjects"
                ]
        MsgCountryOrSubjectHolds {scriptMessageWhom = _whom}
            -> mconcat
                [ "Province is owned by "
                , _whom
                , " or its subjects"
                ]
        MsgGlobalSailorsModifier {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " National sailors modifier"
                ]
        MsgMinAutonomyInTerritories {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign False) _amt)
                , " Minimum autonomy in territories"
                ]
        MsgMapSetupRandom
            -> "Using random map setup"
        MsgValidForPU { scriptMessageYn = _yn }
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " an independent [[Christian]] [[monarchy]]"
                ]
        MsgIsGreatPower { scriptMessageYn = _yn }
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " a [[great power]]"
                ]
        MsgTradeShare {scriptMessageIcon = _, scriptMessageWhom = _whom, scriptMessageAmt = _amt}
            -> mconcat
                [ _whom
                , " controls at least "
                , toMessage (plainPc _amt)
                , " of the [[trade]] in the [[trade node]]"
                ]
        MsgProviceHasCenterOfTrade {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Province has a "
                , _icon
                , " center of trade of at least level "
                , toMessage $ bold (roundNum _amt)
                ]
        MsgPrivateerPower {scriptMessageAmt = _amt}
            -> mconcat
                [ "The country has at least "
                , toMessage $ bold (plainPc _amt)
                , " trade power from [[privateering]]"
                ]
        MsgPrivateerPowerCountry {scriptMessageWhom = _whom, scriptMessageAmt = _amt}
            -> mconcat
                [ _whom
                , " has at least "
                , toMessage $ bold (plainPc _amt)
                , " trade power from [[privateering]]"
                ]
        MsgPrivateerShare {scriptMessageIcon = _, scriptMessageWhom = _whom, scriptMessageAmt = _amt}
            -> mconcat
                [ _whom
                , " has at least "
                , toMessage $ bold (reducedNum plainPc _amt)
                , " trade power from [[privateering]]"
                ]
        MsgDevastation {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " devastation is at least "
                , toMessage $ bold (roundNum _amt)
                ]
        MsgHasEstatePrivilege {scriptMessageWhat = _what}
            -> mconcat
                [ "Has the "
                , toMessage (iquotes _what)
                , " estate privilege"
                ]
        MsgOwnsOrNonTribSubject {scriptMessageWhat = _what}
            -> mconcat
                [ _what
                , " is owned by the country or or its non-tributary subjects"
                ]
        MsgHasConsortRegency {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " in a consort regency"
                ]
        MsgIsOwnedByTradeCompany {scriptMessageYn = _yn}
            -> mconcat
                [ "Province "
                , toMessage (ifThenElseT _yn "belongs" "does ''not'' belong")
                , " to a trade company"
                ]
        MsgWasTag {scriptMessageWhom = _whom}
            -> mconcat
                [ "The country was previously "
                , _whom
                ]
        MsgArmySize {scriptMessageAmt = _amt}
            -> mconcat
                [ "Army size is at least "
                , toMessage (plainNum _amt)
                ]
        MsgArmySizeMatches {scriptMessageWhom = _whom}
            -> mconcat
                ["Army size is at least as large as that of "
                , _whom
                ]
        MsgNavySize {scriptMessageAmt = _amt}
            -> mconcat
                [ "Navy size is at least "
                , toMessage (plainNum _amt)
                ]
        MsgNavySizeMatches {scriptMessageWhom = _whom}
            -> mconcat
                ["Navy size is at least as large as that of "
                , _whom
                ]
        MsgHasClimate {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Climate is "
                , _icon
                , " "
                , _what
                ]
        MsgTradingBonus {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Country has the [[trading in]] bonus for "
                , _icon
                , " "
                , _what
                ]
        MsgNumSubjects {scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , toMessage (plainNum _amt)
                , plural _amt " subject" " subjects"
                ]
        MsgApplyEstateModifer {scriptMessageWhat = _what}
            -> mconcat
                [ "Apply estate privilege modifier for "
                , toMessage (iquotes _what)
                ]
        MsgRemoveEstateModifer {scriptMessageWhat = _what}
            -> mconcat
                [ "Remove estate privilege modifier for "
                , toMessage (iquotes _what)
                ]
        MsgReapplyEstatePrivilege {scriptMessageWhat = _what}
            -> mconcat
                [ "Reapply estate privilege "
                , toMessage (iquotes _what)
                ]
        MsgLeaderTradition {scriptMessageNaval = _yn, scriptMessageAmt = _amt}
            -> mconcat
                [ toMessage (plainNum _amt)
                , " "
                , toMessage (ifThenElseT _yn "naval" "army")
                , " tradition"
                ]
        MsgTradeCompanySize {scriptMessageAmt = _amt}
            -> mconcat
                [ "Trade company has at least "
                , toMessage (plainNum _amt)
                , " provinces"
                ]
        MsgNumFreeBuildingSlots {scriptMessageAmt = _amt}
            -> mconcat
                [ "The province has at least "
                , toMessage (plainNum _amt)
                , " building slots remaining"
                ]
        MsgCanBuild {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ _icon
                , " "
                , _what
                , " can be built in the province"
                ]
        MsgCanHaveCenterOfReformation
            -> mconcat -- Description taken from [[Protestant_events]]
                [ "The country has its [[capital]] in Europe which does ''not'' have the modifier "
                , toMessage (iquotes "[[Religious Center]]")
                ]
        MsgCreateColony {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Create new colony with "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , " population"
                ]
        MsgNumInvestmentsInTradeCompanyReigion {scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ "At least "
                , toMessage (plainNum _amt)
                , " "
                , _icon
                , " "
                , _what
                , plural _amt " investment" " investments"
                , " in the trade company region"
                ]
        MsgHasTradeCompanyInvestmentInArea {scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageWho = _who}
            -> mconcat
                [ _who
                , " has the "
                , _icon
                , " "
                , _what
                , " trade company investment"
                ]
        MsgHasPrivateers { scriptMessageYn = _yn }
            -> mconcat
                [ "The country "
                , toMessage (ifThenElseT _yn "has" "does ''not'' have")
                , " [[privateers]] in any trade node"
                ]
        MsgEveryTradeNodeMemberCountry
            -> "All countries with owned provinces in the trade node:"
        MsgRandomTradeNodeMemberProvince
            -> "One random province in the trade node:"
        MsgIsWasteland { scriptMessageYn = _yn }
            -> mconcat
                [ "Province is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " [[wasteland]]"
                ]
        MsgHasRiverEstuary
            -> "Province has a {{icon|estuary|28px}} river estuary"
        MsgTradingPolicyInNode { scriptMessageNode = _node, scriptMessagePolicy = _policy }
            -> mconcat
                [ _node
                , " has the "
                , _policy
                , " trading policy"
                ]
        MsgTradingPolicyInNodeAny { scriptMessageNode = _node }
            -> mconcat
                [ _node
                , " has any trading policy"
                ]
        MsgInstitutionDifference { scriptMessageWho = _who, scriptMessageAmt = _amt }
            -> mconcat
                [ "The country has embraced at least "
                , toMessage (plainNum _amt)
                , " more [[institutions]] than "
                , _who
                ]
        MsgEmbargoedBy { scriptMessageWho = _who }
            -> mconcat
                [ "The country is embargoed by "
                , _who
                ]
        MsgRandomAdvisor { scriptMessageIcon = _icon, scriptMessageText = _text, scriptMessageYn = _yn }
            -> mconcat
                [ "Gain access to a "
                , toMessage (ifThenElseT _yn "discounted " "")
                , _icon
                , " "
                , _text
                , " advisor, where:"
                ]
        MsgRandomAdvisorSkill { scriptMessageAmt = _amt }
            -> mconcat
                [ "Skill level is "
                , toMessage (plainNum _amt)
                ]
        MsgRandomAdvisorScaledSkill
            -> "Skill level is based on monthly income (1 if less than 15, 2 if less than 25, 3 otherwise)"
        MsgRandomAdvisorNonState { scriptMessageIcon = _icon, scriptMessageText = _text } -- TODO: Perhaps something less convoluted
            -> mconcat
                [ "If the randomly selected religion is not the state religion the advisor type changes to "
                , _icon
                , " "
                , _text
                ]
        MsgConvertFemaleRulerGeneral { scriptMessageAmt = _amt }
            -> mconcat
                [ "Convert female ruler into a general with "
                , toMessage (plainNum _amt)
                , " army tradition"
                ]
        MsgConvertHeirGeneral { scriptMessageYn = _yn, scriptMessageAmt = _amt }
            -> mconcat
                [ "Convert "
                , toMessage (ifThenElseT _yn "female" "male")
                , " heir into a general with "
                , toMessage (plainNum _amt)
                , " army tradition"
                ]
        MsgHeirRemoved
            -> "Current heir is removed"
        MsgIsHeirLeader { scriptMessageYn = _yn }
            -> mconcat
                [ "Heir is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " a general"
                ]
        MsgAtWarWithReligiousEnemy { scriptMessageYn = _yn }
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " at war with any country of a different religion"
                ]
        MsgHasAdvisorCategory { scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageYn = _yn }
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " employing any "
                , _icon
                , " "
                , _what
                , " advisor"
                ]
        MsgHasAdvisorCategoryLevel { scriptMessageAmt = _amt, scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageYn = _yn }
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " employing any "
                , _icon
                , " "
                , _what
                , " advisor of at least level "
                , toMessage (plainNum _amt)
                ]
        MsgAnyCountryActiveInNode
            -> "Any country active in the trade node:"
        MsgTradeNodeIsInTCRegion { scriptMessageYn = _yn }
            -> mconcat
                [ "The province's trade node is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " in a trade company region"
                ]
        MsgHasEmptyAdjProvince { scriptMessageYn = _yn }
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " adjacent to an uncolonized province"
                ]
        MsgAnyTradeNodeCountry
            -> "Any country with an owned province in the current trade node:"
        MsgIsInDeficit { scriptMessageYn = _yn }
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " running a deficit"
                ]
        MsgIsReligiousCenterProvince { scriptMessageYn = _yn }
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " a religious center province"
                ]
        MsgNumCavalry {scriptMessageAmt = _amt}
            -> mconcat
                [ "Owns at least "
                , toMessage (roundNum _amt)
                , " cavalry "
                , plural _amt "regiment" "regiments"
                ]
        MsgNumCavalryThan {scriptMessageWhom = _whom}
            -> mconcat
                [ "Owns at least as many cavalry regiments as "
                , _whom
                ]
        MsgNumInfantry {scriptMessageAmt = _amt}
            -> mconcat
                [ "Owns at least "
                , toMessage (roundNum _amt)
                , " infantry "
                , plural _amt "regiment" "regiments"
                ]
        MsgNumInfantryThan {scriptMessageWhom = _whom}
            -> mconcat
                [ "Owns at least as many infantry regiments as "
                , _whom
                ]
        MsgNumArtillery {scriptMessageAmt = _amt}
            -> mconcat
                [ "Owns at least "
                , toMessage (roundNum _amt)
                , " artillery "
                , plural _amt "regiment" "regiments"
                ]
        MsgNumArtilleryThan {scriptMessageWhom = _whom}
            -> mconcat
                [ "Owns at least as many artillery regiments as "
                , _whom
                ]
        MsgAdoptReformProgress {scriptMessageWhom = _whom}
            -> mconcat
                [ "Adopts the same amount of reform progress as "
                , _whom
                ]
        MsgCuriaTreasurySize {scriptMessageAmt = _amt}
            -> mconcat
                [ "[[Curia]] treasury contains at least {{icon|ducats}} "
                , toMessage (plainNum _amt)
                , " ducats "
                ]
        MsgCuriaTreasuryIncome {scriptMessageAmt = _amt}
            -> mconcat
                [ "Yearly [[curia]] tithe is at least {{icon|ducats}} "
                , toMessage (plainNum _amt)
                , " ducats "
                ]
        MsgChangeInnovativeness {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , " {{DLC-only|innovativeness}}"
                ]
        MsgIsCouncilEnabled {scriptMessageYn = _yn}
            -> mconcat
                [ "Council of Trent has"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " started"
                ]
        MsgCouncilPosition {scriptMessageWhat = _what}
            -> mconcat
                [ "The country's position in the Council of Trent is "
                , _what
                ]
        MsgAllConcesssionsTaken {scriptMessageYn = _yn}
            -> mconcat
                [ "All concessions in the Council of Trent have"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " been taken"
                ]
        MsgIsDotfTier {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Defender of the Faith tier is at least "
                , toMessage (plainNum _amt)
                ]
        MsgHRESize {scriptMessageAmt = _amt}
            -> mconcat
                [ "The [[EoA]] has at least "
                , toMessage (plainNum _amt)
                , " "
                , plural _amt "member" "members"
                ]
        MsgHREExists -- Special case for hre_size = 1
            -> "{{icon|imperial authority}} Empire of Anbennar exists"
        MsgInLeague {scriptMessageWhat = _what}
            -> mconcat
                [ "Is part of the "
                , _what
                , " league"
                ]
        MsgNumOwnInstitutionProvinces {scriptMessageAmt = _amt}
            -> mconcat
                [ "Owns at least "
                , toMessage (plainNum _amt)
                , " institution origin "
                , plural _amt "province" "provinces"
                ]
        MsgIsLeagueLeader {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " the leader of a religious league"
                ]
        MsgGainScaledImperialAuthority {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , " imperial authority (scaled)"
                ]
        MsgHasWinter {scriptMessageWhat = _what}
            -> mconcat
                [ "Has winter of type "
                , toMessage (iquotes _what)
                ]
        MsgHasLeader {scriptMessageWhom = _whom}
            -> mconcat
                [ "Has leader "
                , toMessage (iquotes _whom)
                ]
        MsgIsIsland {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " an [[island]]"
                ]
        MsgIsBlockaded {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " [[blockaded]]"
                ]
        MsgKillLeaderType {scriptMessageIcon = _icon, scriptMessageText = _text}
            -> mconcat
                [ "A "
                , _icon
                , " "
                , _text
                , " dies"
                ]
        MsgKillLeaderRandom {scriptMessageIcon = _icon}
            -> mconcat
                [ "A random "
                , _icon
                , " leader dies"
                ]
        MsgKillLeaderNamed {scriptMessageIcon = _icon, scriptMessageText = _text}
            -> mconcat
                [ "The "
                , _icon
                , " leader named "
                , toMessage (quotes _text)
                , " dies"
                ]
        MsgAddEstateLoyaltyModifier {scriptMessageIcon = _icon, scriptMessageWho = _who, scriptMessageWhat = _what, scriptMessageDays = _days, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , _who
                , " estate "
                , gainsOrLoses _amt
                , " "
                , toMessage (colourNum True _amt)
                , " loyalty for "
                , toMessage (formatDays _days)
                , " due to the modifier "
                , toMessage (iquotes _what)
                ]
        MsgExportVariable { scriptMessageVar1 = _var1, scriptMessageVar2 = _var2}
            -> mconcat
                [ "Export variable <tt>"
                , _var2
                , "</tt> to <tt>"
                , _var1
                , "</tt>"
                ]
        MsgExportVariableWho { scriptMessageVar1 = _var1, scriptMessageVar2 = _var2, scriptMessageWhom = _whom}
            -> mconcat
                [ "Export "
                , _whom
                , "'s internal variable <tt>"
                , _var2
                , "</tt> to <tt>"
                , _var1
                , "</tt>"
                ]
        MsgCanBeOverlord {scriptMessageType = _type}
            -> mconcat
                [ "Can have "
                , _type
                , " [[subjects]]"
                ]
        MsgTrust {scriptMessageWhom = _whom, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , toMessage (plainNum _amt)
                , " [[trust]] with "
                , _whom
                ]
        MsgTechDifference {scriptMessageAmt = _amt} -- TODO: Better description when amount is negative
            -> mconcat
                [ "Is at least "
                , toMessage (Doc.ppFloat _amt)
                , " "
                , toMessage (plural _amt "technology" "technologies")
                , " ahead"
                ]
        MsgAiAttitude {scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageWhom = _whom}
            -> mconcat
                [ "The AI's attitude towards "
                , _whom
                , " is "
                , _icon
                , " "
                , _what
                ]
        MsgAllAllies
            -> "All allies:"
        MsgAllElectors
            -> "All electors:"
        MsgAllKnownCountries
            -> "All discovered countries:"
        MsgDevelopmentInProvinces {scriptMessageAmt = _amt}
            -> mconcat
                [ "At least {{icon|Development}} "
                , toMessage (plainNum _amt)
                , " development in owned provinces where:"
                ]
        MsgEstateLandShareEffect {scriptMessageAmt = _amt, scriptMessageIcon = _icon, scriptMessageWhom = _whom}
            -> mconcat
                [ "The "
                , _icon
                , " "
                , _whom
                , " estate "
                , gainsOrLoses _amt
                , " "
                , toMessage (colourPc False  _amt)
                , " share of the land"
                ]
        MsgEstateLandShareEffectAll {scriptMessageAmt = _amt}
            -> mconcat
                -- The value in the code is for all estates together, so it is easier to say
                -- that the crown gains it instead of the estates losing land.
                [ "The crown "
                , gainsOrLoses (-1 * _amt)
                , " "
                , toMessage (colourPc False _amt)
                , " share of the land"
                ]
        MsgIsInTradeLeagueWith {scriptMessageWhom = _whom}
            -> mconcat
                [ "Is in the same [[trade league]] as "
                , _whom
                ]
        MsgIsTradeLeagueLeader {scriptMessageYn = _yn}
            -> mconcat
                ["Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " the leader of a [[trade league]]"
                ]
        MsgInstitutionEnabled {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "The "
                , _icon
                , " "
                , _what
                , " institution is enabled"
                ]
        MsgCenterOfTrade {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Create a "
                , _icon
                , " level "
                , toMessage (bold (roundNum _amt))
                , " center of trade"
                ]
        MsgArmyStrength {scriptMessageWhom = _whom, scriptMessageAmt = _amt}
            -> mconcat
                [ "Army strength is at least "
                , toMessage (plainNum _amt)
                , " times that of "
                , _whom
                ]
        MsgNavalStrength {scriptMessageWhom = _whom, scriptMessageAmt = _amt}
            -> mconcat
                [ "Naval strength is at least "
                , toMessage (plainNum _amt)
                , " times that of "
                , _whom
                ]
        MsgRemoveBuilding {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Remove "
                , _icon
                , " "
                , _what
                ]
        MsgHigherDevelopmentThan {scriptMessageWhat = _what}
            -> mconcat
                [ "Has higher development than "
                , _what
                ]
        MsgCrownlandShare {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , _icon
                , " "
                , toMessage $ (plainPc _amt)
                , " [[crown land]] ownership"
                ]
        MsgCrownlandShareThan {scriptMessageIcon = _icon, scriptMessageIcon2 = _icon2, scriptMessageWhom = _whom}
            -> mconcat
                [ "Has at least as much "
                , _icon
                , " [[crown land]] ownership as "
                , _icon2
                , " "
                , _whom
                ]
        MsgNumEstateAgendas {scriptMessageIcon = _icon, scriptMessageWhom = _whom, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has completed at least "
                , toMessage (plainNum _amt)
                , " "
                , _icon
                , " "
                , _whom
                , " agendas"
                ]
        MsgNumEstatePrivileges {scriptMessageIcon = _icon, scriptMessageWhom = _whom, scriptMessageAmt = _amt}
            -> mconcat
                [ "The "
                , _icon
                , " "
                , _whom
                , " estate has at least "
                , toMessage (plainNum _amt)
                , " privileges"
                ]
        MsgAnyProvinceInState
            -> "Any province in the currently considered state:"
        MsgRandomOwnedArea
            -> "Random owned area:"
        MsgAreaOfProvince
            -> "Another province in the area of the currently considered province:"
        MsgAreaOfProvinceAll
            -> "All provinces in the area of the currently considered province:"
        MsgAnyArmy
            -> "Any army:"
        MsgAllTradeNodes
            -> "All trade nodes:"
        MsgAllRivalCountries
            -> "All rivaled countries:"
        MsgAllTradeNodeProvince
            -> "All provinces in this trade node:"
        MsgHomeTradeNode
            -> "Home [[trade node]]:"
        MsgHomeTradeNodeEffectScope
            -> "Home [[trade node]] of the country:"
        MsgRemoveAdvisor {scriptMessageType = _type}
            -> mconcat
                [ _type
                , " advisor leaves the court"
                ]
        MsgLandForcelimit {scriptMessageIcon = _, scriptMessageAmt = _amt}
            -> mconcat
                [ "Land force limit is at least "
                , toMessage (plainNum _amt)
                ]
        MsgLandForcelimitAs {scriptMessageIcon = _icon, scriptMessageWhom = _whom}
            -> mconcat
                [ _icon
                , " Land force limit is at least that of "
                , _whom
                ]
        MsgMonthlyReformProgressModifier {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Monthly reform progress modifier"
                ]
        MsgSupplyLimitModifier {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " Supply limit modifier"
                ]
        MsgHasGlobalModifierValue {scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , _what
                , " is at least "
                , toMessage (plainNum _amt)
                ]
        MsgHasAnyGreatProject
            -> "Has any [[Great Project|great project]]"
        MsgHasAnyGreatProjectTier {scriptMessageAmt = _amt}
            -> mconcat
                [ "Any [[Great Project|great project]] is at least tier "
                , toMessage (plainNum _amt)
                ]
        MsgHasAnyMonument
            -> "Has any [[monument]]"
        MsgHasAnyMonumentTier {scriptMessageAmt = _amt}
            -> mconcat
                [ "Any [[monument]] is at least tier "
                , toMessage (plainNum _amt)
                ]
        MsgHasGreatProject {scriptMessageWhat = _what}
            -> mconcat
                [ "Has great project "
                , _what
                ]
        MsgHasGreatProjectTier {scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ "Great project "
                , _what
                , " is at least tier "
                , toMessage (plainNum _amt)
                ]
        MsgSetGreatProjectTier {scriptMessageAmt = _amt, scriptMessageWhat = _what}
            -> mconcat
                [ "Set great project "
                , _what
                , " tier to be at least "
                , toMessage (plainNum _amt)
                , " and gain 2 random development for each tier (up to "
                , toMessage (plainNum _amt)
                , ") which the great project already had"
                ]
        MsgEstateRegency
            -> "Is in an estate regency"
        MsgEstateRegencyDuration {scriptMessageAmt = _amt}
            -> mconcat
                [ "Has been in an estate regency for at least "
                , toMessage (plainNum _amt)
                , " "
                , toMessage (plural _amt "year" "years")
                ]
        MsgEstateRegencySpecific {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Is in a regency led by the "
                , _icon
                , " "
                , _what
                , " estate"
                ]
        MsgEstateRegencySpecificDur {scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has been in a regency led by the "
                , _icon
                , " "
                , _what
                , " estate for at least "
                , toMessage (plainNum _amt)
                , " "
                , toMessage (plural _amt "year" "years")
                ]
        MsgHasAnyManufactory {scriptMessageYn = _yn}
            -> mconcat
                [ toMessage (ifThenElseT _yn "Has" "Does ''not'' have")
                , " any [[manufactory]]"
                ]
        MsgHighestValueTradeNode
            -> "Is the highest valued [[trade node]] in the world"
        MsgHasNumVassals {scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , toMessage (plainNum _amt)
                , toMessage (plural _amt " vassal" " vassals")
                ]
        MsgGuaranteedBy {scriptMessageWhom = _whom}
            -> mconcat
                [ "Guaranteed by "
                , _whom
                ]
        MsgHasGuaranteed {scriptMessageWhom = _whom}
            -> mconcat
                [ "Has guaranteed "
                , _whom
                ]
        MsgVassalize {scriptMessageWhom = _whom}
            -> mconcat
                [ "Make "
                , _whom
                , " a vassal"
                ]
        MsgMissionCompleted {scriptMessageWhat = _what}
            -> mconcat
                [ "Has completed the mission "
                , toMessage (iquotes _what)
                ]
        MsgCompleteMission {scriptMessageWhat = _what}
            -> mconcat
                [ "Complete the mission "
                , toMessage (iquotes _what)
                ]
        MsgHasMission {scriptMessageWhat = _what}
            -> mconcat
                [ "Has the mission "
                , toMessage (iquotes _what)
                ]
        MsgHasNumberOfBuildingType {scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , toMessage (plainNum _amt)
                , toMessage (plural _amt " province" " provinces")
                , " with a "
                , _icon
                , " "
                , _what
                ]
        MsgFederationSize {scriptMessageAmt = _amt}
            -> mconcat
                [ "The [[federation]] has at least "
                , toMessage (plainNum _amt)
                , toMessage (plural _amt " member" " members")
                ]
        MsgGrownByDevelopment {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Total develoment has increased by at least "
                , toMessage (plainNum _amt)
                ]
        MsgGrownByStates {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Number of states has increased by at least "
                , toMessage (plainNum _amt)
                ]
        MsgNumAdmirals {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , _icon
                , " "
                , toMessage (roundNum _amt)
                , plural _amt " admiral" " admirals"
                ]
        MsgNumAdmiralsWithTrait {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , _icon
                , " "
                , toMessage (roundNum _amt)
                , plural _amt " admiral" " admirals"
                , " with one or more trait"
                ]
        MsgNumGenerals {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , _icon
                , " "
                , toMessage (roundNum _amt)
                , plural _amt " general" " generals"
                ]
        MsgNumGeneralsWithTrait {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , _icon
                , " "
                , toMessage (roundNum _amt)
                , plural _amt " general" " generals"
                , " with one or more trait"
                ]
        MsgShareOfStartingIncome {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Country's "
                , _icon
                , " monthly income has increased to "
                , toMessage (reducedNum plainPc _amt)
                , " of the starting monthly income"
                ]
        MsgNumNonTribSubjects { scriptMessageAmt = _amt }
            -> mconcat
                [ "Has at least "
                , toMessage (plainNum _amt)
                , " non-tributary "
                , plural _amt "subject" "subjects"
                ]
        MsgChangeGovernmentReformProgress {scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , toMessage (colourNum True _amt)
                , " government reform progress"
                ]
        MsgTradeGoodsProduced {scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ "Produces at least "
                , toMessage (plainNum _amt)
                , " "
                , _icon
                , " "
                , _what
                ]
        MsgProvinceSameReligion {scriptMessageWhom = _whom}
            -> mconcat
                [ "Province religion is same as "
                , _whom
                ]
        MsgProvinceReligion {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Province religion is "
                , _icon
                , " "
                , _what
                ]
        MsgGrantEstatePrivilege {scriptMessageWhat = _what}
            -> mconcat
                [ "Grant the estate privilege "
                , toMessage (iquotes _what)
                ]
        MsgRemoveEstatePrivilege {scriptMessageWhat = _what}
            -> mconcat
                [ "Remove the estate privilege "
                , toMessage (iquotes _what)
                ]
        MsgNumTrustedAllies {scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , toMessage (plainNum _amt)
                , plural _amt " ally" " allies"
                , " with 100 [[trust]]"
                ]
        MsgIsFederationLeader {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " the leader of a [[federation]]"
                ]
        MsgAverageUnrest {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Average "
                , _icon
                , " unrest in provinces is at least "
                , toMessage (plainNum _amt)
                ]
        MsgHasPillagedCapitalAgainst {scriptMessageWhom = _whom}
            -> mconcat
                [ "Has pillaged the capital of "
                , _whom
                ]
        MsgIsIroquois {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " an Iroquois nation" -- TODO: Probably link somewhere on the wiki as this is a scripted trigger
                ]
        MsgMilitaryStrength {scriptMessageWho = _who, scriptMessageAmt = _amt}
            -> mconcat
                [ "The country's military strength is at least "
                , toMessage (plainNum _amt)
                , " times that of "
                , _who
                ]
        MsgNumUnitsInProvince {scriptMessageWhom = _whom, scriptMessageAmt = _amt}
            -> mconcat
                [ _whom
                , " has at least "
                , toMessage (plainNum _amt)
                , " units in the province"
                ]
        MsgNativeSize {scriptMessageAmt = _amt}
            -> mconcat
                [ "Native population is at least "
                , toMessage (reducedNum plainNum _amt)
                ]
        MsgChangeNativeSize {scriptMessageAmt = _amt}
            -> mconcat
                [ "Province "
                , gainsOrLoses _amt
                , " "
                , toMessage (reducedNum plainNum _amt)
                , " native population"
                ]
        MsgNumTributaryStates {scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , toMessage (plainNum _amt)
                , " tributary states"
                ]
        MsgIsThreat {scriptMessageWhom = _whom}
            -> mconcat
                [ "Is threatened by "
                , _whom
                ]
        MsgGrantIndependence
            -> "The country becomes independent"
        MsgIsVassal {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " a vassal"
                ]
        MsgIsPapalController {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " the [[rectorate controller]]"
                ]
        MsgIsFederationNation {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " a member of a [[federation]]"
                ]
        MsgNumFederationAdvancements {scriptMessageAmt = _amt}
            -> mconcat
                [ "Number of [[federation]] advancements is at least "
                , toMessage (plainNum _amt)
                ]
        MsgEveryFederationMember
            -> "Every federation member:"
        MsgAllFederationMembers
            -> "All federation members:"
        MsgHistoricalFriendWith {scriptMessageWhom = _whom}
            -> mconcat
                [ "Is [[historical friend]] with "
                , _whom
                ]
        MsgHistoricalRivalWith {scriptMessageWhom = _whom}
            -> mconcat
                [ "Is [[historical rival]] of "
                , _whom
                ]
        MsgAddHistoricalFriend {scriptMessageWhom = _whom}
            -> mconcat
                [ "Add "
                , _whom
                , " as a [[historical friend]]"
                ]
        MsgAddHistoricalRival {scriptMessageWhom = _whom}
            -> mconcat
                [ "Add "
                , _whom
                , " as a [[historical rival]]"
                ]
        MsgRemoveHistoricalFriend {scriptMessageWhom = _whom}
            -> mconcat
                [ "Remove "
                , _whom
                , " as a [[historical friend]]"
                ]
        MsgRemoveHistoricalRival {scriptMessageWhom = _whom}
            -> mconcat
                [ "Remove "
                , _whom
                , " as a [[historical rival]]"
                ]
        MsgHasAnyEstates {scriptMessageYn = _yn}
            -> mconcat
                [ toMessage (ifThenElseT _yn "Has" "Does ''not'' have")
                , " any estates"
                ]
        MsgGovernmentReformProgress {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , _icon
                , " "
                , toMessage (plainNum _amt)
                , " Government reform progress saved up"
                ]
        MsgHumiliatedBy {scriptMessageWhom = _whom}
            -> mconcat
                [ "Has been humiliated by "
                , _whom
                ]
        MsgCreateGuarantee {scriptMessageWhom = _whom}
            -> mconcat
                [ "Start guaranteeing "
                , _whom
                ]
        MsgCreateSubject {scriptMessageWhat = _what, scriptMessageWhom = _whom, scriptMessageYn = _keep_liberty_desire}
            -> mconcat
                [ "Make "
                , _whom
                , " a "
                , _what
                , if _keep_liberty_desire then " while keeping the previous liberty desire" else ""
                ]
        MsgHeirClaim {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Heir's "
                , _icon
                , " [[Heir claim|claim strength]] is at least "
                , toMessage (roundNum _amt)
                ]
        MsgExtendGoldenAge {scriptMessageAmt = _amt}
            -> mconcat
                [ "Extend the current golden age by "
                , toMessage (roundNum _amt)
                , " months"
                ]
        MsgExtendRegency {scriptMessageAmt = _amt}
            -> mconcat
                [ "Extend the regency by "
                , toMessage (roundNum _amt)
                , " years"
                ]
        MsgAddPowerProjection {scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " {{icon|power projection}} "
                , toMessage (colourNumSign True _amt)
                , " power projection"
                ]
        MsgRemoveCasusBelli {scriptMessageWhat = _what, scriptMessageWhom = _whom}
            -> mconcat
                [ "Remove casus belli "
                , _what
                , " against "
                , _whom
                ]
        MsgHasWonWarAgainst {scriptMessageWhom = _whom, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has won a war against "
                , _whom
                , " during the last "
                , toMessage (plainNum _amt)
                , " years"
                ]
        MsgChangePrice {scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageName = _name, scriptMessageAmt = _amt, scriptMessageDays = _days }
            -> mconcat
                [ "The price of "
                , _icon
                , " "
                , _what
                , " changes "
                , toMessage (reducedNum (colourPcSign True) _amt)
                , " due to "
                , toMessage (iquotes _name)
                , " for "
                , toMessage (formatDays _days)
                ]
        MsgAnyHiredMercenaryCompany
            -> "Any hired mercenary company:"
        MsgRandomHiredMercenaryCompany
            -> "Random hired mercenary company:"
        MsgLocation
            -> "Location:"
        MsgHomeProvince
            -> "Home province:"
        MsgCreateNamedShip {scriptMessageText = _name, scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Create "
                , _icon
                , " "
                , _what
                , " named "
                , toMessage (iquotes _name)
                ]
        MsgCreateFlagShip {scriptMessageText = _name, scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Create a flagship of type "
                , _icon
                , " "
                , _what
                , " named "
                , toMessage (iquotes _name)
                , " with random modifications"
                ]
        MsgTradingPart {scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has access to at least "
                , toMessage (reducedNum plainPc _amt)
                , " of the global "
                , _icon
                , " "
                , _what
                , " market"
                ]
        MsgGenerateTraitorAdvisor {scriptMessageSkill = _skill}
            -> mconcat
                [ "Get a random level "
                , toMessage (plainNum _skill)
                , " ''traitor'' advisor"
                ]
        MsgGenerateExileAdvisor {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Get a discounted ''exiled'' advisor of type "
                , _icon
                , " "
                , _what
                ]
        MsgOurScholarMatchesTheirSchool {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                ["Has a [[Muslim_denominations#Invite_a_Scholar|scholar]] from the "
                , _icon
                , " "
                , _what
                , " school"
                ]
        MsgHasScholar
            -> "Has any [[Muslim_denominations#Invite_a_Scholar|scholar]]"
        MsgRulerHasIslamModifier {scriptMessageWhat = _what, scriptMessageYn = _yn}
            -> mconcat
                [ "Ruler "
                , ifThenElseT _yn "has" "does ''not'' have"
                , " one of the "
                , toMessage (iquotes _what)
                , " islam modifiers"
                ]
        MsgSchoolOpinion {scriptMessageWhom = _whom, scriptMessageAmt = _amt}
            -> mconcat
                [ "The school opinion of "
                , _whom
                , " is "
                , schoolOpinion _amt
                ]
        MsgSetSchoolOpinion {scriptMessageWhom = _whom, scriptMessageAmt = _amt}
            -> mconcat
                [ "Set school opinion of "
                , _whom
                , " to "
                , schoolOpinion _amt
                ]
        MsgHasReligiousSchoolOf {scriptMessageWhom = _whom}
            -> mconcat
                [ "Has the same religious school as "
                , _whom
                ]
        MsgHasBorderWithReligiousEnemy
            -> "The country borders any country of a different religion"
        MsgHasSunniSchool
            -> "Uses one of the Sunni schools"
        MsgHasShiaSchool
            -> "Uses one of the Shia schools"
        MsgNewExiledRuler
            -> "Create an exiled ruler"
        MsgNewExiledRulerAttribs
            -> "Create an exiled ruler with the following attributes:"
        MsgExiledAs {scriptMessageWhat = _what}
            -> mconcat
                [ "Exiled as <tt>"
                , _what
                , "</tt>"
                ]
        MsgSetHeir {scriptMessageWhat = _what}
            -> mconcat
                [ "Make exiled heir <tt>"
                , _what
                , "</tt> the current heir"
                ]
        MsgSetRuler {scriptMessageWhat = _what}
            -> mconcat
                [ "Make exiled ruler <tt>"
                , _what
                , "</tt> the current ruler"
                ]
        MsgExileHeir {scriptMessageWhat = _what}
            -> mconcat
                [ "Exile current heir as <tt>"
                , _what
                , "</tt>"
                ]
        MsgExileRuler {scriptMessageWhat = _what}
            -> mconcat
                [ "Exile current ruler as <tt>"
                , _what
                , "</tt>"
                ]
        MsgClearExiledRuler {scriptMessageWhat = _what}
            -> mconcat
                [ "Remove exiled ruler <tt>"
                , _what
                , "</tt>"
                ]
        MsgExiledRulerSameDynastyAsCurrent {scriptMessageWhat = _what}
            -> mconcat
                [ "Exiled ruler <tt>"
                , _what
                , "</tt> has the same dynasty as the current ruler"
                ]
        MsgAddGreatProjectTier {scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ "Add "
                , toMessage (roundNum _amt)
                , toMessage (plural _amt " tier" " tiers")
                , " to the great project [["
                , _what
                , "]]"
                ]
        MsgWarscoreAgainst {scriptMessageWhom = _whom, scriptMessageAmt = _amt}
            -> mconcat
                [ "The country has at least "
                , toMessage (colourNumSign True _amt)
                , " warscore against "
                , _whom
                ]
        MsgVariableArithmeticTrigger
            -> "Perform the following variable arithmetic/checks:" -- Meh, perhaps shouldn't even be indented?
        MsgHiddenTrigger
            -> "Hidden trigger:"
        MsgBorderDistance {scriptMessageWhom = _whom, scriptMessageAmt = _amt}
            -> mconcat
                [ "Border distance to "
                , _whom
                , " is at least "
                , toMessage (plainNum _amt)
                ]
        MsgAddNamedUnrest {scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ "Add {{icon|local unrest}} "
                , toMessage (colourNumSign False _amt)
                , " unrest due to "
                , toMessage (iquotes _what)
                ]
        MsgCheckEstateRevoltSize {scriptMessageYn = _yn, scriptMessageWhat = _what}
            -> mconcat
                [ "A "
                , ifThenElseT _yn "large" "small" -- TODO: The difference isn't actually that large
                , " number of provinces proportional to the country size has the <tt>"
                , _what
                , "</tt> modifier"
                ]
        MsgHasLeaderWith
            -> "Has leader with:"
        MsgHasMonarchLeaderWith
            -> "Has monarch leader with:"
        MsgHasGeneralWith {scriptMessageIcon = _icon}
            -> mconcat
                [ "Has "
                , _icon
                , " general with:"
                ]
        MsgHasAdmiralWith {scriptMessageIcon = _icon}
            -> mconcat
                [ "Has "
                , _icon
                , " admiral with:"
                ]
        MsgTotalPips {scriptMessageAmt = _amt}
            -> mconcat
                [ "At least "
                , toMessage (roundNum _amt)
                , " [[pips]]"
                ]
        MsgAddLootFromRichProvince {}
            -> "Province gains {{icon|devastation|24px}}{{red|80}} devastation. Looter gets money and {{icon|mil|24px}} military power proportional to city size"
        MsgSetAiAttitude {scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageWhom = _whom, scriptMessageYn = _yn}
            -> mconcat
                [ ifThenElseT _yn "Lock" "Set"
                , " the AI's attitude towards "
                , _whom
                , " to "
                , _icon
                , " "
                , _what
                ]
        MsgRegion
            -> "All provinces in this region:"
        MsgAddDisasterProgress {scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ "Add "
                , toMessage (colourPcSign False _amt)
                , " progress to the "
                , _icon
                , " "
                , _what
                , " disaster"
                ]
        MsgYearsInUnionUnder {scriptMessageWhom = _whom, scriptMessageAmt = _amt}
            -> mconcat
                [ "The country has been in a [[personal union]] under "
                , _whom
                , " for at least "
                , toMessage (plainNum _amt)
                , " years"
                ]
        MsgHasAnyHolyOrder
            -> "Has established any holy order"
        MsgHasHolyOrder {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Has established "
                , _icon
                , " "
                , _what
                , " holy order"
                ]
        MsgNativePolicy {scriptMessageWhat = _what}
            -> mconcat
                [ "Native policy is set to "
                , _what
                ]
        MsgCanEstablishHolyOrder {scriptMessageYn = _yn}
            -> mconcat
                [ "Can"
                , ifThenElseT _yn "" " ''not''"
                , " establish holy orders"
                ]
        MsgEndIncident {scriptMessageWhat = _what}
            -> mconcat
                [ "End the "
                , toMessage (iquotes _what)
                , " incident"
                ]
        MsgIsIncidentActive {scriptMessageWhat = _what}
            -> mconcat
                [ "The "
                , toMessage (iquotes _what)
                , " incident is active"
                ]
        MsgHasIncidentHappened {scriptMessageWhat = _what}
            -> mconcat
                [ "The "
                , toMessage (iquotes _what)
                , " incident has ended"
                ]
        MsgIsIncidentPossible {scriptMessageWhat = _what}
            -> mconcat
                [ "The "
                , toMessage (iquotes _what)
                , " incident is possible"
                ]
        MsgSetPersonalDiety {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Choose "
                , _icon
                , " "
                , _what
                , " as personal deity"
                ]
        MsgHasPersonalDiety {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ _icon
                , " "
                , _what
                , " has been chosen as personal deity"
                ]
        MsgNumAspects {scriptMessageAmt = _amt}
            -> mconcat
                [ "Has activated at least "
                , toMessage (plainNum _amt)
                , toMessage (plural _amt " Aspect" " Aspects")
                , " of Faith"
                ]
        MsgInstitutionPresence {scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " "
                , _what
                , " institution is at least "
                , toMessage (plainPc _amt)
                , " present"
                ]
        MsgKnowsCountry {scriptMessageWhom = _whom}
            -> mconcat
                [ "Knows about "
                , _whom
                ]
        MsgIsTerritory {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , ifThenElseT _yn "" " ''not''"
                , " a territory"
                ]
        MsgIsStateCore {scriptMessageWhat = _what}
            -> mconcat
                [ "Is a state core of "
                , _what
                ]
        MsgChurchPower {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , _icon
                , " "
                , toMessage (plainNum _amt)
                , " church power"
                ]
        MsgHasChurchAspect {scriptMessageWhat = _what}
            -> mconcat
                ["Has the "
                , _what
                , " Aspect of Church"
                ]
        MsgCreateUnion {scriptMessageWhom = _whom}
            -> mconcat
                [ "Make "
                , _whom
                , " a junior partner in a personal union"
                ]
        MsgCreateVassal {scriptMessageWhom = _whom}
            -> mconcat
                [ "Make "
                , _whom
                , " a vassal"
                ]
        MsgCreateMarch {scriptMessageWhom = _whom}
            -> mconcat
                [ "Make "
                , _whom
                , " a march"
                ]
        MsgHighestSupplyLimitInArea
            -> "Has the highest supply limit in the area"
        MsgStartEstateAgenda {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Start an agenda for the "
                , _icon
                , " "
                , _what
                , " estate"
                ]
        MsgPickRandomEstateIfPresent {scriptMessageWhom = _whom, scriptMessageWhat = _what}
            -> mconcat
                [ "Pick a random estate that's present and doesn't have the flag "
                , _whom
                , " and perform the action <tt>"
                , _what
                , "</tt>"
                ]
        MsgHasAnyActiveEstateAgenda {scriptMessageYn = _yn}
            -> mconcat
                [ ifThenElseT _yn "Has" "Does ''not'' have"
                , " an active estate agenda"
                ]
        MsgClearEstateAgendaCache {scriptMessageWhom = _whom}
            -> mconcat
                [ "Clear estate agenda cache for "
                , _whom
                ]
        MsgNativeFerocity {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Native ferocity is at least "
                , toMessage (plainNum _amt)
                ]
        MsgNativeAggressiveness {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Native aggressiveness is at least "
                , toMessage (plainNum _amt)
                ]
        MsgChangeNativeFerocity {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Native population "
                , gainsOrLoses _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum False _amt)
                , " ferocity"
                ]
        MsgChangeNativeAggressiveness {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Native population "
                , gainsOrLoses _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum False _amt)
                , " aggressiveness"
                ]
        MsgExpulsionTarget {scriptMessageWhat = _what}
            -> mconcat
                [ "Expelling minorities to "
                , _what
                ]
        MsgHasSupportLoyalists {scriptMessageYn  = _yn}
            -> mconcat
                [ "Support loyalists is "
                , ifThenElseT _yn "enabled" "disabled"
                ]
        MsgHasSubsidizeArmies {scriptMessageYn  = _yn}
            -> mconcat
                [ "Subsidize armies is "
                , ifThenElseT _yn "enabled" "disabled"
                ]
        MsgHasNewDynasty {scriptMessageYn  = _yn}
            -> mconcat
                [ "The country "
                , ifThenElseT _yn "has" "does ''not'' have"
                , " a new dynasty"
                ]
        MsgHasSendOfficers {scriptMessageYn  = _yn}
            -> mconcat
                [ "Send officers is "
                , ifThenElseT _yn "enabled" "disabled"
                ]
        MsgHasEmbargoRivals {scriptMessageYn  = _yn}
            -> mconcat
                [ "Is"
                , ifThenElseT _yn "" " ''not''"
                , " embargoing overlord's rivals"
                ]
        MsgHasDivertTrade {scriptMessageYn  = _yn}
            -> mconcat
                [ "Divert trade is "
                , ifThenElseT _yn "enabled" "disabled"
                ]
        MsgHasScutage {scriptMessageYn  = _yn}
            -> mconcat
                [ "Scutage is "
                , ifThenElseT _yn "enabled" "disabled"
                ]
        MsgIsMarch {scriptMessageYn  = _yn}
            -> mconcat
                [ "Is"
                , ifThenElseT _yn "" " ''not''"
                , " a march"
                ]
        MsgIsSubjectOtherThanTributary
            -> "{{is_subject_other_than_tributary_trigger}}"
        MsgSpawnScaledRebels {scriptMessageRtype = _rtype, scriptMessageLeader = _leader, scriptMessageYn = _large}
            -> mconcat
                [ _rtype
                , " rise in a "
                , ifThenElseT _large "large" "small"
                , " revolt scaled by total development"
                , _leader
                ]
        MsgCreateIndependentEstate {scriptMessageIcon = _icon
                                   , scriptMessageWhat = _what
                                   , scriptMessageMaybeGovernment = _government
                                   , scriptMessageMaybeGovernmentReform = _government_reform
                                   , scriptMessageMaybeCustomNationalIdeas = _custom_national_ideas
                                   , scriptMessageYn = _play_as}
            -> mconcat
                [ _icon
                , " "
                , _what
                , " estate declares independence, forming their own nation"
                , ifThenElseT (isJust _government || isJust _government_reform || isJust _custom_national_ideas) " with " ""
                , T.intercalate " and " (catMaybes
                    [ fmap (\g -> "a " <> g <> " government") _government
                    , fmap (\r -> "the " <> r <> " reform") _government_reform
                    ,  _custom_national_ideas
                    ])
                , "."
                , ifThenElseT _play_as " The human player takes over this new country." ""
                ]
        MsgHasLeaders {scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageDesc = _desc, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , _icon
                , " "
                , toMessage (roundNum _amt)
                , " "
                , _what
                , toMessage (plural _amt "" "s")
                , _desc
                ]
        MsgScaledEstateLandShareEffect {scriptMessageYn = _gain, scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "The "
                , _icon
                , " "
                , _what
                , " estate "
                , ifThenElseT _gain "gain" "lose"
                , " a share of land proportional to the country's total development"
                ]
        MsgProvinceDistance {scriptMessageWhom = _whom, scriptMessageAmt = _amt}
            -> mconcat
                [ "Province distance to "
                , _whom
                , " is at least "
                , toMessage (plainNum _amt)
                ]
        MsgNumOfReligionSecondary {scriptMessageAmt = _amt}
            -> mconcat
                [ "Syncretic faith is above "
                , toMessage (reducedNum plainPc _amt)
                ]
        MsgCreateSuccessionCrisis {scriptMessageAttacker = _attacker, scriptMessageDefender = _defender, scriptMessageWhom = _whom}
            -> mconcat
                [ "Create succession crisis for "
                , _whom
                , " with "
                , _attacker
                , " as attacker and "
                , _defender
                , " as defender"
                ]
        MsgDefinerLeaderToRuler
            -> "Make leader into a ruler with the following attributes:"
        MsgChangeSubjectType {scriptMessageType = _type}
            -> mconcat
                [ "Change subject type to "
                , _type
                ]
        MsgRemoveTradeModifier {scriptMessageWhat = _what, scriptMessageWhom = _whom}
            -> mconcat
                [ "Remove trade modifier "
                , toMessage (quotes _what)
                , " for "
                , _whom
                ]
        MsgHasTradeCompanyInvestmentInState {scriptMessageWhom = _whom}
            -> mconcat
                [ _whom
                , " has a trade company investment in a state (only one per state counts)"
                ]
        MsgRandomListTrigger
            -> "Only considered if:"
        MsgRandomListModifier {scriptMessageAmt = _amt}
            -> mconcat
                [ "Chance increases '''x "
                , toMessage (plainNum _amt)
                , "''' if:"
                ]
        MsgOwnOrNonTribSubjectDevelopment {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Own or non-tributary subject "
                , _icon
                , " development is at least "
                , toMessage (plainNum _amt)
                ]
        MsgOwnOrNonTribSubjectDevelopmentAs {scriptMessageIcon = _icon, scriptMessageWhom = _whom}
            -> mconcat
                [ "Own or non-tributary subject "
                , _icon
                , " development is at least that of "
                , _whom
                ]
        MsgHasOneOfBuildings {scriptMessageYn = _yn, scriptMessageWhat = _what}
            -> mconcat
                [ ifThenElseT _yn "Has" "Does ''not'' have"
                , " one of the following buildings: "
                , _what
                ]
        MsgNumBuildings {scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , toMessage (plainNum _amt)
                , plural _amt " building" " buildings"
                ]
        MsgTradeCompanyRegion {scriptMessageWhat = _what}
            -> mconcat
                [ "Is in the "
                , _what
                , " trade company region"
                ]
        MsgPreferredEmperor {scriptMessageWhom = _whom}
            -> mconcat
                [ "Is voting for "
                , _whom
                , " to become Emperor of the EoA"
                ]
        MsgCurrentIcon {scriptMessageIcon = _icon, scriptMessageWhom = _what}
            -> mconcat
                [ "Has commissioned "
                , _icon
                , " "
                , _what
                ]
        MsgPatriarchAuthority {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Patriarch authority is at least "
                , toMessage (reducedNum plainPc _amt)
                ]
        MsgIsRevolutionTarget {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , ifThenElseT _yn "" " ''not''"
                , " the [[revolution target]]"
                ]
        MsgRevolutionaryZeal {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Revolutionary zeal is at least "
                , toMessage (plainNum _amt)
                ]
        MsgSameGovtAsRoot
            -> "Has the same government type as our country"
        MsgOverrideCountryName {scriptMessageWhat = _what}
            -> mconcat
                [ "Country's name changes to "
                , toMessage (quotes _what)
                ]
        MsgEyaletEffect {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Country's name changes to "
                , toMessage (quotes _what)
                , " and the color is changed to align with our country"
                ]
        MsgFervor {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , _icon
                , " "
                , toMessage (plainNum _amt)
                , " fervor"
                ]
        MsgHasFlagship {scriptMessageYn = _yn}
            -> mconcat
                [ ifThenElseT _yn "Has" "Does ''not'' have"
                , " a flagship"
                ]
        MsgIsCapitalOf {scriptMessageWhom = _whom}
            -> mconcat
                [ "Is the capital of "
                , _whom
                ]
        MsgIsProductionLeader {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Is the leading producer of "
                , _icon
                , " "
                , _what
                ]
        MsgInnovativeness {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , _icon
                , " "
                , toMessage (plainNum _amt)
                , " innovativeness"
                ]
        MsgStartHREIncident {scriptMessageWhat = _what}
            -> mconcat
                [ "Start the Imperial Incident "
                , toMessage (iquotes _what)
                ]
        MsgIsForeignCompany {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , toMessage (ifThenElseT _yn "" " ''not''")
                , " a foreign mercenary company"
                ]
        MsgHasStatePatriach {scriptMessageYn = _yn}
            -> mconcat
                [ toMessage (ifThenElseT _yn "Has" "Does ''not'' have")
                , " a state patriach"
                ]
        MsgHasForeignConsort {scriptMessageYn = _yn}
            -> mconcat
                [ toMessage (ifThenElseT _yn "Has" "Does ''not'' have")
                , " a foreign consort"
                ]
        MsgSwapFreeIdeaGroup
            -> "Swap to the new [[national ideas]]"
        MsgAverageAutonomy {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Average autonomy is at least "
                , toMessage (plainPc _amt)
                ]
        MsgAverageAutonomyAboveMin {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Average autonomy above the minimum is at least "
                , toMessage (plainPc _amt)
                ]
        MsgAverageHomeAutonomy {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Average non-overseas core province autonomy is at least "
                , toMessage (plainPc _amt)
                ]
        MsgPowerProjection {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Power projection is at least "
                , toMessage (plainPc _amt)
                ]
        MsgElector {scriptMessageYn = _yn}
            -> mconcat
                [ "The country is "
                , ifThenElseT _yn "made" "removed as"
                , " an elector of the EoA"
                ]
        MsgNumOfWarReparations {scriptMessageAmt = _amt}
            -> mconcat
                [ "Receiving war reparations from at least "
                , toMessage (plainNum _amt)
                , plural _amt " country" " countries"
                ]
        MsgNumOfHiredMercCompanies {scriptMessageAmt = _amt}
            -> mconcat
                [ "Has hired at least "
                , toMessage (plainNum _amt)
                , " mercenary "
                , plural _amt "company" "companies"
                ]
        MsgNumOfForeignHREProvinces {scriptMessageAmt = _amt}
            -> mconcat
                [ "At least "
                , toMessage (plainNum _amt)
                , " EoA "
                , plural _amt "province is" "provinces are"
                , " owned by non-member states or subjects of non-member states"
                ]
        MsgNumOfStates {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , _icon
                , " "
                , toMessage (plainNum _amt)
                , plural _amt " state" " states"
                ]
        MsgNumOfExplorers {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , _icon
                , " "
                , toMessage (plainNum _amt)
                , plural _amt " explorer" " explorers"
                ]
        MsgNumOfConquistadors {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , _icon
                , " "
                , toMessage (plainNum _amt)
                , plural _amt " conquistador" " conquistadors"
                ]
        MsgMonthlyADM {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                ["Gains at least "
                , _icon
                , " "
                , toMessage (plainNum _amt)
                , " administrative power per month"
                ]
        MsgMonthlyDIP {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                ["Gains at least "
                , _icon
                , " "
                , toMessage (plainNum _amt)
                , " diplomatic power per month"
                ]
        MsgMonthlyMIL {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                ["Gains at least "
                , _icon
                , " "
                , toMessage (plainNum _amt)
                , " military power per month"
                ]
        MsgAnyActiveImperialIncident
            -> "Any active imperial incident"
        MsgMaxSailors {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , _icon
                , " "
                , toMessage (plainNum _amt)
                , " maximum sailors"
                ]
        MsgInGoldenAge {scriptMessageYn  = _yn}
            -> mconcat
                [ "Is"
                , ifThenElseT _yn "" " ''not''"
                , " in a golden age"
                ]
        MsgHasHadGoldenAge {scriptMessageYn  = _yn}
            -> mconcat
                [ "Has"
                , ifThenElseT _yn "" " ''not''"
                , " had a golden age"
                ]
        MsgHasTrader {scriptMessageWhom = _whom}
            -> mconcat
                [ _whom
                , " has an active [[merchant]] in the trade node"
                ]
        MsgArtilleryFraction {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "The ratio of "
                , _icon
                , " artillery to total army size is at least "
                , toMessage (reducedNum plainPc _amt)
                ]
        MsgCavalryFraction {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "The ratio of "
                , _icon
                , " cavalry to total army size is at least "
                , toMessage (reducedNum plainPc _amt)
                ]
        MsgInfantryFraction {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "The ratio of "
                , _icon
                , " infantry to total army size is at least "
                , toMessage (reducedNum plainPc _amt)
                ]
        MsgGalleyFraction {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "The ratio of "
                , _icon
                , " galleys to total navy size is at least "
                , toMessage (reducedNum plainPc _amt)
                ]
        MsgHeavyShipFraction {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "The ratio of "
                , _icon
                , " heavy ships to total navy size is at least "
                , toMessage (reducedNum plainPc _amt)
                ]
        MsgLightShipFraction {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "The ratio of "
                , _icon
                , " light ships to total navy size is at least "
                , toMessage (reducedNum plainPc _amt)
                ]
        MsgProsperity {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Prosperity is at least "
                , toMessage (plainPc _amt)
                ]
        MsgIsProsperous {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , ifThenElseT _yn "" " ''not''"
                , " prosperous"
                ]
        MsgNumElectors {scriptMessageAmt = _amt}
            -> mconcat
                [ "The EoA has at least "
                , toMessage (plainNum _amt)
                , plural _amt " elector" " electors"
                ]
        MsgHarmony {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , _icon
                , " "
                , toMessage (plainNum _amt)
                , " harmony"
                ]
        MsgTradeEmbargoing {scriptMessageWhom = _whom}
            -> mconcat
                [ "Is embargoing "
                , _whom
                ]
        MsgTotalBaseTax {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Total base tax is at least "
                , toMessage (plainNum _amt)
                ]
        MsgSuccessionClaim {scriptMessageWhom = _whom}
            -> mconcat
                [ "Has claimed the throne of "
                , _whom
                ]
        MsgHegemonStrength {scriptMessageAmt = _amt}
            -> mconcat
                [ "Hegemon power is at least "
                , toMessage (plainPc _amt)
                ]
        MsgHasActiveFervor {scriptMessageYn = _yn}
            -> mconcat
                [ ifThenElseT _yn "Has" "Does ''not'' have "
                , " any fervor effect active"
                ]
        MsgNumCentersOfTrade {scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , toMessage (plainNum _amt)
                , " centers of trade"
                ]
        MsgNumDiplomaticRelations {scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , toMessage (plainNum _amt)
                , " diplomatic relations"
                ]
        MsgNumHarmonized {scriptMessageAmt = _amt}
            -> mconcat
                [ "Has harmonized with at least "
                , toMessage (plainNum _amt)
                , " religions or religious groups"
                ]
        MsgNumTimesExpandedInfrastructure {scriptMessageAmt = _amt}
            -> mconcat
                [ "Infrastructure in the province has been expanded at least "
                , toMessage (plainNum _amt)
                , plural _amt " time" " times"
                ]
        MsgNumTimesImproved {scriptMessageAmt = _amt}
            -> mconcat
                [ "Province has been developed at least "
                , toMessage (plainNum _amt)
                , plural _amt " time" " times"
                ]
        MsgNumTimesImprovedByOwner {scriptMessageAmt = _amt}
            -> mconcat
                [ "Province has been developed at least "
                , toMessage (plainNum _amt)
                , plural _amt " time" " times"
                , " by its owner"
                ]
        MsgIsHarmonizingWith {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Is currently harmonizing with "
                , _icon
                , " "
                , _what
                ]
        MsgIsHarmonizingWithProvince {scriptMessageWhat = _what}
            -> mconcat
                [ "Is currently harmonizing with the religion in "
                , _what
                ]
        MsgHasHarmonizedWith {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Has harmonized with "
                , _icon
                , " "
                , _what
                ]
        MsgNumTimesUsedTransferDevelopment {scriptMessageAmt = _amt}
            -> mconcat
                [ "Has concentrated development at least "
                , toMessage (plainNum _amt)
                , plural _amt " time" " times"
                ]
        MsgProvinceHasCurrentTechFort {scriptMessageYn = _yn}
            -> mconcat
                [ ifThenElseT _yn "Has" "Does ''not'' have"
                , " the highest level fort available"
                ]
        MsgHasMostProvinceTradePower {scriptMessageWhom = _whom}
            -> mconcat
                [ _whom
                , " has the most amount of trade power in the node"
                ]
        MsgAddProvinceTriggeredModifier {scriptMessageWhat = _what}
            -> mconcat
                [ "Gain triggered province modifier "
                , _what
                , " until the end of the campaign, providing the following effects:"
                ]
        MsgHasInfluencingFort {scriptMessageYn  = _yn}
            -> mconcat
                [ "Is"
                , ifThenElseT _yn "" " ''not''"
                , " in Zone of Control of a fort"
                ]
        MsgIsInCoalition {scriptMessageYn  = _yn}
            -> mconcat
                [ "Is"
                , ifThenElseT _yn "" " ''not''"
                , " in a coalition"
                ]
        MsgChangeController {scriptMessageWhom = _whom}
            -> mconcat
                [ "Change province controller to "
                , _whom
                ]
        MsgIsExcommunicated {scriptMessageYn  = _yn}
            -> mconcat
                [ "Is"
                , ifThenElseT _yn "" " ''not''"
                , " excommunicated"
                ]
        MsgExcommunicate {scriptMessageWhom = _whom}
            -> mconcat
                [ "Excommunicate "
                , _whom
                ]
        MsgChangeConsortSameCulture {scriptMessageWhom = _whom}
            -> mconcat
                [ "Change consort culture to that of "
                , _whom
                ]
        MsgChangeConsortCulture {scriptMessageWhat = _what}
            -> mconcat
                [ "Change consort culture to "
                , _what
                ]
        MsgChangeHeirSameCulture {scriptMessageWhom = _whom}
            -> mconcat
                [ "Change heir culture to that of "
                , _whom
                ]
        MsgChangeHeirCulture {scriptMessageWhat = _what}
            -> mconcat
                [ "Change heir culture to "
                , _what
                ]
        MsgChangeRulerSameCulture {scriptMessageWhom = _whom}
            -> mconcat
                [ "Change ruler culture to that of "
                , _whom
                ]
        MsgChangeRulerCulture {scriptMessageWhat = _what}
            -> mconcat
                [ "Change ruler culture to "
                , _what
                ]
        MsgConsortCultureIs {scriptMessageWhat = _what}
            -> mconcat
                [ "Consort's culture is "
                , _what
                ]
        MsgConsortCultureIsSame {scriptMessageWhom = _whom}
            -> mconcat
                [ "Consort's culture is the same as "
                , _whom
                ]
        MsgHeirCultureIs {scriptMessageWhat = _what}
            -> mconcat
                [ "Heir's culture is "
                , _what
                ]
        MsgHeirCultureIsSame {scriptMessageWhom = _whom}
            -> mconcat
                [ "Heir's culture is the same as "
                , _whom
                ]
        MsgHasFemaleConsort {scriptMessageYn = _yn}
            -> mconcat
                [ ifThenElseT _yn "Has" "Does ''not'' have"
                , " a female consort"
                ]
        MsgConsortAge {scriptMessageAmt = _amt}
            -> mconcat
                [ "Consort is at least "
                , toMessage (plainNum _amt)
                , " years old"
                ]
        MsgIsOriginOfConsort {scriptMessageWhat = _what}
            -> mconcat
                [ "The country's consort is from "
                , _what
                ]
        MsgRemoveConsort
            -> "Contry's consort is removed"
        MsgClearRebels
            -> "All rebels are removed from the province"
        MsgMonthsSinceDefection {scriptMessageAmt = _amt}
            -> mconcat
                [ "It has been at least "
                , toMessage (formatMonths _amt)
                , " since the province defected"
                ]
        MsgJanissaryPercentage {scriptMessageAmt = _amt}
            -> mconcat
                [ "The ratio of janissary regiments to total army size is at least "
                , toMessage (reducedNum plainPc _amt)
                ]
        MsgBreakUnion {scriptMessageWhom = _whom}
            -> mconcat
                [ "Break personal union with "
                , _whom
                ]
        MsgCreateMarriage {scriptMessageWhom = _whom}
            -> mconcat
                [ "Gain royal marriage with "
                , _whom
                ]
        MsgAddTradeNodeIcome {scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , toMessage (plainNum _amt)
                , " months worth of income from the trade node"
                ]
        MsgYearlyCorruptionIncrease {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ _icon
                , " Yearly corruption increase is at least "
                , toMessage (reducedNum plainPc _amt)
                ]
        MsgWasNeverGermanReigionalTag
            -> "Was never a [[Formable_countries#German_regional_tags|german regional tag]]"
        MsgReformLevel {scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , toMessage (plainNum _amt)
                , " government reforms"
                ]
        MsgIsSupportingIndependenceOf {scriptMessageWhom = _whom}
            -> mconcat
                [ "Is supporting the independence of "
                , _whom
                ]
        MsgFormCoalitionAgainst {scriptMessageWhom = _whom}
            -> mconcat
                [ "Form a coalition against "
                , _whom
                ]
        MsgProvincesOnCapitalContinentOf {scriptMessageWhom = _whom}
            -> mconcat
                [ "Has a province on the continent with the capital of "
                , _whom
                ]
        MsgExpellingMinorities {scriptMessageYn  = _yn}
            -> mconcat
                [ "Is"
                , ifThenElseT _yn "" " ''not''"
                , " expelling minorities"
                ]
        MsgHasOrBuildingFlagship {scriptMessageYn  = _yn}
            -> mconcat
                [ ifThenElseT _yn "Has or is building" "Doesn't have and is not building"
                , " a flagship"
                ]
        MsgRecentTreasureShipPassage {scriptMessageYn  = _yn}
            -> mconcat
                [ "A [[treasure fleet]] has"
                , ifThenElseT _yn "" " ''not''"
                , " recently passed by"
                ]
        MsgNewEstateRegency {scriptMessageIcon = _icon, scriptMessageWho = _who}
            -> mconcat
                [ "A new regent from the "
                , _icon
                , " "
                , _who
                , " estate comes to power"
                ]
        MsgEstateLedRegencyInfluence {scriptMessageAmt = _amt}
            -> mconcat
                [ "The estate leading the regency has at least "
                , toMessage (plainNum _amt)
                , " influence"
                ]
        MsgEstateLedRegencyLoyalty {scriptMessageAmt = _amt}
            -> mconcat
                [ "The estate leading the regency has at least "
                , toMessage (plainNum _amt)
                , " loyalty"
                ]
        MsgSetEstateLedRegencyPrivilegeRandom
            -> "Grant the estate leading the regency a random privilege"
        MsgTradeNode {scriptMessageWhat = _what}
            -> mconcat
                [ _what
                , " trade node:"
                ]
        MsgColonyMissionReward {scriptMessageProv = _prov}
            -> mconcat
                [ _prov
                , ": If uncolonized, gain a siberian frontier colony with 400 settlers (+1/+1/+1 development if the ''“Higher Developed Colonies”'' age ability is unlocked), if owned gain +1/+1/+1 development, otherwise gain a permanent claim."
                ]
        MsgAddSiberianConstruction {scriptMessageAmt = _amt}
            -> mconcat
                [ "Gain a siberian frontier colony with "
                , toMessage (plainNum _amt)
                , " settlers"
                ]
        MsgNumUnlockedCults {scriptMessageAmt = _amt}
            -> mconcat
                [ "Has unlocked at least "
                , toMessage (plainNum _amt)
                , plural _amt " cult" " cults"
                ]
        MsgHasPrimaryCult {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Has "
                , _icon
                , " "
                , _what
                , " as primary cult"
                ]
        MsgChangeCult {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Change cult to "
                , _icon
                , " "
                , _what
                ]
        MsgSelectPrimaryCult {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Select "
                , _icon
                , " "
                , _what
                , " as primary cult"
                ]
        MsgChangePrimaryCult {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Change primary cult to "
                , _icon
                , " "
                , _what
                ]
        MsgUnlockEstatePrivilege {scriptMessageWhat = _what}
            -> mconcat
                [ "Unlock the "
                , toMessage (iquotes _what)
                , " estate privilege"
                ]
        MsgHasUnlockedEstatePrivilege {scriptMessageWhat = _what}
            -> mconcat
                [ "Has unlocked the estate privilege "
                , toMessage (iquotes _what)
                ]
        MsgUnlockGovernmentReform {scriptMessageWhat = _what}
            -> mconcat
                [ "Unlock the "
                , toMessage (iquotes _what)
                , " government reform"
                ]
        MsgKillUnits {scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageWho = _who, scriptMessageAmt = _amt}
            -> mconcat
                [ _who
                , " loses "
                , toMessage (plainNum _amt)
                , " "
                , _icon
                , " "
                , _what
                , plural _amt " unit" " units"
                ]
        MsgConstructBuilding {scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageSpeed = _speed, scriptMessageCost = _cost}
            -> mconcat
                [ "Start building "
                , _icon
                , " "
                , _what
                , " at "
                , toMessage (reducedNum plainPc _cost)
                , " of normal cost, taking "
                , toMessage (reducedNum plainPc _speed)
                , " of normal time"
                ]
        MsgAllowBaselineInviteScholar {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Allow to invite a scholar of the "
                , _icon
                , " "
                , _what
                , " school without diplomatic relations"
                ]
        MsgRemoveLoot {scriptMessageWho = _who, scriptMessageAmt = _amt}
            -> mconcat
                [ _who
                , " gets "
                , toMessage (plainPc _amt)
                , " of the loot from the province"
                ]
        MsgSwitchTag {scriptMessageWho = _who}
            -> mconcat
                [ "The human player plays as "
                , _who
                ]
        MsgPowerCost {scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ "Pay "
                , _icon
                , " "
                , toMessage (colourNum False _amt)
                , " "
                , _what
                , " power<ref name=\"allpowercost\">This cost is modified by the {{icon|all power costs}} all power costs modifier.</ref>"
                ]
        MsgUnlockMercCompany {scriptMessageWhat = _what, scriptMessageFree = _free, scriptMessageGlobal = _global}
            -> mconcat
                [ "Unlock mercenary company "
                , toMessage (iquotes _what)
                , if _free || _global then "(" else ""
                , if _free then "This mercenary company does ''not'' cost army professionalism when hired." else ""
                , if _global then "Is globally available for recruitment." else ""
                , if _free || _global then ")" else ""
                ]
        MsgDisableRebelsFromSeizeLand {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "The "
                , _icon
                , " "
                , _what
                , " estate "
                , " will no longer raise any rebels when their land gets seized if their loyalty drops below '''30'''"
                ]
        MsgNumRulerTraits {scriptMessageAmt = _amt}
            -> mconcat
                [ "The ruler has at least "
                , toMessage (roundNum _amt)
                , " traits"
                ]
        MsgNumAcceptedCulturesTrigger {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , _icon
                , " "
                , toMessage (plainNum _amt)
                , " accepted cultures"
                ]
        MsgYearsOfTradeIncome {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Gain "
                , toMessage (roundNum _amt)
                , " years worth of "
                , _icon
                , " trade income"
                ]
        MsgAddFavors {scriptMessageWho = _who, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , toMessage (plainNum _amt)
                , " favors with "
                , _who
                ]
        MsgSubsidisedPercentAmount {scriptMessageAmt = _amt }
            -> mconcat
                [ "At least "
                , toMessage (reducedNum plainPc _amt)
                , " of the income is from subsidies"
                ]
        MsgIsOrWasTag {scriptMessageWhom = _whom}
            -> mconcat
                [ "The country is ''or'' was "
                , _whom
                ]
        MsgGreatPowerRank {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Is a "
                , _icon
                , " great power with rank "
                , toMessage (roundNum _amt)
                , " or worse or not a great power"
                ]
        MsgIsAbsolutismActive {scriptMessageYn = _yn}
            -> mconcat
                [ "The current age "
                , toMessage (ifThenElseT _yn "has" "does ''not'' have")
                , " the {{icon|absolutism|28px}} absolutism mechanic"
                ]
        MsgNumOfProvincesInStates {scriptMessageAmt = _amt }
            -> mconcat
                [ "Has at least "
                , toMessage (plainNum _amt)
                , " provinces in states"
                ]
        MsgForceConverted {scriptMessageWhom = _whom}
            -> mconcat
                [ "Has been force converted by "
                , _whom
                ]
        MsgAddYearsOfOwnedProvinceIncome {scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , toMessage (colourNum True _amt)
                , " years of "
                , T.toLower _what
                , " income from provinces which fulfill the following conditions:"
                ]
        MsgTotalStats {scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ "The "
                , _what
                , "'s {{icon|adm}}, {{icon|dip}} and {{icon|mil}} add up to at least "
                , toMessage (bold (plainNum _amt))
                ]
        MsgPreviousOwner {scriptMessageWhom = _whom}
            -> mconcat
                [ "Was previously owned by "
                , _whom
                ]
        MsgAddLatestBuilding {scriptMessageWhat = _what}
            -> mconcat
                [ "Construct one of the following buildings depending on the available technology: "
                , _what
                ]
        MsgHasPointsForLivonianMonarchy {scriptMessageIcon = _, scriptMessageWhat = _what}
            -> mconcat
                [ "The country variables <tt>liv_adm</tt>, <tt>liv_dip</tt> and <tt>liv_mil</tt> have exactly the values which are required for the government reform "
                ,  toMessage (iquotes _what)
                ]
        MsgIsRentingCondottieriTo {scriptMessageWhom = _whom}
            -> mconcat
                [ "Is renting [[condottieri]] to "
                , _whom
                ]
        MsgHasCompletedIdeaGroupOfCategory {scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has completed at least "
                , toMessage (plainNum _amt)
                , " "
                , _what
                , plural _amt " idea group" " idea groups"
                ]
        MsgHasActiveIdeaGroupOfCategory {scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has any active but incomplete "
                , _what
                , " idea group"
                ]
        MsgJoinLeague {scriptMessageWhat = _what}
            -> mconcat
                [ "Join the "
                , _what
                , " league"
                ]
        MsgMercTemplate {scriptMessageWhat = _what}
            -> mconcat
                [ "Is "
                , toMessage (iquotes _what)
                ]
        MsgHiredForMonths {scriptMessageAmt = _amt}
            -> mconcat
                [ "Has been hired for at least "
                , toMessage (plainNum _amt)
                , " months"
                ]
        MsgHasStateEdict {scriptMessageWhat = _what}
            -> mconcat
                [ "Has enacted the state edict"
                , toMessage (iquotes _what)
                ]
        MsgOwesFavors {scriptMessageIcon = __icon, scriptMessageWhom = _whom, scriptMessageAmt = _amt}
            -> mconcat
                [ "Owes "
                , _whom
                , " at least "
                , toMessage (plainNum _amt)
                , " favors"
                ]
        MsgCanSwapOutEstateGrantingReform {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Has no "
                , _icon
                , " "
                , _what
                , " estate ''or'' the estate has no privileges"
                ]
        MsgHasPasha {scriptMessageYn = _yn}
            -> mconcat
                [ toMessage (ifThenElseT _yn "Has" "Does ''not'' have")
                , " a pasha"
                ]
        MsgUses {scriptMessageWhat = _what, scriptMessageYn = _yn}
            -> mconcat
                [ ifThenElseT _yn "Uses" "Does ''not'' use"
                , " [["
                , T.toLower _what
                , "]]"
                ]
        MsgUsesIcon {scriptMessageIcon = _icon, scriptMessageWhat = _what, scriptMessageYn = _yn }
            -> mconcat
                [ ifThenElseT _yn "Uses" "Does ''not'' use"
                , " "
                , _icon
                , " "
                , T.toLower _what
                ]
        MsgAddGovernmentPower {scriptMessageType = _type, scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , toMessage (colourNum True _amt)
                , " "
                , toMessage (iquotes _what)
                , " for "
                , toMessage (iquotes _type)
                ]
        MsgSetGovernmentPower {scriptMessageType = _type, scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ "Set "
                , toMessage (iquotes _what)
                , " in "
                , toMessage (iquotes _type)
                , " to "
                , toMessage (plainNum _amt)
                ]
        MsgFreezeGovernmentPower {scriptMessageType = _type, scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ "Freeze "
                , toMessage (iquotes _what)
                , " in "
                , toMessage (iquotes _type)
                , " to its current value"
                ]
        MsgUnfreezeGovernmentPower {scriptMessageType = _type, scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ "Unfreeze "
                , toMessage (iquotes _what)
                , " in "
                , toMessage (iquotes _type)
                ]
        MsgHasGovernmentPower {scriptMessageType = _type, scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has at least "
                , toMessage (plainNum _amt)
                , " "
                , toMessage (iquotes _what)
                , " in "
                , toMessage (iquotes _type)
                ]
        MsgIsGovernmentPowerFrozen {scriptMessageType = _type, scriptMessageWhat = _what, scriptMessageAmt = _amt}
            -> mconcat
                [toMessage (iquotes _what)
                , " in "
                , toMessage (iquotes _type)
                , " is frozen"
                ]
        MsgHasGovernmentMechanic {scriptMessageWhat = _what}
            -> mconcat
                ["The government has "
                , toMessage (iquotes _what)
                ]
        MsgStartDebate {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                ["Start a debate on "
                , toMessage (iquotes _what)
                , " in "
                , _icon
                , " parliament"
                ]
        MsgAddInflationScaledToTrade {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                ["Add "
                , _icon
                , " "
                , toMessage (colourNum False _amt)
                , " inflation for each percentage of trade income"
                ]
        MsgNationalFocus {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                ["National focus is set to "
                , _icon
                , " "
                , _what
                ]
        MsgIsNeighborOfProvince {scriptMessageWhat = _what}
            -> mconcat
                [ "Neighbors province "
                , _what
                ]
        MsgActiveDecree {scriptMessageWhat = _what}
            -> mconcat
                [ "Has the {{icon|eoc}} decree "
                , toMessage (iquotes _what)
                ]
        MsgEocReform {scriptMessageWhat = _what}
            -> mconcat
                [ "Has the {{icon|eoc}} Steward reform "
                , toMessage (iquotes _what)
                ]
        MsgIsLackingInstitutions {scriptMessageYn = _yn}
            -> mconcat
                [ ifThenElseT _yn "Does ''not'' have" "Has"
                , " embraced all the active institutions"
                ]
        MsgHasNavalDoctrine {scriptMessageWhat = _what}
            -> mconcat
                [ "Has "
                , _what
                , " naval doctrine"
                ]
        MsgGivesMilitaryAccess {scriptMessageWhom = _whom}
            -> mconcat
                [ "Gives military access to "
                , _whom
                ]
        MsgReceivesMilitaryAccess {scriptMessageWhom = _whom}
            -> mconcat
                [ "Receives military access from "
                , _whom
                ]
        MsgGivesFleetBasingRights {scriptMessageWhom = _whom}
            -> mconcat
                [ "Gives fleet basing rights to "
                , _whom
                ]
        MsgReceivesFleetBasingRights {scriptMessageWhom = _whom}
            -> mconcat
                [ "Receives fleet basing rights from "
                , _whom
                ]
        MsgTradeValueInNode {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "This trade node has at least "
                , _icon
                , " "
                , toMessage (plainNum _amt)
                , " trade value"
                ]
        MsgSetEmperorOfChina {scriptMessageWhom = _whom}
            -> mconcat
                [ _whom
                , " becomes the {{icon|eoc}} Steward of the Sorrow"
                ]
        MsgSetBT {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Set "
                , _icon
                , " "
                , " base tax to "
                , toMessage (plainNum _amt)
                ]
        MsgSetBP {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Set "
                , _icon
                , " "
                , " base production to "
                , toMessage (plainNum _amt)
                ]
        MsgSetBM {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Set "
                , _icon
                , " "
                , " base manpower to "
                , toMessage (plainNum _amt)
                ]
        MsgSameTradeNodeAs {scriptMessageWhat = _what}
            -> mconcat
                [ "Is in the same trade node as "
                , _what
                ]
        MsgAddRival {scriptMessageWhom = _whom}
            -> mconcat
                [ "Add "
                , _whom
                , " as a [[rival]]."
                ]
        MsgRemoveRival {scriptMessageWhom = _whom}
            -> mconcat
                [ "Remove "
                , _whom
                , " as a [[rival]]."
                ]
        MsgForceRemoveRival {scriptMessageWhom = _whom}
            -> mconcat
                [ "Remove "
                , _whom
                , " as a [[rival]]. The country can't be selected as a rival again for 15 years."
                ]
        MsgAddADMTech {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Advance "
                , _icon
                , " administrative technology by "
                , toMessage (roundNum _amt)
                , plural _amt " level" " levels"
                ]
        MsgAddDIPTech {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Advance "
                , _icon
                , " diplomatic technology by "
                , toMessage (roundNum _amt)
                , plural _amt " level" " levels"
                ]
        MsgAddMILTech {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ "Advance "
                , _icon
                , " military technology by "
                , toMessage (roundNum _amt)
                , plural _amt " level" " levels"
                ]
        MsgIsHegemon {scriptMessageYn = _yn}
            -> mconcat
                [ "Is"
                , ifThenElseT _yn "" " ''not''"
                ," a [[hegemon]]"
                ]
        MsgDisableEstateAction {scriptMessageEstateAction = _action, scriptMessageDecisionName = _decName, scriptMessageDecisionLoc = _decLoc, scriptMessagePrivilegeName = _privName, scriptMessagePrivilegeLoc = _privLoc}
            -> mconcat
                [ "Disable the decision [[List of estate actions#"
                , _decName
                , "|"
                , _decLoc
                , "]].<!-- disable_estate_action "
                , _action
                , " -->"
                ]
        MsgEnableEstateAction {scriptMessageEstateAction = _action, scriptMessageDecisionName = _decName, scriptMessageDecisionLoc = _decLoc, scriptMessagePrivilegeName = _privName, scriptMessagePrivilegeLoc = _privLoc}
            -> mconcat
                [ "Enable the decision [[List of estate actions#"
                , _decName
                , "|"
                , _decLoc
                , "]].<!-- enable_estate_action "
                , _action
                , " -->"
                ]
        MsgHasEnabledEstateAction {scriptMessageEstateAction = _action, scriptMessageDecisionName = _decName, scriptMessageDecisionLoc = _decLoc, scriptMessagePrivilegeName = _privName, scriptMessagePrivilegeLoc = _privLoc}
            -> mconcat
                [ ifThenElseT (T.null _privLoc)
                    ("Has unlocked the estate action <tt>" <> _action <> "</tt> ''(No way to do this has been found in the game files)''" )
                    ("Has the estate privilege " <> toMessage (iquotes _privLoc))
                , ".<!-- "
                , _privName
                , " / has_enabled_estate_action "
                , _action
                , " -->"
                ]
        MsgEstateActionCoolDown {scriptMessageEstateAction = _action, scriptMessageAmt = _amt}
            -> mconcat
                [ "Has ''not'' enacted this decision nor any other decision which uses the cooldown timer <tt>"
                , _action
                ,"</tt> in the last "
                , toMessage (formatDays _amt)
                , ".<!-- estate_action_off_cooldown "
                , _action
                , " -->"
                ]
        MsgHasEstateAgenda {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Has an active "
                , _icon
                , " "
                , _what
                , " agenda"
                ]
        MsgAutoCompleteEstateAgenda {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Automatically complete the estate agenda of the "
                , _icon
                , " "
                , _what
                , " estate if it is active"
                ]
        MsgEstateActionMonarchPower {scriptMessageText = _estate_name, scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Gain "
                , _icon
                , " 50/100/150/200 "
                , _what
                , " power if the "
                , _estate_name
                , " estate has below 50%/at least 50%/75%/100% influence"
                ]
        MsgEstateActionTradition {scriptMessageIcon = _icon, scriptMessageWhom = _estate_name, scriptMessageWhat = _what}
            -> mconcat
                [ "Gain "
                , " 10/15/20/25 "
                , _what
                , " tradition if the "
                , _icon
                , " "
                , _estate_name
                , " estate has below 50%/at least 50%/75%/100% influence"
                ]
        MsgCreateScalingLeader {scriptMessageIcon = _icon, scriptMessageWhom = _leader, scriptMessageWhat = _what}
            -> mconcat
                [ "Gain "
                , _icon
                , " "
                , _leader
                , " with 20 more "
                , _what
                , " tradition than the country currently has"
                ]
        MsgUnlockParliamentIssue {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Unlock the "
                , _icon
                , " parliament issue "
                , toMessage (iquotes _what)
                ]
        MsgHasParliamentIssueUnlocked {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Has unlocked the "
                , _icon
                , " parliament issue "
                , toMessage (iquotes _what)
                ]
        MsgHasNotEnactedParliamentAction {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Has not enacted the "
                , _icon
                , " parliament issue "
                , toMessage (iquotes _what)
                ]
        MsgTooltip {scriptMessageWhat = _what}
            -> mconcat
                [ "''Tooltip: "
                , toMessage (quotes (T.replace "\n" "<br />" _what))
                , "''"
                ]
        MsgAddRandomDev {scriptMessageIcon = _icon, scriptMessageAmt = _amt}
            -> mconcat
                [ gainOrLose _amt
                , " "
                , _icon
                , " "
                , toMessage (colourNum True _amt)
                , " random development"
                ]
        MsgFor {scriptMessageAmt = _amt}
            -> mconcat
                [ "Repeat the following effects "
                , toMessage (bold (plainNum _amt))
                , " times:"
                ]
        MsgDisableTradingPolicy {scriptMessageWhat = _what}
            -> mconcat
                [ "Disable the [[trade policy]] "
                , toMessage (iquotes _what)
                ]
        MsgEnableTradingPolicy {scriptMessageWhat = _what}
            -> mconcat
                [ "Enable the [[trade policy]] "
                , toMessage (iquotes _what)
                ]
        MsgHasAiPersonality {scriptMessageIcon = _icon, scriptMessageWhat = _what}
            -> mconcat
                [ "Has the AI personality "
                , _icon
                , " "
                , _what
                ]
        MsgSetDynasty {scriptMessageWhat = _whom}
            -> mconcat
                [ "Change dynasty to "
                , toMessage (iquotes _whom)
                ]
        MsgSetDynastySameAs {scriptMessageWhom = _what}
            -> mconcat
                [ "Change dynasty to that of "
                , _what
                ]
        MsgJoinAllDefensiveWarsOf {scriptMessageWhom = _what}
            -> mconcat
                [ "Join all defensive wars of "
                , _what
                ]
        MsgSetDefenderOfTheFaith {scriptMessageWhat = _what, scriptMessageWhom = _whom}
            -> mconcat
                [ _whom
                , " becomes {{icon|dotf}} Defender of the Faith of the "
                , _what
                , " religion"
                ]
        MsgSetDefenderOfTheFaithAsReligion {scriptMessageWhat = _what, scriptMessageWhom = _whom}
            -> mconcat
                [ _whom
                , " becomes {{icon|dotf}} Defender of the Faith of the religion of "
                , _what
                ]
        MsgIronman {scriptMessageYn  = _yn}
            -> mconcat
                [ "The game is"
                , ifThenElseT _yn "" " ''not''"
                , " {{icon|ironman}} ironman"
                ]
        MsgIsAheadOfTimeInTechnology {scriptMessageWhat = _what}
            -> mconcat
                [ "Is ahead of time in {{icon|"
                , _what
                , "}} "
                , _what
                ]
        MsgDistributeDevelopment {scriptMessageWhat = _what, scriptMessageAmt = _amt, scriptMessageMaybeLimt = _limit}
            -> mconcat
                [
                    "Distribute {{icon|"
                    , _what
                    , "}} "
                    , toMessage (colourNum True _amt)
                    , " "
                    , _what
                    , " development among random owned provinces"
                    , maybe "" ((" which fulfill the following conditions:\n") <>) _limit
                ]
        MsgNumBattles {scriptMessageAmt = _amt}
            -> mconcat
                [ "Has won at least "
                , toMessage (roundNum _amt)
                , " battles"
                ]
        MsgNumWars {scriptMessageAmt = _amt}
            -> mconcat
                [ "Has won at least "
                , toMessage (roundNum _amt)
                , " wars"
                ]
    renderMessage _ _ _ = error "Sorry, non-English localisation not yet supported."

-- FIXME: What's the significance of this?
ancestorText :: Bool -> Text
ancestorText False = ""
ancestorText True  = "<!-- ancestor -->"

schoolOpinion :: Double -> Text
schoolOpinion (-1) = "negative"
schoolOpinion  0   = "neutral"
schoolOpinion  1   = "postive"
schoolOpinion val  = "(Unknown <> " <> T.pack (show val) <> ")"

-- | Message paired with an indentation level.
type IndentedMessage = (Int, ScriptMessage)
-- | List of messages, paired with their respective indentation levels.
type IndentedMessages = [IndentedMessage]

-- | Convenience synonym.
type StatementHandler g m = GenericStatement -> PPT g m IndentedMessages

-- | Convert a single message to Text.
messageText :: (IsGameData (GameData g), Monad m) => ScriptMessage -> PPT g m Text
messageText msg = do
    mlangs <- getLangs
    return $ renderMessage Script mlangs msg

-- | Convert a single message to Doc.
message :: (IsGameData (GameData g), Monad m) => ScriptMessage -> PPT g m Doc
message msg = Doc.strictText <$> messageText msg

-- | Convert a list of messages zipped with their indentation levels to a Doc.
-- Each message is prepended with a number of asterisks (levels of bullet
-- list) equal to its indentation level.
imsg2doc :: (IsGameData (GameData g), Monad m) => IndentedMessages -> PPT g m Doc
imsg2doc msgs = PP.vsep <$>
                mapM (\(i,rm) -> do
                        m <- message rm
                        return (PP.hsep [Doc.strictText (T.replicate i "*"),  m]))
                     msgs

-- | As 'imsg2doc', but use HTML to format the messages instead of wiki markup.
-- This behaves better with <pre> blocks but doesn't play well with idea
-- groups.
imsg2doc_html :: forall g m. (IsGameData (GameData g), Monad m) => IndentedMessages -> PPT g m Doc
imsg2doc_html [] = return mempty
imsg2doc_html msgs@((i,_):_)
    | i > 0     = PP.enclose "<ul>" "</ul>" . fst <$> imsg2doc' msgs
    | otherwise = fst <$> imsg2doc' msgs
    where
        -- Format all (remaining) messages at the current indent level.
        imsg2doc' :: IndentedMessages -> PPT g m (Doc, IndentedMessages)
        imsg2doc' [] = return (mempty, [])
        imsg2doc' [(_, rm)] = do -- Last message.
            m <- message rm
            return (PP.enclose "<li>" "</li>" m, [])
        imsg2doc' ((i, rm):msgs@((i',_):_))
            | i < i' = do
                -- New indent.
                m <- message rm
                -- Format the indented stuff.
                (indented, moremsgs) <- imsg2doc' msgs
                -- Format stuff after the indent.
                (postdoc, restmsgs) <- imsg2doc' moremsgs
                -- Put it all together.
                return (PP.vsep
                            [PP.enclose "<li>" "</li>"
                                (PP.vsep
                                    [m
                                    ,PP.enclose "<ul>" "</ul>" indented])
                            ,postdoc]
                       , restmsgs)
            | i > i' = do
                -- Last message at this level.
                m <- PP.enclose "<li>" "</li>" <$> message rm
                return (m, msgs)
            | otherwise = do
                -- Carry on with this indent level.
                m <- PP.enclose "<li>" "</li>" <$> message rm
                (postdoc, restmsgs) <- imsg2doc' msgs
                return (m <> PP.line <> postdoc, restmsgs)
